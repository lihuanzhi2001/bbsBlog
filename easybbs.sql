/*
 Navicat MySQL Data Transfer

 Source Server         : new_mysql57
 Source Server Type    : MySQL
 Source Server Version : 50736
 Source Host           : 192.168.111.138:3306
 Source Schema         : easybbs

 Target Server Type    : MySQL
 Target Server Version : 50736
 File Encoding         : 65001

 Date: 16/06/2023 13:42:13
*/

SET NAMES utf8mb4;
SET FOREIGN_KEY_CHECKS = 0;

-- ----------------------------
-- Table structure for collect_record
-- ----------------------------
DROP TABLE IF EXISTS `collect_record`;
CREATE TABLE `collect_record`  (
  `op_id` int(11) NOT NULL AUTO_INCREMENT COMMENT '自增ID',
  `object_id` varchar(15) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL COMMENT '主体ID',
  `user_id` varchar(15) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL COMMENT '用户ID',
  `create_time` datetime NULL DEFAULT NULL COMMENT '发布时间',
  `author_user_id` varchar(15) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '主体作者ID',
  PRIMARY KEY (`op_id`) USING BTREE,
  UNIQUE INDEX `idx_key`(`object_id`, `user_id`) USING BTREE,
  INDEX `idx_user_id`(`user_id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 10022 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci COMMENT = '收藏记录' ROW_FORMAT = DYNAMIC;

-- ----------------------------
-- Records of collect_record
-- ----------------------------
INSERT INTO `collect_record` VALUES (10019, 'OlCSNpv6zq6i72O', '9008483061', '2023-05-14 21:53:38', '3058131375');
INSERT INTO `collect_record` VALUES (10020, 'OlCSNpv6zq6i72O', '8423597423', '2023-05-15 10:22:03', '3058131375');
INSERT INTO `collect_record` VALUES (10021, 'PW7QQfQXILxF9Wy', '8423597423', '2023-05-15 18:27:48', '8408747315');

-- ----------------------------
-- Table structure for complaint_histories_record
-- ----------------------------
DROP TABLE IF EXISTS `complaint_histories_record`;
CREATE TABLE `complaint_histories_record`  (
  `id` int(11) NOT NULL AUTO_INCREMENT COMMENT '自增id',
  `complaint_id` int(11) NOT NULL COMMENT '投诉记录id',
  `admin_id` varchar(15) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL COMMENT '处理管理员id',
  `comment` text CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL COMMENT '管理处理内容或备注信息',
  `update_time` datetime NULL DEFAULT NULL COMMENT '处理时间',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 20 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci ROW_FORMAT = DYNAMIC;

-- ----------------------------
-- Records of complaint_histories_record
-- ----------------------------
INSERT INTO `complaint_histories_record` VALUES (17, 5, '0', '并没有发现违规', '2023-05-15 10:23:53');
INSERT INTO `complaint_histories_record` VALUES (18, 5, '0', '并没有发现违规', '2023-05-15 10:24:10');
INSERT INTO `complaint_histories_record` VALUES (19, 4, '0', '', '2023-05-15 17:47:15');

-- ----------------------------
-- Table structure for complaint_record
-- ----------------------------
DROP TABLE IF EXISTS `complaint_record`;
CREATE TABLE `complaint_record`  (
  `id` int(11) NOT NULL AUTO_INCREMENT COMMENT '自增id',
  `user_id` varchar(15) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL COMMENT '投诉用户的id',
  `object_id` varchar(15) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL COMMENT '主体id',
  `type` tinyint(4) NOT NULL DEFAULT 0 COMMENT '投诉类型: 0: 博文投诉, 1: 评论投诉',
  `content` text CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL COMMENT '投诉内容',
  `create_time` datetime NULL DEFAULT NULL COMMENT '投诉提交时间',
  `status` tinyint(4) NOT NULL DEFAULT 0 COMMENT '投诉处理状态，例如：0 - 未处理，1 - 处理中，2 - 已处理，3 - 已关闭',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 13 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci ROW_FORMAT = DYNAMIC;

-- ----------------------------
-- Records of complaint_record
-- ----------------------------
INSERT INTO `complaint_record` VALUES (4, '8423597423', '10025', 1, '违规评论内容', '2023-05-15 10:22:47', 1);
INSERT INTO `complaint_record` VALUES (5, '8423597423', 'OlCSNpv6zq6i72O', 0, '违规博文，请严查', '2023-05-15 10:23:01', 3);
INSERT INTO `complaint_record` VALUES (6, '8423597423', '10028', 1, '骂粗口', '2023-05-15 18:28:20', 0);
INSERT INTO `complaint_record` VALUES (7, '8423597423', 'PW7QQfQXILxF9Wy', 0, '违规博客', '2023-05-15 18:28:38', 0);
INSERT INTO `complaint_record` VALUES (8, '9008483061', '20', 2, '违规图片', '2023-05-20 09:36:09', 0);
INSERT INTO `complaint_record` VALUES (9, '9008483061', '21', 2, '111111', '2023-05-20 09:39:22', 0);
INSERT INTO `complaint_record` VALUES (10, '9008483061', '20', 2, '11111111111', '2023-05-20 09:40:22', 0);
INSERT INTO `complaint_record` VALUES (11, '9008483061', '21', 2, '111111', '2023-05-20 09:40:30', 0);
INSERT INTO `complaint_record` VALUES (12, '8423597423', 'PW7QQfQXILxF9Wy', 0, 'dddddsfdsfds', '2023-05-30 15:49:50', 0);

-- ----------------------------
-- Table structure for email_code
-- ----------------------------
DROP TABLE IF EXISTS `email_code`;
CREATE TABLE `email_code`  (
  `email` varchar(150) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL COMMENT '邮箱',
  `code` varchar(5) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL COMMENT '编号',
  `create_time` datetime NULL DEFAULT NULL COMMENT '创建时间',
  `status` tinyint(1) NULL DEFAULT NULL COMMENT '0:未使用  1:已使用',
  PRIMARY KEY (`email`, `code`) USING BTREE
) ENGINE = InnoDB CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci COMMENT = '邮箱验证码' ROW_FORMAT = DYNAMIC;

-- ----------------------------
-- Records of email_code
-- ----------------------------
INSERT INTO `email_code` VALUES ('2532172196@qq.com', '00211', '2023-05-15 19:00:26', 1);
INSERT INTO `email_code` VALUES ('2532172196@qq.com', '05228', '2023-05-15 18:59:18', 1);
INSERT INTO `email_code` VALUES ('2532172196@qq.com', '14805', '2023-05-15 18:29:14', 1);
INSERT INTO `email_code` VALUES ('2532172196@qq.com', '20173', '2023-05-15 10:19:50', 1);
INSERT INTO `email_code` VALUES ('2532172196@qq.com', '24466', '2023-05-15 17:53:47', 1);
INSERT INTO `email_code` VALUES ('2532172196@qq.com', '30598', '2023-05-15 10:18:26', 1);
INSERT INTO `email_code` VALUES ('2532172196@qq.com', '61417', '2023-05-15 17:52:20', 1);
INSERT INTO `email_code` VALUES ('2532172196@qq.com', '77045', '2023-05-15 18:29:44', 1);
INSERT INTO `email_code` VALUES ('2532172196@qq.com', '87321', '2023-05-15 18:30:23', 1);
INSERT INTO `email_code` VALUES ('2532172196@qq.com', '91351', '2023-05-15 17:52:53', 1);
INSERT INTO `email_code` VALUES ('2532172196@qq.com', '94996', '2023-05-15 18:59:48', 1);

-- ----------------------------
-- Table structure for follow_record
-- ----------------------------
DROP TABLE IF EXISTS `follow_record`;
CREATE TABLE `follow_record`  (
  `id` int(11) NOT NULL AUTO_INCREMENT COMMENT '用户自增id',
  `user_id` varchar(15) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT '0' COMMENT '用户id(粉丝id)',
  `followed_user_id` varchar(15) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT '0' COMMENT '关注的用户id',
  `create_time` datetime NULL DEFAULT NULL COMMENT '创建时间（用户关注时间）',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 34 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci ROW_FORMAT = DYNAMIC;

-- ----------------------------
-- Records of follow_record
-- ----------------------------
INSERT INTO `follow_record` VALUES (25, '9008483061', '3058131375', '2023-05-14 21:53:18');
INSERT INTO `follow_record` VALUES (28, '8423597423', '3058131375', '2023-05-15 17:51:48');
INSERT INTO `follow_record` VALUES (33, '9008483061', '8423597423', '2023-05-30 15:51:24');

-- ----------------------------
-- Table structure for forum_article
-- ----------------------------
DROP TABLE IF EXISTS `forum_article`;
CREATE TABLE `forum_article`  (
  `article_id` varchar(15) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL COMMENT '文章ID',
  `board_id` int(11) NULL DEFAULT NULL COMMENT '板块ID',
  `board_name` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '板块名称',
  `p_board_id` int(11) NULL DEFAULT NULL COMMENT '父级板块ID',
  `p_board_name` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '父板块名称',
  `user_id` varchar(15) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL COMMENT '用户ID',
  `nick_name` varchar(20) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL COMMENT '昵称',
  `user_ip_address` varchar(100) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '最后登录ip地址',
  `title` varchar(150) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL COMMENT '标题',
  `cover` varchar(100) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '封面',
  `content` text CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL COMMENT '内容',
  `markdown_content` text CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL COMMENT 'markdown内容',
  `editor_type` tinyint(4) NOT NULL COMMENT '0:富文本编辑器 1:markdown编辑器',
  `summary` varchar(200) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '摘要',
  `post_time` datetime NOT NULL COMMENT '发布时间',
  `last_update_time` timestamp NULL DEFAULT NULL ON UPDATE CURRENT_TIMESTAMP COMMENT '最后更新时间',
  `read_count` int(11) NULL DEFAULT 0 COMMENT '阅读数量',
  `good_count` int(11) NULL DEFAULT 0 COMMENT '点赞数',
  `collect_count` int(11) NULL DEFAULT 0 COMMENT '收藏数',
  `comment_count` int(11) NULL DEFAULT 0 COMMENT '评论数',
  `top_type` tinyint(4) NULL DEFAULT 0 COMMENT '0未置顶  1:已置顶',
  `attachment_type` tinyint(4) NULL DEFAULT NULL COMMENT '0:没有附件  1:有附件',
  `status` tinyint(4) NULL DEFAULT NULL COMMENT '-1已删除 0:待审核  1:已审核  2:未发布 ',
  `status2` tinyint(4) NULL DEFAULT NULL COMMENT '3:已发布 4:审核未通过',
  `note` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '备注字段',
  PRIMARY KEY (`article_id`) USING BTREE,
  INDEX `idx_board_id`(`board_id`) USING BTREE,
  INDEX `idx_pboard_id`(`p_board_id`) USING BTREE,
  INDEX `idx_post_time`(`post_time`) USING BTREE,
  INDEX `idx_top_type`(`top_type`) USING BTREE,
  INDEX `idx_title`(`title`) USING BTREE,
  INDEX `idx_user_id`(`user_id`) USING BTREE
) ENGINE = InnoDB CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci COMMENT = '文章信息' ROW_FORMAT = DYNAMIC;

-- ----------------------------
-- Records of forum_article
-- ----------------------------
INSERT INTO `forum_article` VALUES ('2n9trcvjlZmFYkv', 10025, 'Go', 10023, '后端', '8423597423', 'niuniuiu', '未知', 'sssss', '202305/dvJkU95hudqlDIA.jpg', '<p data-v-md-line=\"1\">ccccccc</p>\r\n', 'ccccccc', 0, 'cccccccccccccccccccccsssssssssssssssssssssssssss', '2023-05-30 11:04:09', '2023-05-30 11:04:09', 0, 0, 0, 0, 0, NULL, -1, 2, NULL);
INSERT INTO `forum_article` VALUES ('5UfjUnl6QYcNGZE', 10030, 'mysql', 10029, '其他', '3058131375', 'niubi', '未知', 'mysql基础篇2', '202305/qoRvZjlBR40PVUi.jpg', '<h4 data-v-md-heading=\"_3-mysql登录\" data-v-md-line=\"1\"><strong>3. MySQL登录</strong></h4>\r\n<h5 data-v-md-heading=\"_3-1-首次登录\" data-v-md-line=\"3\"><strong>3.1</strong> <strong>首次登录</strong></h5>\r\n<p data-v-md-line=\"5\">通过<code>mysql -hlocalhost -P3306 -uroot -p</code>进行登录，在Enter password：录入初始化密码</p>\r\n<h5 data-v-md-heading=\"_3-2-修改密码\" data-v-md-line=\"7\"><strong>3.2</strong> <strong>修改密码</strong></h5>\r\n<div data-v-md-line=\"9\"><div class=\"v-md-pre-wrapper v-md-pre-wrapper-mysql extra-class\"><pre class=\"v-md-hljs-mysql\"><code>ALTER USER \'root\'@\'localhost\' IDENTIFIED BY \'new_password\';\r\n</code></pre>\r\n</div></div><h5 data-v-md-heading=\"_3-3-设置远程登录\" data-v-md-line=\"13\"><strong>3.3</strong> <strong>设置远程登录</strong></h5>\r\n<p data-v-md-line=\"15\"><strong>1.</strong> <strong>确认网络</strong></p>\r\n<p data-v-md-line=\"17\">1.在远程机器上使用ping ip地址<code>保证网络畅通</code></p>\r\n<p data-v-md-line=\"19\">2.在远程机器上使用telnet命令<code>保证端口号开放</code>访问</p>\r\n<p data-v-md-line=\"21\"><strong>2.</strong> <strong>关闭防火墙或开放端口</strong></p>\r\n<p data-v-md-line=\"23\"><strong>方式一：关闭防火墙</strong></p>\r\n<ul data-v-md-line=\"25\">\r\n<li>CentOS6 ：</li>\r\n</ul>\r\n<div data-v-md-line=\"27\"><div class=\"v-md-pre-wrapper v-md-pre-wrapper-shell extra-class\"><pre class=\"v-md-hljs-shell\"><code>service iptables stop\r\n</code></pre>\r\n</div></div><ul data-v-md-line=\"31\">\r\n<li>CentOS7：</li>\r\n</ul>\r\n<div data-v-md-line=\"33\"><div class=\"v-md-pre-wrapper v-md-pre-wrapper-shell extra-class\"><pre class=\"v-md-hljs-shell\"><code><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">开启防火墙</span>\r\nsystemctl start firewalld.service\r\n<span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">查看防火墙状态</span>\r\nsystemctl status firewalld.service\r\n<span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">关闭防火墙</span>\r\nsystemctl stop firewalld.service\r\n<span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">设置开机启用防火墙</span> \r\nsystemctl enable firewalld.service \r\n<span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">设置开机禁用防火墙</span> \r\nsystemctl disable firewalld.service\r\n</code></pre>\r\n</div></div><p data-v-md-line=\"46\"><strong>方式二：开放端口</strong></p>\r\n<ul data-v-md-line=\"48\">\r\n<li>查看开放的端口号</li>\r\n</ul>\r\n<div data-v-md-line=\"50\"><div class=\"v-md-pre-wrapper v-md-pre-wrapper-shell extra-class\"><pre class=\"v-md-hljs-shell\"><code>firewall-cmd --list-all\r\n</code></pre>\r\n</div></div><ul data-v-md-line=\"54\">\r\n<li>设置开放的端口号</li>\r\n</ul>\r\n<div data-v-md-line=\"56\"><div class=\"v-md-pre-wrapper v-md-pre-wrapper-shell extra-class\"><pre class=\"v-md-hljs-shell\"><code>firewall-cmd --add-service=http --permanent\r\nfirewall-cmd --add-port=3306/tcp --permanent\r\n</code></pre>\r\n</div></div><ul data-v-md-line=\"61\">\r\n<li>重启防火墙</li>\r\n</ul>\r\n<div data-v-md-line=\"63\"><div class=\"v-md-pre-wrapper v-md-pre-wrapper-shell extra-class\"><pre class=\"v-md-hljs-shell\"><code>firewall-cmd --reload\r\n</code></pre>\r\n</div></div><h4 data-v-md-heading=\"_4-linux下修改配置\" data-v-md-line=\"67\"><strong>4. Linux下修改配置</strong></h4>\r\n<ul data-v-md-line=\"69\">\r\n<li>修改允许远程登陆</li>\r\n</ul>\r\n<div data-v-md-line=\"71\"><div class=\"v-md-pre-wrapper v-md-pre-wrapper-mysql extra-class\"><pre class=\"v-md-hljs-mysql\"><code>use mysql;\r\nselect Host,User from user;\r\nupdate user set host = \'%\' where user =\'root\';\r\nflush privileges;\r\n</code></pre>\r\n</div></div><blockquote data-v-md-line=\"78\">\r\n<p data-v-md-line=\"78\"><code>%</code>是个 通配符 ，如果Host=192.168.1.%，那么就表示只要是IP地址前缀为“192.168.1.”的客户端都可以连接。如果<code>Host=%</code>，表示所有IP都有连接权限。</p>\r\n<p data-v-md-line=\"80\">注意：在生产环境下不能为了省事将host设置为%，这样做会存在安全问题，具体的设置可以根据生产环境的IP进行设置。</p>\r\n</blockquote>\r\n<p data-v-md-line=\"82\">配置新连接报错：错误号码 2058，分析是 mysql 密码加密方法变了。</p>\r\n<p data-v-md-line=\"84\">**解决方法一：**升级远程连接工具版本</p>\r\n<p data-v-md-line=\"86\"><strong>解决方法二：</strong></p>\r\n<div data-v-md-line=\"88\"><div class=\"v-md-pre-wrapper v-md-pre-wrapper-mysql extra-class\"><pre class=\"v-md-hljs-mysql\"><code>ALTER USER \'root\'@\'%\' IDENTIFIED WITH mysql_native_password BY \'abc123\';\r\n</code></pre>\r\n</div></div><h4 data-v-md-heading=\"_5-字符集的相关操作\" data-v-md-line=\"92\"><strong>5.</strong> <strong>字符集的相关操作</strong></h4>\r\n<h5 data-v-md-heading=\"_5-1-各级别的字符集\" data-v-md-line=\"94\"><strong>5.1</strong> <strong>各级别的字符集</strong></h5>\r\n<div data-v-md-line=\"96\"><div class=\"v-md-pre-wrapper v-md-pre-wrapper-mysql extra-class\"><pre class=\"v-md-hljs-mysql\"><code>show variables like \'character%\';\r\n</code></pre>\r\n</div></div><ul data-v-md-line=\"100\">\r\n<li>character_set_server：服务器级别的字符集</li>\r\n<li>character_set_database：当前数据库的字符集</li>\r\n<li>character_set_client：服务器解码请求时使用的字符集</li>\r\n<li>character_set_connection：服务器处理请求时会把请求字符串从character_set_client转为character_set_connection</li>\r\n<li>character_set_results：服务器向客户端返回数据时使用的字符集</li>\r\n</ul>\r\n<p data-v-md-line=\"106\"><strong>小结</strong></p>\r\n<ul data-v-md-line=\"108\">\r\n<li>如果<code>创建或修改列</code>时没有显式的指定字符集和比较规则，则该列<code>默认用表的</code>字符集和比较规则</li>\r\n<li>如果<code>创建表时</code>没有显式的指定字符集和比较规则，则该表<code>默认用数据库的</code>字符集和比较规则</li>\r\n<li>如果<code>创建数据库时</code>没有显式的指定字符集和比较规则，则该数据库<code>默认用服务器的</code>字符集和比较规则</li>\r\n</ul>\r\n<h5 data-v-md-heading=\"_5-2-请求到响应过程中字符集的变化\" data-v-md-line=\"112\"><strong>5.2</strong> <strong>请求到响应过程中字符集的变化</strong></h5>\r\n<div data-v-md-line=\"114\"><div class=\"v-md-pre-wrapper v-md-pre-wrapper-mermaid extra-class\"><pre class=\"v-md-hljs-mermaid\"><code>graph TB\r\nA(客户端) --&gt; |&quot;使用操作系统的字符集编码请求字符串&quot;| B(从character_set_client转换为character_set_connection)\r\nB --&gt; C(从character_set_connection转换为具体的列使用的字符集)\r\nC --&gt; D(将查询结果从具体的列上使用的字符集转换为character_set_results)\r\nD --&gt; |&quot;使用操作系统的字符集解码响应的字符串&quot;| A\r\n\r\n</code></pre>\r\n</div></div><h3 data-v-md-heading=\"\" data-v-md-line=\"123\"></h3>\r\n', '#### **3. MySQL登录**\r\n\r\n##### **3.1** **首次登录**\r\n\r\n通过`mysql -hlocalhost -P3306 -uroot -p`进行登录，在Enter password：录入初始化密码\r\n\r\n##### **3.2** **修改密码**\r\n\r\n```mysql\r\nALTER USER \'root\'@\'localhost\' IDENTIFIED BY \'new_password\';\r\n```\r\n\r\n##### **3.3** **设置远程登录**\r\n\r\n**1.** **确认网络** \r\n\r\n1.在远程机器上使用ping ip地址`保证网络畅通`\r\n\r\n2.在远程机器上使用telnet命令`保证端口号开放`访问\r\n\r\n**2.** **关闭防火墙或开放端口**\r\n\r\n**方式一：关闭防火墙**\r\n\r\n- CentOS6 ：\r\n\r\n```shell\r\nservice iptables stop\r\n```\r\n\r\n- CentOS7：\r\n\r\n```shell\r\n#开启防火墙\r\nsystemctl start firewalld.service\r\n#查看防火墙状态\r\nsystemctl status firewalld.service\r\n#关闭防火墙\r\nsystemctl stop firewalld.service\r\n#设置开机启用防火墙 \r\nsystemctl enable firewalld.service \r\n#设置开机禁用防火墙 \r\nsystemctl disable firewalld.service\r\n```\r\n\r\n**方式二：开放端口**\r\n\r\n- 查看开放的端口号\r\n\r\n```shell\r\nfirewall-cmd --list-all\r\n```\r\n\r\n- 设置开放的端口号\r\n\r\n```shell\r\nfirewall-cmd --add-service=http --permanent\r\nfirewall-cmd --add-port=3306/tcp --permanent\r\n```\r\n\r\n- 重启防火墙\r\n\r\n```shell\r\nfirewall-cmd --reload\r\n```\r\n\r\n#### **4. Linux下修改配置**\r\n\r\n- 修改允许远程登陆\r\n\r\n```mysql\r\nuse mysql;\r\nselect Host,User from user;\r\nupdate user set host = \'%\' where user =\'root\';\r\nflush privileges;\r\n```\r\n\r\n> `%`是个 通配符 ，如果Host=192.168.1.%，那么就表示只要是IP地址前缀为“192.168.1.”的客户端都可以连接。如果`Host=%`，表示所有IP都有连接权限。\r\n>\r\n> 注意：在生产环境下不能为了省事将host设置为%，这样做会存在安全问题，具体的设置可以根据生产环境的IP进行设置。\r\n\r\n配置新连接报错：错误号码 2058，分析是 mysql 密码加密方法变了。\r\n\r\n**解决方法一：**升级远程连接工具版本\r\n\r\n**解决方法二：**\r\n\r\n```mysql\r\nALTER USER \'root\'@\'%\' IDENTIFIED WITH mysql_native_password BY \'abc123\';\r\n```\r\n\r\n#### **5.** **字符集的相关操作**\r\n\r\n##### **5.1** **各级别的字符集**\r\n\r\n```mysql\r\nshow variables like \'character%\';\r\n```\r\n\r\n- character_set_server：服务器级别的字符集\r\n- character_set_database：当前数据库的字符集\r\n- character_set_client：服务器解码请求时使用的字符集\r\n- character_set_connection：服务器处理请求时会把请求字符串从character_set_client转为character_set_connection \r\n- character_set_results：服务器向客户端返回数据时使用的字符集\r\n\r\n**小结**\r\n\r\n- 如果`创建或修改列`时没有显式的指定字符集和比较规则，则该列`默认用表的`字符集和比较规则\r\n- 如果`创建表时`没有显式的指定字符集和比较规则，则该表`默认用数据库的`字符集和比较规则\r\n- 如果`创建数据库时`没有显式的指定字符集和比较规则，则该数据库`默认用服务器的`字符集和比较规则\r\n\r\n##### **5.2** **请求到响应过程中字符集的变化**\r\n\r\n```mermaid\r\ngraph TB\r\nA(客户端) --> |\"使用操作系统的字符集编码请求字符串\"| B(从character_set_client转换为character_set_connection)\r\nB --> C(从character_set_connection转换为具体的列使用的字符集)\r\nC --> D(将查询结果从具体的列上使用的字符集转换为character_set_results)\r\nD --> |\"使用操作系统的字符集解码响应的字符串\"| A\r\n\r\n```\r\n\r\n### ', 0, '如果创建或修改列时没有显式的指定字符集和比较规则，则该列默认用表的字符集和比较规则\r\n如果创建表时没有显式的指定字符集和比较规则，则该表默认用数据库的字符集和比较规则\r\n如果创建数据库时没有显式的指定字符集和比较规则，则该数据库默认用服务', '2023-05-14 18:37:42', '2023-05-14 11:12:35', 0, 0, 0, 0, 0, 0, -1, 2, NULL);
INSERT INTO `forum_article` VALUES ('7G4b1paZ2A4hsI5', 10030, 'mysql', 10029, '其他', '3058131375', 'niubi', '未知', 'mysql基础篇2', '202305/YqorlmED3xo783m.jpg', '<h4 data-v-md-heading=\"_3-mysql登录\" data-v-md-line=\"1\"><strong>3. MySQL登录</strong></h4>\r\n<h5 data-v-md-heading=\"_3-1-首次登录\" data-v-md-line=\"3\"><strong>3.1</strong> <strong>首次登录</strong></h5>\r\n<p data-v-md-line=\"5\">通过<code>mysql -hlocalhost -P3306 -uroot -p</code>进行登录，在Enter password：录入初始化密码</p>\r\n<h5 data-v-md-heading=\"_3-2-修改密码\" data-v-md-line=\"7\"><strong>3.2</strong> <strong>修改密码</strong></h5>\r\n<div data-v-md-line=\"9\"><div class=\"v-md-pre-wrapper v-md-pre-wrapper-mysql extra-class\"><pre class=\"v-md-hljs-mysql\"><code>ALTER USER \'root\'@\'localhost\' IDENTIFIED BY \'new_password\';\r\n</code></pre>\r\n</div></div><h5 data-v-md-heading=\"_3-3-设置远程登录\" data-v-md-line=\"13\"><strong>3.3</strong> <strong>设置远程登录</strong></h5>\r\n<p data-v-md-line=\"15\"><strong>1.</strong> <strong>确认网络</strong></p>\r\n<p data-v-md-line=\"17\">1.在远程机器上使用ping ip地址<code>保证网络畅通</code></p>\r\n<p data-v-md-line=\"19\">2.在远程机器上使用telnet命令<code>保证端口号开放</code>访问</p>\r\n<p data-v-md-line=\"21\"><strong>2.</strong> <strong>关闭防火墙或开放端口</strong></p>\r\n<p data-v-md-line=\"23\"><strong>方式一：关闭防火墙</strong></p>\r\n<ul data-v-md-line=\"25\">\r\n<li>CentOS6 ：</li>\r\n</ul>\r\n<div data-v-md-line=\"27\"><div class=\"v-md-pre-wrapper v-md-pre-wrapper-shell extra-class\"><pre class=\"v-md-hljs-shell\"><code>service iptables stop\r\n</code></pre>\r\n</div></div><ul data-v-md-line=\"31\">\r\n<li>CentOS7：</li>\r\n</ul>\r\n<div data-v-md-line=\"33\"><div class=\"v-md-pre-wrapper v-md-pre-wrapper-shell extra-class\"><pre class=\"v-md-hljs-shell\"><code><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">开启防火墙</span>\r\nsystemctl start firewalld.service\r\n<span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">查看防火墙状态</span>\r\nsystemctl status firewalld.service\r\n<span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">关闭防火墙</span>\r\nsystemctl stop firewalld.service\r\n<span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">设置开机启用防火墙</span> \r\nsystemctl enable firewalld.service \r\n<span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">设置开机禁用防火墙</span> \r\nsystemctl disable firewalld.service\r\n</code></pre>\r\n</div></div><p data-v-md-line=\"46\"><strong>方式二：开放端口</strong></p>\r\n<ul data-v-md-line=\"48\">\r\n<li>查看开放的端口号</li>\r\n</ul>\r\n<div data-v-md-line=\"50\"><div class=\"v-md-pre-wrapper v-md-pre-wrapper-shell extra-class\"><pre class=\"v-md-hljs-shell\"><code>firewall-cmd --list-all\r\n</code></pre>\r\n</div></div><ul data-v-md-line=\"54\">\r\n<li>设置开放的端口号</li>\r\n</ul>\r\n<div data-v-md-line=\"56\"><div class=\"v-md-pre-wrapper v-md-pre-wrapper-shell extra-class\"><pre class=\"v-md-hljs-shell\"><code>firewall-cmd --add-service=http --permanent\r\nfirewall-cmd --add-port=3306/tcp --permanent\r\n</code></pre>\r\n</div></div><ul data-v-md-line=\"61\">\r\n<li>重启防火墙</li>\r\n</ul>\r\n<div data-v-md-line=\"63\"><div class=\"v-md-pre-wrapper v-md-pre-wrapper-shell extra-class\"><pre class=\"v-md-hljs-shell\"><code>firewall-cmd --reload\r\n</code></pre>\r\n</div></div><h4 data-v-md-heading=\"_4-linux下修改配置\" data-v-md-line=\"67\"><strong>4. Linux下修改配置</strong></h4>\r\n<ul data-v-md-line=\"69\">\r\n<li>修改允许远程登陆</li>\r\n</ul>\r\n<div data-v-md-line=\"71\"><div class=\"v-md-pre-wrapper v-md-pre-wrapper-mysql extra-class\"><pre class=\"v-md-hljs-mysql\"><code>use mysql;\r\nselect Host,User from user;\r\nupdate user set host = \'%\' where user =\'root\';\r\nflush privileges;\r\n</code></pre>\r\n</div></div><blockquote data-v-md-line=\"78\">\r\n<p data-v-md-line=\"78\"><code>%</code>是个 通配符 ，如果Host=192.168.1.%，那么就表示只要是IP地址前缀为“192.168.1.”的客户端都可以连接。如果<code>Host=%</code>，表示所有IP都有连接权限。</p>\r\n<p data-v-md-line=\"80\">注意：在生产环境下不能为了省事将host设置为%，这样做会存在安全问题，具体的设置可以根据生产环境的IP进行设置。</p>\r\n</blockquote>\r\n<p data-v-md-line=\"82\">配置新连接报错：错误号码 2058，分析是 mysql 密码加密方法变了。</p>\r\n<p data-v-md-line=\"84\">**解决方法一：**升级远程连接工具版本</p>\r\n<p data-v-md-line=\"86\"><strong>解决方法二：</strong></p>\r\n<div data-v-md-line=\"88\"><div class=\"v-md-pre-wrapper v-md-pre-wrapper-mysql extra-class\"><pre class=\"v-md-hljs-mysql\"><code>ALTER USER \'root\'@\'%\' IDENTIFIED WITH mysql_native_password BY \'abc123\';\r\n</code></pre>\r\n</div></div><h4 data-v-md-heading=\"_5-字符集的相关操作\" data-v-md-line=\"92\"><strong>5.</strong> <strong>字符集的相关操作</strong></h4>\r\n<h5 data-v-md-heading=\"_5-1-各级别的字符集\" data-v-md-line=\"94\"><strong>5.1</strong> <strong>各级别的字符集</strong></h5>\r\n<div data-v-md-line=\"96\"><div class=\"v-md-pre-wrapper v-md-pre-wrapper-mysql extra-class\"><pre class=\"v-md-hljs-mysql\"><code>show variables like \'character%\';\r\n</code></pre>\r\n</div></div><ul data-v-md-line=\"100\">\r\n<li>character_set_server：服务器级别的字符集</li>\r\n<li>character_set_database：当前数据库的字符集</li>\r\n<li>character_set_client：服务器解码请求时使用的字符集</li>\r\n<li>character_set_connection：服务器处理请求时会把请求字符串从character_set_client转为character_set_connection</li>\r\n<li>character_set_results：服务器向客户端返回数据时使用的字符集</li>\r\n</ul>\r\n<p data-v-md-line=\"106\"><strong>小结</strong></p>\r\n<ul data-v-md-line=\"108\">\r\n<li>如果<code>创建或修改列</code>时没有显式的指定字符集和比较规则，则该列<code>默认用表的</code>字符集和比较规则</li>\r\n<li>如果<code>创建表时</code>没有显式的指定字符集和比较规则，则该表<code>默认用数据库的</code>字符集和比较规则</li>\r\n<li>如果<code>创建数据库时</code>没有显式的指定字符集和比较规则，则该数据库<code>默认用服务器的</code>字符集和比较规则</li>\r\n</ul>\r\n<h5 data-v-md-heading=\"_5-2-请求到响应过程中字符集的变化\" data-v-md-line=\"112\"><strong>5.2</strong> <strong>请求到响应过程中字符集的变化</strong></h5>\r\n<div data-v-md-line=\"114\"><div class=\"v-md-pre-wrapper v-md-pre-wrapper-mermaid extra-class\"><pre class=\"v-md-hljs-mermaid\"><code>graph TB\r\nA(客户端) --&gt; |&quot;使用操作系统的字符集编码请求字符串&quot;| B(从character_set_client转换为character_set_connection)\r\nB --&gt; C(从character_set_connection转换为具体的列使用的字符集)\r\nC --&gt; D(将查询结果从具体的列上使用的字符集转换为character_set_results)\r\nD --&gt; |&quot;使用操作系统的字符集解码响应的字符串&quot;| A\r\n\r\n</code></pre>\r\n</div></div><h3 data-v-md-heading=\"\" data-v-md-line=\"123\"></h3>\r\n', '#### **3. MySQL登录**\r\n\r\n##### **3.1** **首次登录**\r\n\r\n通过`mysql -hlocalhost -P3306 -uroot -p`进行登录，在Enter password：录入初始化密码\r\n\r\n##### **3.2** **修改密码**\r\n\r\n```mysql\r\nALTER USER \'root\'@\'localhost\' IDENTIFIED BY \'new_password\';\r\n```\r\n\r\n##### **3.3** **设置远程登录**\r\n\r\n**1.** **确认网络** \r\n\r\n1.在远程机器上使用ping ip地址`保证网络畅通`\r\n\r\n2.在远程机器上使用telnet命令`保证端口号开放`访问\r\n\r\n**2.** **关闭防火墙或开放端口**\r\n\r\n**方式一：关闭防火墙**\r\n\r\n- CentOS6 ：\r\n\r\n```shell\r\nservice iptables stop\r\n```\r\n\r\n- CentOS7：\r\n\r\n```shell\r\n#开启防火墙\r\nsystemctl start firewalld.service\r\n#查看防火墙状态\r\nsystemctl status firewalld.service\r\n#关闭防火墙\r\nsystemctl stop firewalld.service\r\n#设置开机启用防火墙 \r\nsystemctl enable firewalld.service \r\n#设置开机禁用防火墙 \r\nsystemctl disable firewalld.service\r\n```\r\n\r\n**方式二：开放端口**\r\n\r\n- 查看开放的端口号\r\n\r\n```shell\r\nfirewall-cmd --list-all\r\n```\r\n\r\n- 设置开放的端口号\r\n\r\n```shell\r\nfirewall-cmd --add-service=http --permanent\r\nfirewall-cmd --add-port=3306/tcp --permanent\r\n```\r\n\r\n- 重启防火墙\r\n\r\n```shell\r\nfirewall-cmd --reload\r\n```\r\n\r\n#### **4. Linux下修改配置**\r\n\r\n- 修改允许远程登陆\r\n\r\n```mysql\r\nuse mysql;\r\nselect Host,User from user;\r\nupdate user set host = \'%\' where user =\'root\';\r\nflush privileges;\r\n```\r\n\r\n> `%`是个 通配符 ，如果Host=192.168.1.%，那么就表示只要是IP地址前缀为“192.168.1.”的客户端都可以连接。如果`Host=%`，表示所有IP都有连接权限。\r\n>\r\n> 注意：在生产环境下不能为了省事将host设置为%，这样做会存在安全问题，具体的设置可以根据生产环境的IP进行设置。\r\n\r\n配置新连接报错：错误号码 2058，分析是 mysql 密码加密方法变了。\r\n\r\n**解决方法一：**升级远程连接工具版本\r\n\r\n**解决方法二：**\r\n\r\n```mysql\r\nALTER USER \'root\'@\'%\' IDENTIFIED WITH mysql_native_password BY \'abc123\';\r\n```\r\n\r\n#### **5.** **字符集的相关操作**\r\n\r\n##### **5.1** **各级别的字符集**\r\n\r\n```mysql\r\nshow variables like \'character%\';\r\n```\r\n\r\n- character_set_server：服务器级别的字符集\r\n- character_set_database：当前数据库的字符集\r\n- character_set_client：服务器解码请求时使用的字符集\r\n- character_set_connection：服务器处理请求时会把请求字符串从character_set_client转为character_set_connection \r\n- character_set_results：服务器向客户端返回数据时使用的字符集\r\n\r\n**小结**\r\n\r\n- 如果`创建或修改列`时没有显式的指定字符集和比较规则，则该列`默认用表的`字符集和比较规则\r\n- 如果`创建表时`没有显式的指定字符集和比较规则，则该表`默认用数据库的`字符集和比较规则\r\n- 如果`创建数据库时`没有显式的指定字符集和比较规则，则该数据库`默认用服务器的`字符集和比较规则\r\n\r\n##### **5.2** **请求到响应过程中字符集的变化**\r\n\r\n```mermaid\r\ngraph TB\r\nA(客户端) --> |\"使用操作系统的字符集编码请求字符串\"| B(从character_set_client转换为character_set_connection)\r\nB --> C(从character_set_connection转换为具体的列使用的字符集)\r\nC --> D(将查询结果从具体的列上使用的字符集转换为character_set_results)\r\nD --> |\"使用操作系统的字符集解码响应的字符串\"| A\r\n\r\n```\r\n\r\n### ', 0, '如果创建或修改列时没有显式的指定字符集和比较规则，则该列默认用表的字符集和比较规则\r\n如果创建表时没有显式的指定字符集和比较规则，则该表默认用数据库的字符集和比较规则\r\n如果创建数据库时没有显式的指定字符集和比较规则，则该数据库默认用服务', '2023-05-14 18:36:50', '2023-05-14 11:12:35', 0, 0, 0, 0, 0, 0, -1, 2, NULL);
INSERT INTO `forum_article` VALUES ('c10r5Y4ekfJawNC', 10031, 'linux', 10029, '其他', '3058131375', 'niubi', '未知', '测试删除', '202305/BLkGCXyHKncKsPc.jpg', '<p data-v-md-line=\"1\">测试删除功能</p>\r\n', '测试删除功能', 0, '惆怅长岑长错', '2023-05-14 20:24:43', '2023-05-14 12:34:08', 0, 0, 0, 0, 0, NULL, -1, 2, NULL);
INSERT INTO `forum_article` VALUES ('CKEOUGfJdCSafSl', 10030, 'mysql', 10029, '其他', '3058131375', 'niubi', '未知', 'MySQL基础篇', '202305/L5fxkzHNJ70Ng6K.jpg', '<h4 data-v-md-heading=\"_3-mysql登录\" data-v-md-line=\"1\"><strong>3. MySQL登录</strong></h4>\r\n<h5 data-v-md-heading=\"_3-1-首次登录\" data-v-md-line=\"3\"><strong>3.1</strong> <strong>首次登录</strong></h5>\r\n<p data-v-md-line=\"5\">通过<code>mysql -hlocalhost -P3306 -uroot -p</code>进行登录，在Enter password：录入初始化密码</p>\r\n<h5 data-v-md-heading=\"_3-2-修改密码\" data-v-md-line=\"7\"><strong>3.2</strong> <strong>修改密码</strong></h5>\r\n<div data-v-md-line=\"9\"><div class=\"v-md-pre-wrapper v-md-pre-wrapper-mysql extra-class\"><pre class=\"v-md-hljs-mysql\"><code>ALTER USER \'root\'@\'localhost\' IDENTIFIED BY \'new_password\';\r\n</code></pre>\r\n</div></div><h5 data-v-md-heading=\"_3-3-设置远程登录\" data-v-md-line=\"13\"><strong>3.3</strong> <strong>设置远程登录</strong></h5>\r\n<p data-v-md-line=\"15\"><strong>1.</strong> <strong>确认网络</strong></p>\r\n<p data-v-md-line=\"17\">1.在远程机器上使用ping ip地址<code>保证网络畅通</code></p>\r\n<p data-v-md-line=\"19\">2.在远程机器上使用telnet命令<code>保证端口号开放</code>访问</p>\r\n<p data-v-md-line=\"21\"><strong>2.</strong> <strong>关闭防火墙或开放端口</strong></p>\r\n<p data-v-md-line=\"23\"><strong>方式一：关闭防火墙</strong></p>\r\n<ul data-v-md-line=\"25\">\r\n<li>CentOS6 ：</li>\r\n</ul>\r\n<div data-v-md-line=\"27\"><div class=\"v-md-pre-wrapper v-md-pre-wrapper-shell extra-class\"><pre class=\"v-md-hljs-shell\"><code>service iptables stop\r\n</code></pre>\r\n</div></div><ul data-v-md-line=\"31\">\r\n<li>CentOS7：</li>\r\n</ul>\r\n<div data-v-md-line=\"33\"><div class=\"v-md-pre-wrapper v-md-pre-wrapper-shell extra-class\"><pre class=\"v-md-hljs-shell\"><code><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">开启防火墙</span>\r\nsystemctl start firewalld.service\r\n<span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">查看防火墙状态</span>\r\nsystemctl status firewalld.service\r\n<span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">关闭防火墙</span>\r\nsystemctl stop firewalld.service\r\n<span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">设置开机启用防火墙</span> \r\nsystemctl enable firewalld.service \r\n<span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">设置开机禁用防火墙</span> \r\nsystemctl disable firewalld.service\r\n</code></pre>\r\n</div></div><p data-v-md-line=\"46\"><strong>方式二：开放端口</strong></p>\r\n<ul data-v-md-line=\"48\">\r\n<li>查看开放的端口号</li>\r\n</ul>\r\n<div data-v-md-line=\"50\"><div class=\"v-md-pre-wrapper v-md-pre-wrapper-shell extra-class\"><pre class=\"v-md-hljs-shell\"><code>firewall-cmd --list-all\r\n</code></pre>\r\n</div></div><ul data-v-md-line=\"54\">\r\n<li>设置开放的端口号</li>\r\n</ul>\r\n<div data-v-md-line=\"56\"><div class=\"v-md-pre-wrapper v-md-pre-wrapper-shell extra-class\"><pre class=\"v-md-hljs-shell\"><code>firewall-cmd --add-service=http --permanent\r\nfirewall-cmd --add-port=3306/tcp --permanent\r\n</code></pre>\r\n</div></div><ul data-v-md-line=\"61\">\r\n<li>重启防火墙</li>\r\n</ul>\r\n<div data-v-md-line=\"63\"><div class=\"v-md-pre-wrapper v-md-pre-wrapper-shell extra-class\"><pre class=\"v-md-hljs-shell\"><code>firewall-cmd --reload\r\n</code></pre>\r\n</div></div><h4 data-v-md-heading=\"_4-linux下修改配置\" data-v-md-line=\"67\"><strong>4. Linux下修改配置</strong></h4>\r\n<ul data-v-md-line=\"69\">\r\n<li>修改允许远程登陆</li>\r\n</ul>\r\n<div data-v-md-line=\"71\"><div class=\"v-md-pre-wrapper v-md-pre-wrapper-mysql extra-class\"><pre class=\"v-md-hljs-mysql\"><code>use mysql;\r\nselect Host,User from user;\r\nupdate user set host = \'%\' where user =\'root\';\r\nflush privileges;\r\n</code></pre>\r\n</div></div><blockquote data-v-md-line=\"78\">\r\n<p data-v-md-line=\"78\"><code>%</code>是个 通配符 ，如果Host=192.168.1.%，那么就表示只要是IP地址前缀为“192.168.1.”的客户端都可以连接。如果<code>Host=%</code>，表示所有IP都有连接权限。</p>\r\n<p data-v-md-line=\"80\">注意：在生产环境下不能为了省事将host设置为%，这样做会存在安全问题，具体的设置可以根据生产环境的IP进行设置。</p>\r\n</blockquote>\r\n<p data-v-md-line=\"82\">配置新连接报错：错误号码 2058，分析是 mysql 密码加密方法变了。</p>\r\n<p data-v-md-line=\"84\">**解决方法一：**升级远程连接工具版本</p>\r\n<p data-v-md-line=\"86\"><strong>解决方法二：</strong></p>\r\n<div data-v-md-line=\"88\"><div class=\"v-md-pre-wrapper v-md-pre-wrapper-mysql extra-class\"><pre class=\"v-md-hljs-mysql\"><code>ALTER USER \'root\'@\'%\' IDENTIFIED WITH mysql_native_password BY \'abc123\';\r\n</code></pre>\r\n</div></div><h4 data-v-md-heading=\"_5-字符集的相关操作\" data-v-md-line=\"92\"><strong>5.</strong> <strong>字符集的相关操作</strong></h4>\r\n<h5 data-v-md-heading=\"_5-1-各级别的字符集\" data-v-md-line=\"94\"><strong>5.1</strong> <strong>各级别的字符集</strong></h5>\r\n<div data-v-md-line=\"96\"><div class=\"v-md-pre-wrapper v-md-pre-wrapper-mysql extra-class\"><pre class=\"v-md-hljs-mysql\"><code>show variables like \'character%\';\r\n</code></pre>\r\n</div></div><ul data-v-md-line=\"100\">\r\n<li>character_set_server：服务器级别的字符集</li>\r\n<li>character_set_database：当前数据库的字符集</li>\r\n<li>character_set_client：服务器解码请求时使用的字符集</li>\r\n<li>character_set_connection：服务器处理请求时会把请求字符串从character_set_client转为character_set_connection</li>\r\n<li>character_set_results：服务器向客户端返回数据时使用的字符集</li>\r\n</ul>\r\n<p data-v-md-line=\"106\"><strong>小结</strong></p>\r\n<ul data-v-md-line=\"108\">\r\n<li>如果<code>创建或修改列</code>时没有显式的指定字符集和比较规则，则该列<code>默认用表的</code>字符集和比较规则</li>\r\n<li>如果<code>创建表时</code>没有显式的指定字符集和比较规则，则该表<code>默认用数据库的</code>字符集和比较规则</li>\r\n<li>如果<code>创建数据库时</code>没有显式的指定字符集和比较规则，则该数据库<code>默认用服务器的</code>字符集和比较规则</li>\r\n</ul>\r\n<h5 data-v-md-heading=\"_5-2-请求到响应过程中字符集的变化\" data-v-md-line=\"112\"><strong>5.2</strong> <strong>请求到响应过程中字符集的变化</strong></h5>\r\n<div data-v-md-line=\"114\"><div class=\"v-md-pre-wrapper v-md-pre-wrapper-mermaid extra-class\"><pre class=\"v-md-hljs-mermaid\"><code>graph TB\r\nA(客户端) --&gt; |&quot;使用操作系统的字符集编码请求字符串&quot;| B(从character_set_client转换为character_set_connection)\r\nB --&gt; C(从character_set_connection转换为具体的列使用的字符集)\r\nC --&gt; D(将查询结果从具体的列上使用的字符集转换为character_set_results)\r\nD --&gt; |&quot;使用操作系统的字符集解码响应的字符串&quot;| A\r\n\r\n</code></pre>\r\n</div></div><h3 data-v-md-heading=\"\" data-v-md-line=\"123\"></h3>\r\n', '#### **3. MySQL登录**\r\n\r\n##### **3.1** **首次登录**\r\n\r\n通过`mysql -hlocalhost -P3306 -uroot -p`进行登录，在Enter password：录入初始化密码\r\n\r\n##### **3.2** **修改密码**\r\n\r\n```mysql\r\nALTER USER \'root\'@\'localhost\' IDENTIFIED BY \'new_password\';\r\n```\r\n\r\n##### **3.3** **设置远程登录**\r\n\r\n**1.** **确认网络** \r\n\r\n1.在远程机器上使用ping ip地址`保证网络畅通`\r\n\r\n2.在远程机器上使用telnet命令`保证端口号开放`访问\r\n\r\n**2.** **关闭防火墙或开放端口**\r\n\r\n**方式一：关闭防火墙**\r\n\r\n- CentOS6 ：\r\n\r\n```shell\r\nservice iptables stop\r\n```\r\n\r\n- CentOS7：\r\n\r\n```shell\r\n#开启防火墙\r\nsystemctl start firewalld.service\r\n#查看防火墙状态\r\nsystemctl status firewalld.service\r\n#关闭防火墙\r\nsystemctl stop firewalld.service\r\n#设置开机启用防火墙 \r\nsystemctl enable firewalld.service \r\n#设置开机禁用防火墙 \r\nsystemctl disable firewalld.service\r\n```\r\n\r\n**方式二：开放端口**\r\n\r\n- 查看开放的端口号\r\n\r\n```shell\r\nfirewall-cmd --list-all\r\n```\r\n\r\n- 设置开放的端口号\r\n\r\n```shell\r\nfirewall-cmd --add-service=http --permanent\r\nfirewall-cmd --add-port=3306/tcp --permanent\r\n```\r\n\r\n- 重启防火墙\r\n\r\n```shell\r\nfirewall-cmd --reload\r\n```\r\n\r\n#### **4. Linux下修改配置**\r\n\r\n- 修改允许远程登陆\r\n\r\n```mysql\r\nuse mysql;\r\nselect Host,User from user;\r\nupdate user set host = \'%\' where user =\'root\';\r\nflush privileges;\r\n```\r\n\r\n> `%`是个 通配符 ，如果Host=192.168.1.%，那么就表示只要是IP地址前缀为“192.168.1.”的客户端都可以连接。如果`Host=%`，表示所有IP都有连接权限。\r\n>\r\n> 注意：在生产环境下不能为了省事将host设置为%，这样做会存在安全问题，具体的设置可以根据生产环境的IP进行设置。\r\n\r\n配置新连接报错：错误号码 2058，分析是 mysql 密码加密方法变了。\r\n\r\n**解决方法一：**升级远程连接工具版本\r\n\r\n**解决方法二：**\r\n\r\n```mysql\r\nALTER USER \'root\'@\'%\' IDENTIFIED WITH mysql_native_password BY \'abc123\';\r\n```\r\n\r\n#### **5.** **字符集的相关操作**\r\n\r\n##### **5.1** **各级别的字符集**\r\n\r\n```mysql\r\nshow variables like \'character%\';\r\n```\r\n\r\n- character_set_server：服务器级别的字符集\r\n- character_set_database：当前数据库的字符集\r\n- character_set_client：服务器解码请求时使用的字符集\r\n- character_set_connection：服务器处理请求时会把请求字符串从character_set_client转为character_set_connection \r\n- character_set_results：服务器向客户端返回数据时使用的字符集\r\n\r\n**小结**\r\n\r\n- 如果`创建或修改列`时没有显式的指定字符集和比较规则，则该列`默认用表的`字符集和比较规则\r\n- 如果`创建表时`没有显式的指定字符集和比较规则，则该表`默认用数据库的`字符集和比较规则\r\n- 如果`创建数据库时`没有显式的指定字符集和比较规则，则该数据库`默认用服务器的`字符集和比较规则\r\n\r\n##### **5.2** **请求到响应过程中字符集的变化**\r\n\r\n```mermaid\r\ngraph TB\r\nA(客户端) --> |\"使用操作系统的字符集编码请求字符串\"| B(从character_set_client转换为character_set_connection)\r\nB --> C(从character_set_connection转换为具体的列使用的字符集)\r\nC --> D(将查询结果从具体的列上使用的字符集转换为character_set_results)\r\nD --> |\"使用操作系统的字符集解码响应的字符串\"| A\r\n\r\n```\r\n\r\n### ', 0, '如果创建或修改列时没有显式的指定字符集和比较规则，则该列默认用表的字符集和比较规则\r\n如果创建表时没有显式的指定字符集和比较规则，则该表默认用数据库的字符集和比较规则\r\n如果创建数据库时没有显式的指定字符集和比较规则，则该数据库默认用服务器的字符集和比较规则', '2023-05-14 18:38:23', '2023-05-14 11:12:35', 0, 0, 0, 0, 0, 0, -1, 2, NULL);
INSERT INTO `forum_article` VALUES ('dni4XjBaPoKe6tk', 10030, 'mysql', 10029, '其他', '3058131375', 'niubi', '未知', 'Mysql基础篇1', '202305/AAC8EAHZry0I5h2.jpg', '<h3 data-v-md-heading=\"第01章-linux下mysql的安装与使用\" data-v-md-line=\"1\">第01章 Linux下MySQL的安装与使用</h3>\r\n<h4 data-v-md-heading=\"_1-安装前说明\" data-v-md-line=\"3\"><strong>1.</strong> <strong>安装前说明</strong></h4>\r\n<h5 data-v-md-heading=\"_1-1-查看是否安装过mysql\" data-v-md-line=\"5\"><strong>1.1</strong> <strong>查看是否安装过MySQL</strong></h5>\r\n<ul data-v-md-line=\"7\">\r\n<li>如果你是用rpm安装, 检查一下RPM PACKAGE：</li>\r\n</ul>\r\n<div data-v-md-line=\"9\"><div class=\"v-md-pre-wrapper v-md-pre-wrapper-shell extra-class\"><pre class=\"v-md-hljs-shell\"><code>rpm -qa | grep -i mysql # -i 忽略大小写\r\n</code></pre>\r\n</div></div><ul data-v-md-line=\"13\">\r\n<li>检查mysql service：</li>\r\n</ul>\r\n<div data-v-md-line=\"15\"><div class=\"v-md-pre-wrapper v-md-pre-wrapper-shell extra-class\"><pre class=\"v-md-hljs-shell\"><code>systemctl status mysqld.service\r\n</code></pre>\r\n</div></div><h5 data-v-md-heading=\"_1-2-mysql的卸载\" data-v-md-line=\"19\"><strong>1.2 MySQL的卸载</strong></h5>\r\n<p data-v-md-line=\"21\"><strong>1.</strong> <strong>关闭</strong> <strong>mysql</strong> <strong>服务</strong></p>\r\n<div data-v-md-line=\"23\"><div class=\"v-md-pre-wrapper v-md-pre-wrapper-shell extra-class\"><pre class=\"v-md-hljs-shell\"><code>systemctl stop mysqld.service\r\n</code></pre>\r\n</div></div><p data-v-md-line=\"27\"><strong>2.</strong> <strong>查看当前</strong> <strong>mysql</strong> <strong>安装状况</strong></p>\r\n<div data-v-md-line=\"29\"><div class=\"v-md-pre-wrapper v-md-pre-wrapper-shell extra-class\"><pre class=\"v-md-hljs-shell\"><code>rpm -qa | grep -i mysql\r\n<span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">或</span>\r\nyum list installed | grep mysql\r\n</code></pre>\r\n</div></div><p data-v-md-line=\"35\"><strong>3.</strong> <strong>卸载上述命令查询出的已安装程序</strong></p>\r\n<div data-v-md-line=\"37\"><div class=\"v-md-pre-wrapper v-md-pre-wrapper-shell extra-class\"><pre class=\"v-md-hljs-shell\"><code>yum remove mysql-xxx mysql-xxx mysql-xxx mysqk-xxxx\r\n</code></pre>\r\n</div></div><p data-v-md-line=\"41\">务必卸载干净，反复执行<code>rpm -qa | grep -i mysql</code>确认是否有卸载残留</p>\r\n<p data-v-md-line=\"43\"><strong>4.</strong> <strong>删除</strong> <strong>mysql</strong> <strong>相关文件</strong></p>\r\n<ul data-v-md-line=\"45\">\r\n<li>查找相关文件</li>\r\n</ul>\r\n<div data-v-md-line=\"47\"><div class=\"v-md-pre-wrapper v-md-pre-wrapper-shell extra-class\"><pre class=\"v-md-hljs-shell\"><code>find / -name mysql\r\n</code></pre>\r\n</div></div><ul data-v-md-line=\"51\">\r\n<li>删除上述命令查找出的相关文件</li>\r\n</ul>\r\n<div data-v-md-line=\"53\"><div class=\"v-md-pre-wrapper v-md-pre-wrapper-shell extra-class\"><pre class=\"v-md-hljs-shell\"><code>rm -rf xxx\r\n</code></pre>\r\n</div></div><p data-v-md-line=\"57\"><strong>5.删除 my.cnf</strong></p>\r\n<div data-v-md-line=\"59\"><div class=\"v-md-pre-wrapper v-md-pre-wrapper-shell extra-class\"><pre class=\"v-md-hljs-shell\"><code>rm -rf /etc/my.cnf\r\n</code></pre>\r\n</div></div><h4 data-v-md-heading=\"_2-mysql的linux版安装\" data-v-md-line=\"63\"><strong>2. MySQL的Linux版安装</strong></h4>\r\n<h5 data-v-md-heading=\"_2-1-centos7下检查mysql依赖\" data-v-md-line=\"65\"><strong>2.1 CentOS7下检查MySQL依赖</strong></h5>\r\n<p data-v-md-line=\"67\"><strong>1.</strong> <strong>检查/tmp临时目录权限（必不可少）</strong></p>\r\n<p data-v-md-line=\"69\">由于mysql安装过程中，会通过mysql用户在/tmp目录下新建tmp_db文件，所以请给/tmp较大的权限。执行 ：</p>\r\n<div data-v-md-line=\"71\"><div class=\"v-md-pre-wrapper v-md-pre-wrapper-shell extra-class\"><pre class=\"v-md-hljs-shell\"><code>chmod -R 777 /tmp\r\n</code></pre>\r\n</div></div><p data-v-md-line=\"75\"><strong>2.</strong> <strong>安装前，检查依赖</strong></p>\r\n<div data-v-md-line=\"77\"><div class=\"v-md-pre-wrapper v-md-pre-wrapper-shell extra-class\"><pre class=\"v-md-hljs-shell\"><code>rpm -qa|grep libaio\r\nrpm -qa|grep net-tools\r\n</code></pre>\r\n</div></div><h5 data-v-md-heading=\"_2-2-centos7下mysql安装过程\" data-v-md-line=\"82\"><strong>2.2 CentOS7下MySQL安装过程</strong></h5>\r\n<p data-v-md-line=\"84\"><strong>1.</strong> <strong>将安装程序拷贝到/opt目录下</strong></p>\r\n<p data-v-md-line=\"86\">在mysql的安装文件目录下执行：（必须按照顺序执行）</p>\r\n<div data-v-md-line=\"88\"><div class=\"v-md-pre-wrapper v-md-pre-wrapper-shell extra-class\"><pre class=\"v-md-hljs-shell\"><code>rpm -ivh mysql-community-common-8.0.25-1.el7.x86_64.rpm \r\nrpm -ivh mysql-community-client-plugins-8.0.25-1.el7.x86_64.rpm \r\nrpm -ivh mysql-community-libs-8.0.25-1.el7.x86_64.rpm \r\nrpm -ivh mysql-community-client-8.0.25-1.el7.x86_64.rpm \r\nrpm -ivh mysql-community-server-8.0.25-1.el7.x86_64.rpm\r\n</code></pre>\r\n</div></div><ul data-v-md-line=\"96\">\r\n<li><code>rpm</code>是Redhat Package Manage缩写，通过RPM的管理，用户可以把源代码包装成以rpm为扩展名的文件形式，易于安装。</li>\r\n<li><code>-i</code>, --install 安装软件包</li>\r\n<li><code>-v</code>, --verbose 提供更多的详细信息输出</li>\r\n<li><code>-h</code>, --hash 软件包安装的时候列出哈希标记 (和 -v 一起使用效果更好)，展示进度条</li>\r\n</ul>\r\n<blockquote data-v-md-line=\"101\">\r\n<p data-v-md-line=\"101\">若存在mariadb-libs问题，则执行<strong>yum remove mysql-libs</strong>即可</p>\r\n</blockquote>\r\n<h5 data-v-md-heading=\"_2-3-查看mysql版本\" data-v-md-line=\"103\"><strong>2.3</strong> <strong>查看MySQL版本</strong></h5>\r\n<div data-v-md-line=\"105\"><div class=\"v-md-pre-wrapper v-md-pre-wrapper-shell extra-class\"><pre class=\"v-md-hljs-shell\"><code>mysql --version \r\n<span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">或</span>\r\nmysqladmin --version\r\n</code></pre>\r\n</div></div><h5 data-v-md-heading=\"_2-4-服务的初始化\" data-v-md-line=\"111\"><strong>2.4</strong> <strong>服务的初始化</strong></h5>\r\n<p data-v-md-line=\"113\">为了保证数据库目录与文件的所有者为 mysql 登录用户，如果你是以 root 身份运行 mysql 服务，需要执行下面的命令初始化：</p>\r\n<div data-v-md-line=\"115\"><div class=\"v-md-pre-wrapper v-md-pre-wrapper-shell extra-class\"><pre class=\"v-md-hljs-shell\"><code>mysqld --initialize --user=mysql\r\n</code></pre>\r\n</div></div><p data-v-md-line=\"119\">说明： --initialize 选项默认以“安全”模式来初始化，则会为 root 用户生成一个密码并将<code>该密码标记为过期</code>，登录后你需要设置一个新的密码。生成的<code>临时密码</code>会往日志中记录一份。</p>\r\n<p data-v-md-line=\"121\">查看密码：</p>\r\n<div data-v-md-line=\"123\"><div class=\"v-md-pre-wrapper v-md-pre-wrapper-shell extra-class\"><pre class=\"v-md-hljs-shell\"><code>cat /var/log/mysqld.log\r\n</code></pre>\r\n</div></div><p data-v-md-line=\"127\">root@localhost: 后面就是初始化的密码</p>\r\n<h5 data-v-md-heading=\"_2-5-启动mysql-查看状态\" data-v-md-line=\"129\"><strong>2.5</strong> <strong>启动MySQL，查看状态</strong></h5>\r\n<div data-v-md-line=\"131\"><div class=\"v-md-pre-wrapper v-md-pre-wrapper-shell extra-class\"><pre class=\"v-md-hljs-shell\"><code><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">加不加.service后缀都可以</span> \r\n启动：systemctl start mysqld.service \r\n关闭：systemctl stop mysqld.service \r\n重启：systemctl restart mysqld.service \r\n查看状态：systemctl status mysqld.service\r\n</code></pre>\r\n</div></div><h5 data-v-md-heading=\"_2-6-查看mysql服务是否自启动\" data-v-md-line=\"139\"><strong>2.6</strong> <strong>查看MySQL服务是否自启动</strong></h5>\r\n<div data-v-md-line=\"141\"><div class=\"v-md-pre-wrapper v-md-pre-wrapper-shell extra-class\"><pre class=\"v-md-hljs-shell\"><code>systemctl list-unit-files|grep mysqld.service\r\n</code></pre>\r\n</div></div><ul data-v-md-line=\"145\">\r\n<li>如不是enabled可以运行如下命令设置自启动</li>\r\n</ul>\r\n<div data-v-md-line=\"147\"><div class=\"v-md-pre-wrapper v-md-pre-wrapper-shell extra-class\"><pre class=\"v-md-hljs-shell\"><code>systemctl enable mysqld.service\r\n</code></pre>\r\n</div></div><ul data-v-md-line=\"151\">\r\n<li>如果希望不进行自启动，运行如下命令设置</li>\r\n</ul>\r\n<div data-v-md-line=\"153\"><div class=\"v-md-pre-wrapper v-md-pre-wrapper-shell extra-class\"><pre class=\"v-md-hljs-shell\"><code>systemctl disable mysqld.service\r\n</code></pre>\r\n</div></div>', '### 第01章 Linux下MySQL的安装与使用\r\n\r\n#### **1.** **安装前说明**\r\n\r\n##### **1.1** **查看是否安装过MySQL**\r\n\r\n- 如果你是用rpm安装, 检查一下RPM PACKAGE：\r\n\r\n```shell\r\nrpm -qa | grep -i mysql # -i 忽略大小写\r\n```\r\n\r\n- 检查mysql service：\r\n\r\n```shell\r\nsystemctl status mysqld.service\r\n```\r\n\r\n##### **1.2 MySQL的卸载**\r\n\r\n**1.** **关闭** **mysql** **服务**\r\n\r\n```shell\r\nsystemctl stop mysqld.service\r\n```\r\n\r\n**2.** **查看当前** **mysql** **安装状况**\r\n\r\n```shell\r\nrpm -qa | grep -i mysql\r\n# 或\r\nyum list installed | grep mysql\r\n```\r\n\r\n**3.** **卸载上述命令查询出的已安装程序**\r\n\r\n```shell\r\nyum remove mysql-xxx mysql-xxx mysql-xxx mysqk-xxxx\r\n```\r\n\r\n务必卸载干净，反复执行`rpm -qa | grep -i mysql`确认是否有卸载残留\r\n\r\n**4.** **删除** **mysql** **相关文件**\r\n\r\n- 查找相关文件\r\n\r\n```shell\r\nfind / -name mysql\r\n```\r\n\r\n- 删除上述命令查找出的相关文件\r\n\r\n```shell\r\nrm -rf xxx\r\n```\r\n\r\n**5.删除 my.cnf**\r\n\r\n```shell\r\nrm -rf /etc/my.cnf\r\n```\r\n\r\n#### **2. MySQL的Linux版安装**\r\n\r\n##### **2.1 CentOS7下检查MySQL依赖** \r\n\r\n**1.** **检查/tmp临时目录权限（必不可少）**\r\n\r\n由于mysql安装过程中，会通过mysql用户在/tmp目录下新建tmp_db文件，所以请给/tmp较大的权限。执行 ：\r\n\r\n```shell\r\nchmod -R 777 /tmp\r\n```\r\n\r\n**2.** **安装前，检查依赖**\r\n\r\n```shell\r\nrpm -qa|grep libaio\r\nrpm -qa|grep net-tools\r\n```\r\n\r\n##### **2.2 CentOS7下MySQL安装过程** \r\n\r\n**1.** **将安装程序拷贝到/opt目录下**\r\n\r\n在mysql的安装文件目录下执行：（必须按照顺序执行）\r\n\r\n```shell\r\nrpm -ivh mysql-community-common-8.0.25-1.el7.x86_64.rpm \r\nrpm -ivh mysql-community-client-plugins-8.0.25-1.el7.x86_64.rpm \r\nrpm -ivh mysql-community-libs-8.0.25-1.el7.x86_64.rpm \r\nrpm -ivh mysql-community-client-8.0.25-1.el7.x86_64.rpm \r\nrpm -ivh mysql-community-server-8.0.25-1.el7.x86_64.rpm\r\n```\r\n\r\n- `rpm`是Redhat Package Manage缩写，通过RPM的管理，用户可以把源代码包装成以rpm为扩展名的文件形式，易于安装。\r\n- `-i`, --install 安装软件包\r\n- `-v`, --verbose 提供更多的详细信息输出\r\n- `-h`, --hash 软件包安装的时候列出哈希标记 (和 -v 一起使用效果更好)，展示进度条\r\n\r\n> 若存在mariadb-libs问题，则执行**yum remove mysql-libs**即可\r\n\r\n##### **2.3** **查看MySQL版本**\r\n\r\n```shell\r\nmysql --version \r\n#或\r\nmysqladmin --version\r\n```\r\n\r\n##### **2.4** **服务的初始化**\r\n\r\n为了保证数据库目录与文件的所有者为 mysql 登录用户，如果你是以 root 身份运行 mysql 服务，需要执行下面的命令初始化：\r\n\r\n```shell\r\nmysqld --initialize --user=mysql\r\n```\r\n\r\n说明： --initialize 选项默认以“安全”模式来初始化，则会为 root 用户生成一个密码并将`该密码标记为过期`，登录后你需要设置一个新的密码。生成的`临时密码`会往日志中记录一份。\r\n\r\n查看密码：\r\n\r\n```shell\r\ncat /var/log/mysqld.log\r\n```\r\n\r\nroot@localhost: 后面就是初始化的密码\r\n\r\n##### **2.5** **启动MySQL，查看状态** \r\n\r\n```shell\r\n#加不加.service后缀都可以 \r\n启动：systemctl start mysqld.service \r\n关闭：systemctl stop mysqld.service \r\n重启：systemctl restart mysqld.service \r\n查看状态：systemctl status mysqld.service\r\n```\r\n\r\n##### **2.6** **查看MySQL服务是否自启动**\r\n\r\n```shell\r\nsystemctl list-unit-files|grep mysqld.service\r\n```\r\n\r\n- 如不是enabled可以运行如下命令设置自启动\r\n\r\n```shell\r\nsystemctl enable mysqld.service\r\n```\r\n\r\n- 如果希望不进行自启动，运行如下命令设置\r\n\r\n```shell\r\nsystemctl disable mysqld.service\r\n```', 0, '由于mysql安装过程中，会通过mysql用户在/tmp目录下新建tmp_db文件，所以请给/tmp较大的权限。执行 ：', '2023-05-14 14:22:43', '2023-05-15 10:02:27', 0, 0, 0, 0, 0, 0, -1, 2, NULL);
INSERT INTO `forum_article` VALUES ('gUqbuGBRS7i94uE', 10030, 'mysql', 10029, '其他', '3058131375', 'niubi', '未知', 'MySQL基础篇2', '202305/BqNRti1foIvIAiL.jpg', '<h4 data-v-md-heading=\"_3-mysql登录\" data-v-md-line=\"1\"><strong>3. MySQL登录</strong></h4>\r\n<h5 data-v-md-heading=\"_3-1-首次登录\" data-v-md-line=\"3\"><strong>3.1</strong> <strong>首次登录</strong></h5>\r\n<p data-v-md-line=\"5\">通过<code>mysql -hlocalhost -P3306 -uroot -p</code>进行登录，在Enter password：录入初始化密码</p>\r\n<h5 data-v-md-heading=\"_3-2-修改密码\" data-v-md-line=\"7\"><strong>3.2</strong> <strong>修改密码</strong></h5>\r\n<div data-v-md-line=\"9\"><div class=\"v-md-pre-wrapper v-md-pre-wrapper-mysql extra-class\"><pre class=\"v-md-hljs-mysql\"><code>ALTER USER \'root\'@\'localhost\' IDENTIFIED BY \'new_password\';\r\n</code></pre>\r\n</div></div><h5 data-v-md-heading=\"_3-3-设置远程登录\" data-v-md-line=\"13\"><strong>3.3</strong> <strong>设置远程登录</strong></h5>\r\n<p data-v-md-line=\"15\"><strong>1.</strong> <strong>确认网络</strong></p>\r\n<p data-v-md-line=\"17\">1.在远程机器上使用ping ip地址<code>保证网络畅通</code></p>\r\n<p data-v-md-line=\"19\">2.在远程机器上使用telnet命令<code>保证端口号开放</code>访问</p>\r\n<p data-v-md-line=\"21\"><strong>2.</strong> <strong>关闭防火墙或开放端口</strong></p>\r\n<p data-v-md-line=\"23\"><strong>方式一：关闭防火墙</strong></p>\r\n<ul data-v-md-line=\"25\">\r\n<li>CentOS6 ：</li>\r\n</ul>\r\n<div data-v-md-line=\"27\"><div class=\"v-md-pre-wrapper v-md-pre-wrapper-shell extra-class\"><pre class=\"v-md-hljs-shell\"><code>service iptables stop\r\n</code></pre>\r\n</div></div><ul data-v-md-line=\"31\">\r\n<li>CentOS7：</li>\r\n</ul>\r\n<div data-v-md-line=\"33\"><div class=\"v-md-pre-wrapper v-md-pre-wrapper-shell extra-class\"><pre class=\"v-md-hljs-shell\"><code><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">开启防火墙</span>\r\nsystemctl start firewalld.service\r\n<span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">查看防火墙状态</span>\r\nsystemctl status firewalld.service\r\n<span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">关闭防火墙</span>\r\nsystemctl stop firewalld.service\r\n<span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">设置开机启用防火墙</span> \r\nsystemctl enable firewalld.service \r\n<span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">设置开机禁用防火墙</span> \r\nsystemctl disable firewalld.service\r\n</code></pre>\r\n</div></div><p data-v-md-line=\"46\"><strong>方式二：开放端口</strong></p>\r\n<ul data-v-md-line=\"48\">\r\n<li>查看开放的端口号</li>\r\n</ul>\r\n<div data-v-md-line=\"50\"><div class=\"v-md-pre-wrapper v-md-pre-wrapper-shell extra-class\"><pre class=\"v-md-hljs-shell\"><code>firewall-cmd --list-all\r\n</code></pre>\r\n</div></div><ul data-v-md-line=\"54\">\r\n<li>设置开放的端口号</li>\r\n</ul>\r\n<div data-v-md-line=\"56\"><div class=\"v-md-pre-wrapper v-md-pre-wrapper-shell extra-class\"><pre class=\"v-md-hljs-shell\"><code>firewall-cmd --add-service=http --permanent\r\nfirewall-cmd --add-port=3306/tcp --permanent\r\n</code></pre>\r\n</div></div><ul data-v-md-line=\"61\">\r\n<li>重启防火墙</li>\r\n</ul>\r\n<div data-v-md-line=\"63\"><div class=\"v-md-pre-wrapper v-md-pre-wrapper-shell extra-class\"><pre class=\"v-md-hljs-shell\"><code>firewall-cmd --reload\r\n</code></pre>\r\n</div></div><h4 data-v-md-heading=\"_4-linux下修改配置\" data-v-md-line=\"67\"><strong>4. Linux下修改配置</strong></h4>\r\n<ul data-v-md-line=\"69\">\r\n<li>修改允许远程登陆</li>\r\n</ul>\r\n<div data-v-md-line=\"71\"><div class=\"v-md-pre-wrapper v-md-pre-wrapper-mysql extra-class\"><pre class=\"v-md-hljs-mysql\"><code>use mysql;\r\nselect Host,User from user;\r\nupdate user set host = \'%\' where user =\'root\';\r\nflush privileges;\r\n</code></pre>\r\n</div></div><blockquote data-v-md-line=\"78\">\r\n<p data-v-md-line=\"78\"><code>%</code>是个 通配符 ，如果Host=192.168.1.%，那么就表示只要是IP地址前缀为“192.168.1.”的客户端都可以连接。如果<code>Host=%</code>，表示所有IP都有连接权限。</p>\r\n<p data-v-md-line=\"80\">注意：在生产环境下不能为了省事将host设置为%，这样做会存在安全问题，具体的设置可以根据生产环境的IP进行设置。</p>\r\n</blockquote>\r\n<p data-v-md-line=\"82\">配置新连接报错：错误号码 2058，分析是 mysql 密码加密方法变了。</p>\r\n<p data-v-md-line=\"84\">**解决方法一：**升级远程连接工具版本</p>\r\n<p data-v-md-line=\"86\"><strong>解决方法二：</strong></p>\r\n<div data-v-md-line=\"88\"><div class=\"v-md-pre-wrapper v-md-pre-wrapper-mysql extra-class\"><pre class=\"v-md-hljs-mysql\"><code>ALTER USER \'root\'@\'%\' IDENTIFIED WITH mysql_native_password BY \'abc123\';\r\n</code></pre>\r\n</div></div><h4 data-v-md-heading=\"_5-字符集的相关操作\" data-v-md-line=\"92\"><strong>5.</strong> <strong>字符集的相关操作</strong></h4>\r\n<h5 data-v-md-heading=\"_5-1-各级别的字符集\" data-v-md-line=\"94\"><strong>5.1</strong> <strong>各级别的字符集</strong></h5>\r\n<div data-v-md-line=\"96\"><div class=\"v-md-pre-wrapper v-md-pre-wrapper-mysql extra-class\"><pre class=\"v-md-hljs-mysql\"><code>show variables like \'character%\';\r\n</code></pre>\r\n</div></div><ul data-v-md-line=\"100\">\r\n<li>character_set_server：服务器级别的字符集</li>\r\n<li>character_set_database：当前数据库的字符集</li>\r\n<li>character_set_client：服务器解码请求时使用的字符集</li>\r\n<li>character_set_connection：服务器处理请求时会把请求字符串从character_set_client转为character_set_connection</li>\r\n<li>character_set_results：服务器向客户端返回数据时使用的字符集</li>\r\n</ul>\r\n<p data-v-md-line=\"106\"><strong>小结</strong></p>\r\n<ul data-v-md-line=\"108\">\r\n<li>如果<code>创建或修改列</code>时没有显式的指定字符集和比较规则，则该列<code>默认用表的</code>字符集和比较规则</li>\r\n<li>如果<code>创建表时</code>没有显式的指定字符集和比较规则，则该表<code>默认用数据库的</code>字符集和比较规则</li>\r\n<li>如果<code>创建数据库时</code>没有显式的指定字符集和比较规则，则该数据库<code>默认用服务器的</code>字符集和比较规则</li>\r\n</ul>\r\n<h5 data-v-md-heading=\"_5-2-请求到响应过程中字符集的变化\" data-v-md-line=\"112\"><strong>5.2</strong> <strong>请求到响应过程中字符集的变化</strong></h5>\r\n<div data-v-md-line=\"114\"><div class=\"v-md-pre-wrapper v-md-pre-wrapper-mermaid extra-class\"><pre class=\"v-md-hljs-mermaid\"><code>graph TB\r\nA(客户端) --&gt; |&quot;使用操作系统的字符集编码请求字符串&quot;| B(从character_set_client转换为character_set_connection)\r\nB --&gt; C(从character_set_connection转换为具体的列使用的字符集)\r\nC --&gt; D(将查询结果从具体的列上使用的字符集转换为character_set_results)\r\nD --&gt; |&quot;使用操作系统的字符集解码响应的字符串&quot;| A\r\n\r\n</code></pre>\r\n</div></div><h3 data-v-md-heading=\"\" data-v-md-line=\"123\"></h3>\r\n', '#### **3. MySQL登录**\r\n\r\n##### **3.1** **首次登录**\r\n\r\n通过`mysql -hlocalhost -P3306 -uroot -p`进行登录，在Enter password：录入初始化密码\r\n\r\n##### **3.2** **修改密码**\r\n\r\n```mysql\r\nALTER USER \'root\'@\'localhost\' IDENTIFIED BY \'new_password\';\r\n```\r\n\r\n##### **3.3** **设置远程登录**\r\n\r\n**1.** **确认网络** \r\n\r\n1.在远程机器上使用ping ip地址`保证网络畅通`\r\n\r\n2.在远程机器上使用telnet命令`保证端口号开放`访问\r\n\r\n**2.** **关闭防火墙或开放端口**\r\n\r\n**方式一：关闭防火墙**\r\n\r\n- CentOS6 ：\r\n\r\n```shell\r\nservice iptables stop\r\n```\r\n\r\n- CentOS7：\r\n\r\n```shell\r\n#开启防火墙\r\nsystemctl start firewalld.service\r\n#查看防火墙状态\r\nsystemctl status firewalld.service\r\n#关闭防火墙\r\nsystemctl stop firewalld.service\r\n#设置开机启用防火墙 \r\nsystemctl enable firewalld.service \r\n#设置开机禁用防火墙 \r\nsystemctl disable firewalld.service\r\n```\r\n\r\n**方式二：开放端口**\r\n\r\n- 查看开放的端口号\r\n\r\n```shell\r\nfirewall-cmd --list-all\r\n```\r\n\r\n- 设置开放的端口号\r\n\r\n```shell\r\nfirewall-cmd --add-service=http --permanent\r\nfirewall-cmd --add-port=3306/tcp --permanent\r\n```\r\n\r\n- 重启防火墙\r\n\r\n```shell\r\nfirewall-cmd --reload\r\n```\r\n\r\n#### **4. Linux下修改配置**\r\n\r\n- 修改允许远程登陆\r\n\r\n```mysql\r\nuse mysql;\r\nselect Host,User from user;\r\nupdate user set host = \'%\' where user =\'root\';\r\nflush privileges;\r\n```\r\n\r\n> `%`是个 通配符 ，如果Host=192.168.1.%，那么就表示只要是IP地址前缀为“192.168.1.”的客户端都可以连接。如果`Host=%`，表示所有IP都有连接权限。\r\n>\r\n> 注意：在生产环境下不能为了省事将host设置为%，这样做会存在安全问题，具体的设置可以根据生产环境的IP进行设置。\r\n\r\n配置新连接报错：错误号码 2058，分析是 mysql 密码加密方法变了。\r\n\r\n**解决方法一：**升级远程连接工具版本\r\n\r\n**解决方法二：**\r\n\r\n```mysql\r\nALTER USER \'root\'@\'%\' IDENTIFIED WITH mysql_native_password BY \'abc123\';\r\n```\r\n\r\n#### **5.** **字符集的相关操作**\r\n\r\n##### **5.1** **各级别的字符集**\r\n\r\n```mysql\r\nshow variables like \'character%\';\r\n```\r\n\r\n- character_set_server：服务器级别的字符集\r\n- character_set_database：当前数据库的字符集\r\n- character_set_client：服务器解码请求时使用的字符集\r\n- character_set_connection：服务器处理请求时会把请求字符串从character_set_client转为character_set_connection \r\n- character_set_results：服务器向客户端返回数据时使用的字符集\r\n\r\n**小结**\r\n\r\n- 如果`创建或修改列`时没有显式的指定字符集和比较规则，则该列`默认用表的`字符集和比较规则\r\n- 如果`创建表时`没有显式的指定字符集和比较规则，则该表`默认用数据库的`字符集和比较规则\r\n- 如果`创建数据库时`没有显式的指定字符集和比较规则，则该数据库`默认用服务器的`字符集和比较规则\r\n\r\n##### **5.2** **请求到响应过程中字符集的变化**\r\n\r\n```mermaid\r\ngraph TB\r\nA(客户端) --> |\"使用操作系统的字符集编码请求字符串\"| B(从character_set_client转换为character_set_connection)\r\nB --> C(从character_set_connection转换为具体的列使用的字符集)\r\nC --> D(将查询结果从具体的列上使用的字符集转换为character_set_results)\r\nD --> |\"使用操作系统的字符集解码响应的字符串\"| A\r\n\r\n```\r\n\r\n### ', 0, '如果创建或修改列时没有显式的指定字符集和比较规则，则该列默认用表的字符集和比较规则\r\n如果创建表时没有显式的指定字符集和比较规则，则该表默认用数据库的字符集和比较规则\r\n如果创建数据库时没有显式的指定字符集和比较规则，则该数据库默认用服务器的字符集和比较规则', '2023-05-14 19:08:58', '2023-05-14 11:12:34', 0, 0, 0, 0, 0, 0, -1, 2, NULL);
INSERT INTO `forum_article` VALUES ('hthex35NEouxaJb', 10024, 'Java', 10023, '后端', '8408747315', '猜猜我是谁', '未知', ' 用户与权限管理', '202305/s7zLDCL7JoE4cdH.jpg', '<h3 data-v-md-heading=\"第03章-用户与权限管理\" data-v-md-line=\"1\">第03章 用户与权限管理</h3>\r\n<h4 data-v-md-heading=\"_1-用户管理\" data-v-md-line=\"3\"><strong>1.</strong> <strong>用户管理</strong></h4>\r\n<h5 data-v-md-heading=\"_1-1-登录mysql服务器\" data-v-md-line=\"5\"><strong>1.1</strong> <strong>登录MySQL服务器</strong></h5>\r\n<p data-v-md-line=\"7\">启动MySQL服务后，可以通过mysql命令来登录MySQL服务器，命令如下：</p>\r\n<div data-v-md-line=\"9\"><div class=\"v-md-pre-wrapper v-md-pre-wrapper-mysql extra-class\"><pre class=\"v-md-hljs-mysql\"><code>mysql –h hostname|hostIP –P port –u username –p DatabaseName –e &quot;SQL语句&quot;\r\n</code></pre>\r\n</div></div><ul data-v-md-line=\"13\">\r\n<li><code>-h参数</code>后面接主机名或者主机IP，hostname为主机，hostIP为主机IP。</li>\r\n<li><code>-P参数</code>后面接MySQL服务的端口，通过该参数连接到指定的端口。MySQL服务的默认端口是3306，不使用该参数时自动连接到3306端口，port为连接的端口号。</li>\r\n<li><code>-u参数</code>后面接用户名，username为用户名。</li>\r\n<li><code>-p参数</code>会提示输入密码。</li>\r\n<li><code>DatabaseName参数</code>指明登录到哪一个数据库中。如果没有该参数，就会直接登录到MySQL数据库中，然后可以使用USE命令来选择数据库。</li>\r\n<li><code>-e参数</code>后面可以直接加SQL语句。登录MySQL服务器以后即可执行这个SQL语句，然后退出MySQL服务器。</li>\r\n</ul>\r\n<div data-v-md-line=\"20\"><div class=\"v-md-pre-wrapper v-md-pre-wrapper-mysql extra-class\"><pre class=\"v-md-hljs-mysql\"><code>mysql -uroot -p -hlocalhost -P3306 mysql -e &quot;select host,user from user&quot;\r\n</code></pre>\r\n</div></div><h5 data-v-md-heading=\"_1-2-创建用户\" data-v-md-line=\"24\"><strong>1.2</strong> <strong>创建用户</strong></h5>\r\n<div data-v-md-line=\"26\"><div class=\"v-md-pre-wrapper v-md-pre-wrapper-mysql extra-class\"><pre class=\"v-md-hljs-mysql\"><code>CREATE USER 用户名 [IDENTIFIED BY \'密码\'][,用户名 [IDENTIFIED BY \'密码\']];\r\n</code></pre>\r\n</div></div><p data-v-md-line=\"30\">举例：</p>\r\n<div data-v-md-line=\"32\"><div class=\"v-md-pre-wrapper v-md-pre-wrapper-mysql extra-class\"><pre class=\"v-md-hljs-mysql\"><code>CREATE USER zhang3 IDENTIFIED BY \'123123\'; # 默认host是 %\r\nCREATE USER \'kangshifu\'@\'localhost\' IDENTIFIED BY \'123456\';\r\n</code></pre>\r\n</div></div><h5 data-v-md-heading=\"_1-3-修改用户\" data-v-md-line=\"37\"><strong>1.3</strong> <strong>修改用户</strong></h5>\r\n<div data-v-md-line=\"39\"><div class=\"v-md-pre-wrapper v-md-pre-wrapper-mysql extra-class\"><pre class=\"v-md-hljs-mysql\"><code>UPDATE mysql.user SET USER=\'li4\' WHERE USER=\'wang5\'; \r\nFLUSH PRIVILEGES;\r\n</code></pre>\r\n</div></div><h5 data-v-md-heading=\"_1-4-删除用户\" data-v-md-line=\"44\"><strong>1.4</strong> <strong>删除用户</strong></h5>\r\n<p data-v-md-line=\"46\"><strong>方式1：使用DROP方式删除（推荐）</strong></p>\r\n<div data-v-md-line=\"48\"><div class=\"v-md-pre-wrapper v-md-pre-wrapper-mysql extra-class\"><pre class=\"v-md-hljs-mysql\"><code>DROP USER user[,user]…;\r\n</code></pre>\r\n</div></div><p data-v-md-line=\"52\">举例：</p>\r\n<div data-v-md-line=\"54\"><div class=\"v-md-pre-wrapper v-md-pre-wrapper-mysql extra-class\"><pre class=\"v-md-hljs-mysql\"><code>DROP USER li4 ; # 默认删除host为%的用户\r\nDROP USER \'kangshifu\'@\'localhost\';\r\n</code></pre>\r\n</div></div><p data-v-md-line=\"59\"><strong>方式2：使用DELETE方式删除（不推荐，有残留信息）</strong></p>\r\n<div data-v-md-line=\"61\"><div class=\"v-md-pre-wrapper v-md-pre-wrapper-mysql extra-class\"><pre class=\"v-md-hljs-mysql\"><code>DELETE FROM mysql.user WHERE Host=’hostname’ AND User=’username’;\r\nFLUSH PRIVILEGES;\r\n</code></pre>\r\n</div></div><h5 data-v-md-heading=\"_1-5-设置当前用户密码\" data-v-md-line=\"66\"><strong>1.5</strong> <strong>设置当前用户密码</strong></h5>\r\n<p data-v-md-line=\"68\"><strong>1.</strong> <strong>使用ALTER USER命令来修改当前用户密码</strong></p>\r\n<div data-v-md-line=\"70\"><div class=\"v-md-pre-wrapper v-md-pre-wrapper-mysql extra-class\"><pre class=\"v-md-hljs-mysql\"><code>ALTER USER USER() IDENTIFIED BY \'new_password\';\r\n</code></pre>\r\n</div></div><p data-v-md-line=\"74\"><strong>2.</strong> <strong>使用SET语句来修改当前用户密码</strong></p>\r\n<div data-v-md-line=\"76\"><div class=\"v-md-pre-wrapper v-md-pre-wrapper-mysql extra-class\"><pre class=\"v-md-hljs-mysql\"><code>SET PASSWORD=\'new_password\';\r\n</code></pre>\r\n</div></div><h5 data-v-md-heading=\"_1-6-修改其它用户密码\" data-v-md-line=\"80\"><strong>1.6</strong> <strong>修改其它用户密码</strong></h5>\r\n<p data-v-md-line=\"82\"><strong>1.</strong> <strong>使用ALTER语句来修改普通用户的密码</strong></p>\r\n<div data-v-md-line=\"84\"><div class=\"v-md-pre-wrapper v-md-pre-wrapper-mysql extra-class\"><pre class=\"v-md-hljs-mysql\"><code>ALTER USER user [IDENTIFIED BY \'新密码\'] \r\n[,user[IDENTIFIED BY \'新密码\']]…;\r\n</code></pre>\r\n</div></div><p data-v-md-line=\"89\"><strong>2.</strong> <strong>使用SET命令来修改普通用户的密码</strong></p>\r\n<div data-v-md-line=\"91\"><div class=\"v-md-pre-wrapper v-md-pre-wrapper-mysql extra-class\"><pre class=\"v-md-hljs-mysql\"><code>SET PASSWORD FOR \'username\'@\'hostname\'=\'new_password\';\r\n</code></pre>\r\n</div></div><h4 data-v-md-heading=\"_2-权限管理\" data-v-md-line=\"95\"><strong>2.</strong> <strong>权限管理</strong></h4>\r\n<h5 data-v-md-heading=\"_2-1-权限列表\" data-v-md-line=\"97\"><strong>2.1</strong> <strong>权限列表</strong></h5>\r\n<div data-v-md-line=\"99\"><div class=\"v-md-pre-wrapper v-md-pre-wrapper-mysql extra-class\"><pre class=\"v-md-hljs-mysql\"><code>show privileges;\r\n</code></pre>\r\n</div></div><ul data-v-md-line=\"103\">\r\n<li><code>CREATE和DROP权限</code>，可以创建新的数据库和表，或删除（移掉）已有的数据库和表。如果将MySQL数据库中的DROP权限授予某用户，用户就可以删除MySQL访问权限保存的数据库。</li>\r\n<li><code>SELECT、INSERT、UPDATE和DELETE权限</code>允许在一个数据库现有的表上实施操作。</li>\r\n<li><code>SELECT权限</code>只有在它们真正从一个表中检索行时才被用到。</li>\r\n<li><code>INDEX权限</code>允许创建或删除索引，INDEX适用于已有的表。如果具有某个表的CREATE权限，就可以在CREATE TABLE语句中包括索引定义。</li>\r\n<li><code>ALTER权限</code>可以使用ALTER TABLE来更改表的结构和重新命名表。</li>\r\n<li><code>CREATE ROUTINE权限</code>用来创建保存的程序（函数和程序），<code>ALTER ROUTINE权限</code>用来更改和删除保存的程序，<code>EXECUTE权限</code>用来执行保存的程序。</li>\r\n<li><code>GRANT权限</code>允许授权给其他用户，可用于数据库、表和保存的程序。</li>\r\n<li><code>FILE权限</code>使用户可以使用LOAD DATA INFILE和SELECT … INTO OUTFILE语句读或写服务器上的文件，任何被授予FILE权限的用户都能读或写MySQL服务器上的任何文件（说明用户可以读任何数据库目录下的文件，因为服务器可以访问这些文件）。</li>\r\n</ul>\r\n<h5 data-v-md-heading=\"_2-2-授予权限的原则\" data-v-md-line=\"112\"><strong>2.2</strong> <strong>授予权限的原则</strong></h5>\r\n<p data-v-md-line=\"114\">权限控制主要是出于安全因素，因此需要遵循以下几个<code>经验原则</code>：</p>\r\n<p data-v-md-line=\"116\">1、只授予能<code>满足需要的最小权限</code>，防止用户干坏事。比如用户只是需要查询，那就只给select权限就可以了，不要给用户赋予update、insert或者delete权限。</p>\r\n<p data-v-md-line=\"118\">2、创建用户的时候<code>限制用户的登录主机</code>，一般是限制成指定IP或者内网IP段。</p>\r\n<p data-v-md-line=\"120\">3、为每个用户<code>设置满足密码复杂度的密码</code>。</p>\r\n<p data-v-md-line=\"122\">4、<code>定期清理不需要的用户</code>，回收权限或者删除用户。</p>\r\n<h5 data-v-md-heading=\"_2-3-授予权限\" data-v-md-line=\"124\"><strong>2.3</strong> <strong>授予权限</strong></h5>\r\n<div data-v-md-line=\"126\"><div class=\"v-md-pre-wrapper v-md-pre-wrapper-mysql extra-class\"><pre class=\"v-md-hljs-mysql\"><code>GRANT 权限1,权限2,…权限n ON 数据库名称.表名称 TO 用户名@用户地址 [IDENTIFIED BY ‘密码口令’];\r\n</code></pre>\r\n</div></div><ul data-v-md-line=\"130\">\r\n<li>该权限如果发现没有该用户，则会直接新建一个用户。</li>\r\n<li>给li4用户用本地命令行方式，授予atguigudb这个库下的所有表的插删改查的权限。</li>\r\n</ul>\r\n<div data-v-md-line=\"133\"><div class=\"v-md-pre-wrapper v-md-pre-wrapper-mysql extra-class\"><pre class=\"v-md-hljs-mysql\"><code>GRANT SELECT,INSERT,DELETE,UPDATE ON atguigudb.* TO li4@localhost;\r\n</code></pre>\r\n</div></div><ul data-v-md-line=\"137\">\r\n<li>授予通过网络方式登录的joe用户 ，对所有库所有表的全部权限，密码设为123。注意这里唯独不包括grant的权限</li>\r\n</ul>\r\n<div data-v-md-line=\"139\"><div class=\"v-md-pre-wrapper v-md-pre-wrapper-mysql extra-class\"><pre class=\"v-md-hljs-mysql\"><code>GRANT ALL PRIVILEGES ON *.* TO joe@\'%\' IDENTIFIED BY \'123\';\r\n</code></pre>\r\n</div></div><h5 data-v-md-heading=\"_2-4-查看权限\" data-v-md-line=\"143\"><strong>2.4</strong> <strong>查看权限</strong></h5>\r\n<ul data-v-md-line=\"145\">\r\n<li>查看当前用户权限</li>\r\n</ul>\r\n<div data-v-md-line=\"147\"><div class=\"v-md-pre-wrapper v-md-pre-wrapper-mysql extra-class\"><pre class=\"v-md-hljs-mysql\"><code>SHOW GRANTS; \r\n# 或 \r\nSHOW GRANTS FOR CURRENT_USER; \r\n# 或 \r\nSHOW GRANTS FOR CURRENT_USER();\r\n</code></pre>\r\n</div></div><ul data-v-md-line=\"155\">\r\n<li>查看某用户的全局权限</li>\r\n</ul>\r\n<div data-v-md-line=\"157\"><div class=\"v-md-pre-wrapper v-md-pre-wrapper-mysql extra-class\"><pre class=\"v-md-hljs-mysql\"><code>SHOW GRANTS FOR \'user\'@\'主机地址\';\r\n</code></pre>\r\n</div></div><h5 data-v-md-heading=\"_2-5-收回权限\" data-v-md-line=\"161\"><strong>2.5</strong> <strong>收回权限</strong></h5>\r\n<p data-v-md-line=\"163\"><strong>注意：在将用户账户从user表删除之前，应该收回相应用户的所有权限。</strong></p>\r\n<ul data-v-md-line=\"165\">\r\n<li>收回权限命令</li>\r\n</ul>\r\n<div data-v-md-line=\"167\"><div class=\"v-md-pre-wrapper v-md-pre-wrapper-mysql extra-class\"><pre class=\"v-md-hljs-mysql\"><code>REVOKE 权限1,权限2,…权限n ON 数据库名称.表名称 FROM 用户名@用户地址;\r\n</code></pre>\r\n</div></div><ul data-v-md-line=\"171\">\r\n<li>举例</li>\r\n</ul>\r\n<div data-v-md-line=\"173\"><div class=\"v-md-pre-wrapper v-md-pre-wrapper-mysql extra-class\"><pre class=\"v-md-hljs-mysql\"><code>#收回全库全表的所有权限 \r\nREVOKE ALL PRIVILEGES ON *.* FROM joe@\'%\'; \r\n#收回mysql库下的所有表的插删改查权限 \r\nREVOKE SELECT,INSERT,UPDATE,DELETE ON mysql.* FROM joe@localhost;\r\n</code></pre>\r\n</div></div><ul data-v-md-line=\"180\">\r\n<li>注意：<code>须用户重新登录后才能生效</code></li>\r\n</ul>\r\n<h4 data-v-md-heading=\"_3-角色管理\" data-v-md-line=\"182\"><strong>3.</strong> <strong>角色管理</strong></h4>\r\n<h5 data-v-md-heading=\"_3-1-创建角色\" data-v-md-line=\"184\"><strong>3.1</strong> <strong>创建角色</strong></h5>\r\n<div data-v-md-line=\"186\"><div class=\"v-md-pre-wrapper v-md-pre-wrapper-mysql extra-class\"><pre class=\"v-md-hljs-mysql\"><code>CREATE ROLE \'role_name\'[@\'host_name\'] [,\'role_name\'[@\'host_name\']]...\r\n</code></pre>\r\n</div></div><p data-v-md-line=\"190\">角色名称的命名规则和用户名类似。如果<code>host_name省略，默认为%</code>，<code>role_name不可省略</code>，不可为空。</p>\r\n<h5 data-v-md-heading=\"_3-2-给角色赋予权限\" data-v-md-line=\"192\"><strong>3.2</strong> <strong>给角色赋予权限</strong></h5>\r\n<div data-v-md-line=\"194\"><div class=\"v-md-pre-wrapper v-md-pre-wrapper-mysql extra-class\"><pre class=\"v-md-hljs-mysql\"><code>GRANT privileges ON table_name TO \'role_name\'[@\'host_name\'];\r\n</code></pre>\r\n</div></div><p data-v-md-line=\"198\">上述语句中privileges代表权限的名称，多个权限以逗号隔开。可使用SHOW语句查询权限名称</p>\r\n<div data-v-md-line=\"200\"><div class=\"v-md-pre-wrapper v-md-pre-wrapper-mysql extra-class\"><pre class=\"v-md-hljs-mysql\"><code>SHOW PRIVILEGES\\G\r\n</code></pre>\r\n</div></div><h5 data-v-md-heading=\"_3-3-查看角色的权限\" data-v-md-line=\"204\"><strong>3.3</strong> <strong>查看角色的权限</strong></h5>\r\n<div data-v-md-line=\"206\"><div class=\"v-md-pre-wrapper v-md-pre-wrapper-mysql extra-class\"><pre class=\"v-md-hljs-mysql\"><code>SHOW GRANTS FOR \'role_name\';\r\n</code></pre>\r\n</div></div><p data-v-md-line=\"210\">只要你创建了一个角色，系统就会自动给你一个“<code>USAGE</code>”权限，意思是<code>连接登录数据库的权限</code>。</p>\r\n<h5 data-v-md-heading=\"_3-4-回收角色的权限\" data-v-md-line=\"212\"><strong>3.4</strong> <strong>回收角色的权限</strong></h5>\r\n<div data-v-md-line=\"214\"><div class=\"v-md-pre-wrapper v-md-pre-wrapper-mysql extra-class\"><pre class=\"v-md-hljs-mysql\"><code>REVOKE privileges ON tablename FROM \'rolename\';\r\n</code></pre>\r\n</div></div><h5 data-v-md-heading=\"_3-5-删除角色\" data-v-md-line=\"218\"><strong>3.5</strong> <strong>删除角色</strong></h5>\r\n<div data-v-md-line=\"220\"><div class=\"v-md-pre-wrapper v-md-pre-wrapper-mysql extra-class\"><pre class=\"v-md-hljs-mysql\"><code>DROP ROLE role [,role2]...\r\n</code></pre>\r\n</div></div><p data-v-md-line=\"224\">注意，<code>如果你删除了角色，那么用户也就失去了通过这个角色所获得的所有权限</code>。</p>\r\n<h5 data-v-md-heading=\"_3-6-给用户赋予角色\" data-v-md-line=\"226\"><strong>3.6</strong> <strong>给用户赋予角色</strong></h5>\r\n<p data-v-md-line=\"228\">角色创建并授权后，要赋给用户并处于<code>激活状态</code>才能发挥作用。</p>\r\n<div data-v-md-line=\"230\"><div class=\"v-md-pre-wrapper v-md-pre-wrapper-mysql extra-class\"><pre class=\"v-md-hljs-mysql\"><code>GRANT role [,role2,...] TO user [,user2,...];\r\n</code></pre>\r\n</div></div><p data-v-md-line=\"234\">查询当前已激活的角色</p>\r\n<div data-v-md-line=\"236\"><div class=\"v-md-pre-wrapper v-md-pre-wrapper-mysql extra-class\"><pre class=\"v-md-hljs-mysql\"><code>SELECT CURRENT_ROLE();\r\n</code></pre>\r\n</div></div><h5 data-v-md-heading=\"_3-7-激活角色\" data-v-md-line=\"240\"><strong>3.7</strong> <strong>激活角色</strong></h5>\r\n<p data-v-md-line=\"242\"><strong>方式1：使用set default role 命令激活角色</strong></p>\r\n<div data-v-md-line=\"244\"><div class=\"v-md-pre-wrapper v-md-pre-wrapper-mysql extra-class\"><pre class=\"v-md-hljs-mysql\"><code>SET DEFAULT ROLE ALL TO \'kangshifu\'@\'localhost\';\r\n</code></pre>\r\n</div></div><p data-v-md-line=\"248\"><strong>方式2：将activate_all_roles_on_login设置为ON</strong></p>\r\n<div data-v-md-line=\"250\"><div class=\"v-md-pre-wrapper v-md-pre-wrapper-mysql extra-class\"><pre class=\"v-md-hljs-mysql\"><code>SET GLOBAL activate_all_roles_on_login=ON;\r\n</code></pre>\r\n</div></div><p data-v-md-line=\"254\">这条 SQL 语句的意思是，对<code>所有角色永久激活</code>。</p>\r\n<h5 data-v-md-heading=\"_3-8-撤销用户的角色\" data-v-md-line=\"256\"><strong>3.8</strong> <strong>撤销用户的角色</strong></h5>\r\n<div data-v-md-line=\"258\"><div class=\"v-md-pre-wrapper v-md-pre-wrapper-mysql extra-class\"><pre class=\"v-md-hljs-mysql\"><code>REVOKE role FROM user;\r\n</code></pre>\r\n</div></div><h5 data-v-md-heading=\"_3-9-设置强制角色-mandatory-role\" data-v-md-line=\"262\"><strong>3.9</strong> <strong>设置强制角色(mandatory role)</strong></h5>\r\n<p data-v-md-line=\"264\">方式1：服务启动前设置</p>\r\n<div data-v-md-line=\"266\"><div class=\"v-md-pre-wrapper v-md-pre-wrapper-ini extra-class\"><pre class=\"v-md-hljs-ini\"><code><span class=\"hljs-section\">[mysqld]</span> \r\n<span class=\"hljs-attr\">mandatory_roles</span>=<span class=\"hljs-string\">&#x27;role1,role2@localhost,r3@%.atguigu.com&#x27;</span>\r\n</code></pre>\r\n</div></div><p data-v-md-line=\"271\">方式2：运行时设置</p>\r\n<div data-v-md-line=\"273\"><div class=\"v-md-pre-wrapper v-md-pre-wrapper-mysql extra-class\"><pre class=\"v-md-hljs-mysql\"><code>SET PERSIST mandatory_roles = \'role1,role2@localhost,r3@%.example.com\'; #系统重启后仍然有效\r\nSET GLOBAL mandatory_roles = \'role1,role2@localhost,r3@%.example.com\'; #系统重启后失效\r\n</code></pre>\r\n</div></div><h3 data-v-md-heading=\"\" data-v-md-line=\"278\"></h3>\r\n', '### 第03章 用户与权限管理\r\n\r\n#### **1.** **用户管理**\r\n\r\n##### **1.1** **登录MySQL服务器**\r\n\r\n启动MySQL服务后，可以通过mysql命令来登录MySQL服务器，命令如下：\r\n\r\n```mysql\r\nmysql –h hostname|hostIP –P port –u username –p DatabaseName –e \"SQL语句\"\r\n```\r\n\r\n- `-h参数`后面接主机名或者主机IP，hostname为主机，hostIP为主机IP。 \r\n- `-P参数`后面接MySQL服务的端口，通过该参数连接到指定的端口。MySQL服务的默认端口是3306，不使用该参数时自动连接到3306端口，port为连接的端口号。\r\n- `-u参数`后面接用户名，username为用户名。\r\n- `-p参数`会提示输入密码。\r\n- `DatabaseName参数`指明登录到哪一个数据库中。如果没有该参数，就会直接登录到MySQL数据库中，然后可以使用USE命令来选择数据库。\r\n- `-e参数`后面可以直接加SQL语句。登录MySQL服务器以后即可执行这个SQL语句，然后退出MySQL服务器。\r\n\r\n```mysql\r\nmysql -uroot -p -hlocalhost -P3306 mysql -e \"select host,user from user\"\r\n```\r\n\r\n##### **1.2** **创建用户**\r\n\r\n```mysql\r\nCREATE USER 用户名 [IDENTIFIED BY \'密码\'][,用户名 [IDENTIFIED BY \'密码\']];\r\n```\r\n\r\n举例：\r\n\r\n```mysql\r\nCREATE USER zhang3 IDENTIFIED BY \'123123\'; # 默认host是 %\r\nCREATE USER \'kangshifu\'@\'localhost\' IDENTIFIED BY \'123456\';\r\n```\r\n\r\n##### **1.3** **修改用户**\r\n\r\n```mysql\r\nUPDATE mysql.user SET USER=\'li4\' WHERE USER=\'wang5\'; \r\nFLUSH PRIVILEGES;\r\n```\r\n\r\n##### **1.4** **删除用户**\r\n\r\n**方式1：使用DROP方式删除（推荐）**\r\n\r\n```mysql\r\nDROP USER user[,user]…;\r\n```\r\n\r\n举例：\r\n\r\n```mysql\r\nDROP USER li4 ; # 默认删除host为%的用户\r\nDROP USER \'kangshifu\'@\'localhost\';\r\n```\r\n\r\n**方式2：使用DELETE方式删除（不推荐，有残留信息）**\r\n\r\n```mysql\r\nDELETE FROM mysql.user WHERE Host=’hostname’ AND User=’username’;\r\nFLUSH PRIVILEGES;\r\n```\r\n\r\n##### **1.5** **设置当前用户密码**\r\n\r\n**1.** **使用ALTER USER命令来修改当前用户密码**\r\n\r\n```mysql\r\nALTER USER USER() IDENTIFIED BY \'new_password\';\r\n```\r\n\r\n**2.** **使用SET语句来修改当前用户密码**\r\n\r\n```mysql\r\nSET PASSWORD=\'new_password\';\r\n```\r\n\r\n##### **1.6** **修改其它用户密码** \r\n\r\n**1.** **使用ALTER语句来修改普通用户的密码**\r\n\r\n```mysql\r\nALTER USER user [IDENTIFIED BY \'新密码\'] \r\n[,user[IDENTIFIED BY \'新密码\']]…;\r\n```\r\n\r\n**2.** **使用SET命令来修改普通用户的密码**\r\n\r\n```mysql\r\nSET PASSWORD FOR \'username\'@\'hostname\'=\'new_password\';\r\n```\r\n\r\n#### **2.** **权限管理**\r\n\r\n##### **2.1** **权限列表**\r\n\r\n```mysql\r\nshow privileges;\r\n```\r\n\r\n- `CREATE和DROP权限`，可以创建新的数据库和表，或删除（移掉）已有的数据库和表。如果将MySQL数据库中的DROP权限授予某用户，用户就可以删除MySQL访问权限保存的数据库。\r\n- `SELECT、INSERT、UPDATE和DELETE权限`允许在一个数据库现有的表上实施操作。\r\n- `SELECT权限`只有在它们真正从一个表中检索行时才被用到。\r\n- `INDEX权限`允许创建或删除索引，INDEX适用于已有的表。如果具有某个表的CREATE权限，就可以在CREATE TABLE语句中包括索引定义。\r\n- `ALTER权限`可以使用ALTER TABLE来更改表的结构和重新命名表。\r\n- `CREATE ROUTINE权限`用来创建保存的程序（函数和程序），`ALTER ROUTINE权限`用来更改和删除保存的程序，`EXECUTE权限`用来执行保存的程序。\r\n- `GRANT权限`允许授权给其他用户，可用于数据库、表和保存的程序。\r\n- `FILE权限`使用户可以使用LOAD DATA INFILE和SELECT ... INTO OUTFILE语句读或写服务器上的文件，任何被授予FILE权限的用户都能读或写MySQL服务器上的任何文件（说明用户可以读任何数据库目录下的文件，因为服务器可以访问这些文件）。\r\n\r\n##### **2.2** **授予权限的原则**\r\n\r\n权限控制主要是出于安全因素，因此需要遵循以下几个`经验原则`：\r\n\r\n1、只授予能`满足需要的最小权限`，防止用户干坏事。比如用户只是需要查询，那就只给select权限就可以了，不要给用户赋予update、insert或者delete权限。\r\n\r\n2、创建用户的时候`限制用户的登录主机`，一般是限制成指定IP或者内网IP段。\r\n\r\n3、为每个用户`设置满足密码复杂度的密码`。 \r\n\r\n4、`定期清理不需要的用户`，回收权限或者删除用户。\r\n\r\n##### **2.3** **授予权限**\r\n\r\n```mysql\r\nGRANT 权限1,权限2,…权限n ON 数据库名称.表名称 TO 用户名@用户地址 [IDENTIFIED BY ‘密码口令’];\r\n```\r\n\r\n- 该权限如果发现没有该用户，则会直接新建一个用户。\r\n- 给li4用户用本地命令行方式，授予atguigudb这个库下的所有表的插删改查的权限。\r\n\r\n```mysql\r\nGRANT SELECT,INSERT,DELETE,UPDATE ON atguigudb.* TO li4@localhost;\r\n```\r\n\r\n- 授予通过网络方式登录的joe用户 ，对所有库所有表的全部权限，密码设为123。注意这里唯独不包括grant的权限\r\n\r\n```mysql\r\nGRANT ALL PRIVILEGES ON *.* TO joe@\'%\' IDENTIFIED BY \'123\';\r\n```\r\n\r\n##### **2.4** **查看权限**\r\n\r\n- 查看当前用户权限\r\n\r\n```mysql\r\nSHOW GRANTS; \r\n# 或 \r\nSHOW GRANTS FOR CURRENT_USER; \r\n# 或 \r\nSHOW GRANTS FOR CURRENT_USER();\r\n```\r\n\r\n- 查看某用户的全局权限\r\n\r\n```mysql\r\nSHOW GRANTS FOR \'user\'@\'主机地址\';\r\n```\r\n\r\n##### **2.5** **收回权限**\r\n\r\n**注意：在将用户账户从user表删除之前，应该收回相应用户的所有权限。**\r\n\r\n- 收回权限命令\r\n\r\n```mysql\r\nREVOKE 权限1,权限2,…权限n ON 数据库名称.表名称 FROM 用户名@用户地址;\r\n```\r\n\r\n- 举例\r\n\r\n```mysql\r\n#收回全库全表的所有权限 \r\nREVOKE ALL PRIVILEGES ON *.* FROM joe@\'%\'; \r\n#收回mysql库下的所有表的插删改查权限 \r\nREVOKE SELECT,INSERT,UPDATE,DELETE ON mysql.* FROM joe@localhost;\r\n```\r\n\r\n- 注意：`须用户重新登录后才能生效` \r\n\r\n#### **3.** **角色管理**\r\n\r\n##### **3.1** **创建角色**\r\n\r\n```mysql\r\nCREATE ROLE \'role_name\'[@\'host_name\'] [,\'role_name\'[@\'host_name\']]...\r\n```\r\n\r\n角色名称的命名规则和用户名类似。如果`host_name省略，默认为%`，`role_name不可省略`，不可为空。\r\n\r\n##### **3.2** **给角色赋予权限**\r\n\r\n```mysql\r\nGRANT privileges ON table_name TO \'role_name\'[@\'host_name\'];\r\n```\r\n\r\n上述语句中privileges代表权限的名称，多个权限以逗号隔开。可使用SHOW语句查询权限名称\r\n\r\n```mysql\r\nSHOW PRIVILEGES\\G\r\n```\r\n\r\n##### **3.3** **查看角色的权限**\r\n\r\n```mysql\r\nSHOW GRANTS FOR \'role_name\';\r\n```\r\n\r\n只要你创建了一个角色，系统就会自动给你一个“`USAGE`”权限，意思是`连接登录数据库的权限`。\r\n\r\n##### **3.4** **回收角色的权限**\r\n\r\n```mysql\r\nREVOKE privileges ON tablename FROM \'rolename\';\r\n```\r\n\r\n##### **3.5** **删除角色**\r\n\r\n```mysql\r\nDROP ROLE role [,role2]...\r\n```\r\n\r\n注意，`如果你删除了角色，那么用户也就失去了通过这个角色所获得的所有权限`。\r\n\r\n##### **3.6** **给用户赋予角色**\r\n\r\n角色创建并授权后，要赋给用户并处于`激活状态`才能发挥作用。\r\n\r\n```mysql\r\nGRANT role [,role2,...] TO user [,user2,...];\r\n```\r\n\r\n查询当前已激活的角色\r\n\r\n```mysql\r\nSELECT CURRENT_ROLE();\r\n```\r\n\r\n##### **3.7** **激活角色**\r\n\r\n**方式1：使用set default role 命令激活角色**\r\n\r\n```mysql\r\nSET DEFAULT ROLE ALL TO \'kangshifu\'@\'localhost\';\r\n```\r\n\r\n**方式2：将activate_all_roles_on_login设置为ON**\r\n\r\n```mysql\r\nSET GLOBAL activate_all_roles_on_login=ON;\r\n```\r\n\r\n这条 SQL 语句的意思是，对`所有角色永久激活`。\r\n\r\n##### **3.8** **撤销用户的角色**\r\n\r\n```mysql\r\nREVOKE role FROM user;\r\n```\r\n\r\n##### **3.9** **设置强制角色(mandatory role)**\r\n\r\n方式1：服务启动前设置\r\n\r\n```ini\r\n[mysqld] \r\nmandatory_roles=\'role1,role2@localhost,r3@%.atguigu.com\'\r\n```\r\n\r\n方式2：运行时设置\r\n\r\n```mysql\r\nSET PERSIST mandatory_roles = \'role1,role2@localhost,r3@%.example.com\'; #系统重启后仍然有效\r\nSET GLOBAL mandatory_roles = \'role1,role2@localhost,r3@%.example.com\'; #系统重启后失效\r\n```\r\n\r\n### ', 0, '后面接主机名或者主机IP，hostname为主机，hostIP为主机IP。\r\n-P参数后面接MySQL服务的端口，通过该参数连接到指定的端口。MySQL服务的默认端口是3306，不使用该参数时自动连接到3306端口，port为连接的端口号。\r\n-u参数后面接用户名，username为用户名。\r\n-p参数会提示输入密码。\r\nDatabaseName参数指明登录到哪一个数据库中。', '2023-05-14 21:09:16', '2023-05-30 03:10:16', 2, 0, 0, 0, 0, NULL, 1, 3, NULL);
INSERT INTO `forum_article` VALUES ('kjHIRgOvCQdEki0', 10018, 'JavaScript', 10014, '前端', '8423597423', 'niuniuiu', '未知', '测试11111', '202305/qLl5epVm8wZGO4F.jpg', '<p data-v-md-line=\"1\">测试</p>\r\n', '测试', 0, '惆怅长岑长错错错错错', '2023-05-15 18:31:40', '2023-05-15 18:31:40', 0, 0, 0, 0, 0, NULL, 0, 3, NULL);
INSERT INTO `forum_article` VALUES ('l2ndTf0o48gsXUi', 10026, 'c#', 10023, '后端', '8408747315', '猜猜我是谁', '未知', 'mysql逻辑管理', '202305/3L00FQFY5nRKJcu.jpg', '<h5 data-v-md-heading=\"_1-1-第1层-连接层\" data-v-md-line=\"1\"><strong>1.1</strong> <strong>第1层：连接层</strong></h5>\r\n<p data-v-md-line=\"3\">系统（客户端）访问<code>MySQL</code>服务器前，做的第一件事就是建立<code>TCP</code>连接。</p>\r\n<p data-v-md-line=\"5\">经过三次握手建立连接成功后，<code>MySQL</code>服务器对<code>TCP</code>传输过来的账号密码做身份认证、权限获取。</p>\r\n<ul data-v-md-line=\"7\">\r\n<li><strong>用户名或密码不对，会收到一个Access denied for user错误，客户端程序结束执行</strong></li>\r\n<li><strong>用户名密码认证通过，会从权限表查出账号拥有的权限与连接关联，之后的权限判断逻辑，都将依赖于此时读到的权限</strong></li>\r\n</ul>\r\n<p data-v-md-line=\"10\"><code>TCP</code>连接收到请求后，必须要分配给一个线程专门与这个客户端的交互。所以还会有个线程池，去走后面的流程。每一个连接从线程池中获取线程，省去了创建和销毁线程的开销。</p>\r\n<h5 data-v-md-heading=\"_1-2-第2层-服务层\" data-v-md-line=\"12\"><strong>1.2</strong> <strong>第2层：服务层</strong></h5>\r\n<ul data-v-md-line=\"14\">\r\n<li>\r\n<p data-v-md-line=\"14\"><strong>SQL Interface: SQL接口</strong></p>\r\n<ul data-v-md-line=\"16\">\r\n<li>接收用户的SQL命令，并且返回用户需要查询的结果。比如SELECT … FROM就是调用SQL Interface</li>\r\n<li>MySQL支持DML（数据操作语言）、DDL（数据定义语言）、存储过程、视图、触发器、自定义函数等多种SQL语言接口</li>\r\n</ul>\r\n</li>\r\n<li>\r\n<p data-v-md-line=\"19\"><strong>Parser:</strong> <strong>解析器</strong></p>\r\n<ul data-v-md-line=\"21\">\r\n<li>在解析器中对 SQL 语句进行语法分析、语义分析。将SQL语句分解成数据结构，并将这个结构传递到后续步骤，以后SQL语句的传递和处理就是基于这个结构的。如果在分解构成中遇到错误，那么就说明这个SQL语句是不合理的。</li>\r\n<li>在SQL命令传递到解析器的时候会被解析器验证和解析，并为其创建<code>语法树</code>，并根据数据字典丰富查询语法树，会<code>验证该客户端是否具有执行该查询的权限</code>。创建好语法树后，MySQL还会对SQL查询进行语法上的优化，进行查询重写。</li>\r\n</ul>\r\n</li>\r\n<li>\r\n<p data-v-md-line=\"24\"><strong>Optimizer:</strong> <strong>查询优化器</strong></p>\r\n<ul data-v-md-line=\"26\">\r\n<li>SQL语句在语法解析之后、查询之前会使用查询优化器确定 SQL 语句的执行路径，生成一个<code>执行计划</code>。</li>\r\n<li>这个执行计划表明应该<code>使用哪些索引</code>进行查询（全表检索还是使用索引检索），表之间的连接顺序如何，最后会按照执行计划中的步骤调用存储引擎提供的方法来真正的执行查询，并将查询结果返回给用户。</li>\r\n<li>它使用“<code>选取-投影-连接</code>”策略进行查询。例如：</li>\r\n</ul>\r\n<div data-v-md-line=\"30\"><div class=\"v-md-pre-wrapper v-md-pre-wrapper-mysql extra-class\"><pre class=\"v-md-hljs-mysql\"><code>SELECT id,name FROM student WHERE gender = \'女\';\r\n</code></pre>\r\n</div></div><p data-v-md-line=\"34\">这个SELECT查询先根据WHERE语句进行<code>选取</code>，而不是将表全部查询出来以后再进行gender过滤。 这个SELECT查询先根据id和name进行属性<code>投影</code>，而不是将属性全部取出以后再进行过滤，将这两个查询条件<code>连接</code>起来生成最终查询结果。</p>\r\n</li>\r\n<li>\r\n<p data-v-md-line=\"36\"><strong>Caches &amp; Buffers： 查询缓存组件</strong></p>\r\n<ul data-v-md-line=\"38\">\r\n<li>MySQL内部维持着一些Cache和Buffer，比如Query Cache用来缓存一条SELECT语句的执行结果，如果能够在其中找到对应的查询结果，那么就不必再进行查询解析、优化和执行的整个过程了，直接将结果反馈给客户端。</li>\r\n<li>这个缓存机制是由一系列小缓存组成的。比如表缓存，记录缓存，key缓存，权限缓存等 。</li>\r\n<li>这个查询缓存可以在<code>不同客户端之间共享</code>。</li>\r\n<li>从MySQL 5.7.20开始，不推荐使用查询缓存，并在<code>MySQL 8.0中删除</code>。</li>\r\n</ul>\r\n</li>\r\n</ul>\r\n<h5 data-v-md-heading=\"_1-3-第3层-引擎层\" data-v-md-line=\"43\"><strong>1.3</strong> <strong>第3层：引擎层</strong></h5>\r\n<p data-v-md-line=\"45\">插件式存储引擎层（ Storage Engines），<strong>真正的负责了MySQL中数据的存储和提取，对物理服务器级别维护的底层数据执行操作</strong>，服务层通过API与存储引擎进行通信。</p>\r\n<h5 data-v-md-heading=\"_1-4-小结\" data-v-md-line=\"47\"><strong>1.4</strong> <strong>小结</strong></h5>\r\n<p data-v-md-line=\"49\"><img src=\"https://cdn.jsdelivr.net/gh/aoshihuankong/cloudimg@master/img/202203291131321.png\" alt=\"image-20220329113126234\"></p>\r\n<p data-v-md-line=\"51\">简化为三层结构：</p>\r\n<ol data-v-md-line=\"53\">\r\n<li>\r\n<p data-v-md-line=\"53\">连接层：客户端和服务器端建立连接，客户端发送 SQL 至服务器端；</p>\r\n</li>\r\n<li>\r\n<p data-v-md-line=\"55\">SQL 层（服务层）：对 SQL 语句进行查询处理；与数据库文件的存储方式无关；</p>\r\n</li>\r\n<li>\r\n<p data-v-md-line=\"57\">存储引擎层：与数据库文件打交道，负责数据的存储和读取。</p>\r\n</li>\r\n</ol>\r\n<h4 data-v-md-heading=\"_2-sql执行流程\" data-v-md-line=\"59\"><strong>2. SQL执行流程</strong></h4>\r\n<h5 data-v-md-heading=\"_2-1-mysql-中的-sql执行流程\" data-v-md-line=\"61\"><strong>2.1 MySQL</strong> <strong>中的</strong> <strong>SQL执行流程</strong></h5>\r\n<p data-v-md-line=\"63\"><img src=\"https://cdn.jsdelivr.net/gh/aoshihuankong/cloudimg@master/img/202203291133116.png\" alt=\"image-20220329113337008\"></p>\r\n<p data-v-md-line=\"65\"><strong>MySQL的查询流程：</strong></p>\r\n<p data-v-md-line=\"67\"><strong>1.</strong> <strong>查询缓存</strong>：Server 如果在查询缓存中发现了这条 SQL 语句，就会直接将结果返回给客户端；如果没有，就进入到解析器阶段。需要说明的是，因为查询缓存往往效率不高，所以在 MySQL8.0 之后就抛弃了这个功能。</p>\r\n<p data-v-md-line=\"69\">查询缓存是提前把查询结果缓存起来，这样下次不需要执行就可以直接拿到结果。需要说明的是，在MySQL 中的查询缓存，不是缓存查询计划，而是查询对应的结果。这就意味着查询匹配的<code>鲁棒性大大降低</code>，只有<code>相同的查询操作才会命中查询缓存</code>。两个查询请求在任何字符上的不同（例如：空格、注释、大小写），都会导致缓存不会命中。因此 MySQL 的 查询缓存命中率不高 。</p>\r\n<p data-v-md-line=\"71\">同时，如果查询请求中包含某些系统函数、用户自定义变量和函数、一些系统表，如 mysql、 information_schema、 performance_schema 数据库中的表，那这个请求就不会被缓存。</p>\r\n<p data-v-md-line=\"73\">此外，既然是缓存，那就有它<code>缓存失效的时候</code>。MySQL的缓存系统会监测涉及到的每张表，只要该表的结构或者数据被修改，如对该表使用了<code>INSERT</code>、<code>UPDATE</code>、<code>DELETE</code>、<code>TRUNCATE TABLE</code>、<code>ALTER TABLE</code>、<code>DROP TABLE</code>或<code>DROP DATABASE</code>语句，那使用该表的所有高速缓存查询都将变为无效并从高速缓存中删除！对于<code>更新压力大的数据库</code>来说，查询缓存的命中率会非常低。</p>\r\n<p data-v-md-line=\"75\"><strong>2.</strong> <strong>解析器</strong>：在解析器中对 SQL 语句进行语法分析、语义分析。</p>\r\n<p data-v-md-line=\"77\">分析器先做“<code>词法分析</code>”。你输入的是由多个字符串和空格组成的一条 SQL 语句，MySQL 需要识别出里面的字符串分别是什么，代表什么。 MySQL 从你输入的&quot;select&quot;这个关键字识别出来，这是一个查询语句。它也要把字符串“T”识别成“表名 T”，把字符串“ID”识别成“列 ID”。</p>\r\n<p data-v-md-line=\"79\">接着，要做“<code>语法分析</code>”。根据词法分析的结果，语法分析器（比如：Bison）会根据语法规则，判断你输入的这个 SQL 语句是否<code>满足 MySQL 语法</code>。如果SQL语句正确，则会生成一个语法树。</p>\r\n<p data-v-md-line=\"81\"><strong>3.</strong> <strong>优化器</strong>：在优化器中会确定 SQL 语句的执行路径，比如是根据<code>全表检索</code>，还是根据<code>索引检索</code>等。在查询优化器中，可以分为<code>逻辑查询</code>优化阶段和<code>物理查询</code>优化阶段。</p>\r\n<p data-v-md-line=\"83\"><strong>4.</strong> <strong>执行器</strong>：在执行之前需要判断该用户是否<code>具备权限</code>。如果没有，就会返回权限错误。如果具备权限，就执行 SQL查询并返回结果。在 MySQL8.0 以下的版本，如果设置了查询缓存，这时会将查询结果进行缓存。</p>\r\n<p data-v-md-line=\"85\"><img src=\"https://cdn.jsdelivr.net/gh/aoshihuankong/cloudimg@master/img/202203291145074.png\" alt=\"image-20220329114541991\"></p>\r\n<p data-v-md-line=\"87\">SQL 语句在 MySQL 中的流程是： SQL语句→查询缓存→解析器→优化器→执行器 。</p>\r\n<h4 data-v-md-heading=\"_3-数据库缓冲池-buffer-pool\" data-v-md-line=\"89\"><strong>3.</strong> <strong>数据库缓冲池(buffer pool)</strong></h4>\r\n<p data-v-md-line=\"91\"><code>InnoDB</code>存储引擎是以页为单位来管理存储空间的，我们进行的增删改查操作其实本质上都是在访问页面（包括读页面、写页面、创建新页面等操作）。而磁盘 I/O 需要消耗的时间很多，而在内存中进行操作，效率则会高很多，为了能让数据表或者索引中的数据随时被我们所用，DBMS 会申请<code>占用内存来作为数据缓冲池</code>，在真正访问页面之前，需要把在磁盘上的页缓存到内存中的<code>Buffer Pool</code>之后才可以访问。</p>\r\n<p data-v-md-line=\"93\">这样做的好处是可以让磁盘活动最小化，从而<code>减少与磁盘直接进行 I/O 的时间</code>。要知道，这种策略对提升 SQL 语句的查询性能来说至关重要。如果索引的数据在缓冲池里，那么访问的成本就会降低很多。</p>\r\n<h5 data-v-md-heading=\"_3-1-缓冲池-vs-查询缓存\" data-v-md-line=\"95\"><strong>3.1</strong> <strong>缓冲池</strong> <strong>vs</strong> <strong>查询缓存</strong></h5>\r\n<p data-v-md-line=\"97\"><strong>1.</strong> <strong>缓冲池（Buffer Pool）</strong></p>\r\n<p data-v-md-line=\"99\"><img src=\"https://cdn.jsdelivr.net/gh/aoshihuankong/cloudimg@master/img/202203291155004.png\" alt=\"image-20220329115517901\"></p>\r\n<p data-v-md-line=\"101\">从图中，你能看到 InnoDB 缓冲池包括了数据页、索引页、插入缓冲、锁信息、自适应 Hash 和数据字典信息等。</p>\r\n<p data-v-md-line=\"103\"><strong>缓存原则：</strong></p>\r\n<p data-v-md-line=\"105\">“<code>位置 * 频次</code>”这个原则，可以帮我们对 I/O 访问效率进行优化。</p>\r\n<p data-v-md-line=\"107\">首先，位置决定效率，提供缓冲池就是为了在内存中可以直接访问数据。</p>\r\n<p data-v-md-line=\"109\">其次，频次决定优先级顺序。因为缓冲池的大小是有限的，比如磁盘有 200G，但是内存只有 16G，缓冲池大小只有 1G，就无法将所有数据都加载到缓冲池里，这时就涉及到优先级顺序，会<code>优先对使用频次高的热数据进行加载</code>。</p>\r\n<p data-v-md-line=\"111\"><strong>2.</strong> <strong>查询缓存</strong></p>\r\n<p data-v-md-line=\"113\">查询缓存是提前把<code>查询结果缓存</code>起来，这样下次不需要执行就可以直接拿到结果。需要说明的是，在MySQL 中的查询缓存，不是缓存查询计划，而是查询对应的结果。因为命中条件苛刻，而且只要数据表发生变化，查询缓存就会失效，因此命中率低。</p>\r\n<h5 data-v-md-heading=\"_3-2-缓冲池如何读取数据\" data-v-md-line=\"115\"><strong>3.2</strong> <strong>缓冲池如何读取数据</strong></h5>\r\n<p data-v-md-line=\"117\">缓冲池管理器会尽量将经常使用的数据保存起来，在数据库进行页面读操作的时候，首先会判断该页面是否在缓冲池中，如果存在就直接读取，如果不存在，就会通过内存或磁盘将页面存放到缓冲池中再进行读取。</p>\r\n<p data-v-md-line=\"119\"><img src=\"https://cdn.jsdelivr.net/gh/aoshihuankong/cloudimg@master/img/202203291159111.png\" alt=\"image-20220329115958009\"></p>\r\n<h5 data-v-md-heading=\"_3-3-查看-设置缓冲池的大小\" data-v-md-line=\"121\"><strong>3.3</strong> <strong>查看/设置缓冲池的大小</strong></h5>\r\n<p data-v-md-line=\"123\">查看缓冲池的大小</p>\r\n<div data-v-md-line=\"125\"><div class=\"v-md-pre-wrapper v-md-pre-wrapper-mysql extra-class\"><pre class=\"v-md-hljs-mysql\"><code>show variables like \'innodb_buffer_pool_size\';\r\n</code></pre>\r\n</div></div><p data-v-md-line=\"129\">设置缓冲池的大小</p>\r\n<div data-v-md-line=\"131\"><div class=\"v-md-pre-wrapper v-md-pre-wrapper-mysql extra-class\"><pre class=\"v-md-hljs-mysql\"><code>set global innodb_buffer_pool_size = 268435456;\r\n</code></pre>\r\n</div></div><p data-v-md-line=\"135\">或者</p>\r\n<div data-v-md-line=\"137\"><div class=\"v-md-pre-wrapper v-md-pre-wrapper-ini extra-class\"><pre class=\"v-md-hljs-ini\"><code><span class=\"hljs-section\">[server]</span> \r\n<span class=\"hljs-attr\">innodb_buffer_pool_size</span> = <span class=\"hljs-number\">268435456</span>\r\n</code></pre>\r\n</div></div><h5 data-v-md-heading=\"_3-4-多个buffer-pool实例\" data-v-md-line=\"142\"><strong>3.4</strong> <strong>多个Buffer Pool实例</strong></h5>\r\n<div data-v-md-line=\"144\"><div class=\"v-md-pre-wrapper v-md-pre-wrapper-ini extra-class\"><pre class=\"v-md-hljs-ini\"><code><span class=\"hljs-section\">[server]</span> \r\n<span class=\"hljs-attr\">innodb_buffer_pool_instances</span> = <span class=\"hljs-number\">2</span>\r\n</code></pre>\r\n</div></div><p data-v-md-line=\"149\">何查看缓冲池的个数</p>\r\n<div data-v-md-line=\"151\"><div class=\"v-md-pre-wrapper v-md-pre-wrapper-mysql extra-class\"><pre class=\"v-md-hljs-mysql\"><code>show variables like \'innodb_buffer_pool_instances\';\r\n</code></pre>\r\n</div></div><p data-v-md-line=\"155\">每个<code>Buffer Pool</code>实例实际占内存空间</p>\r\n<div data-v-md-line=\"157\"><div class=\"v-md-pre-wrapper v-md-pre-wrapper- extra-class\"><pre class=\"v-md-hljs-\"><code>innodb_buffer_pool_size/innodb_buffer_pool_instances\r\n</code></pre>\r\n</div></div><h3 data-v-md-heading=\"\" data-v-md-line=\"161\"></h3>\r\n', '##### **1.1** **第1层：连接层**\r\n\r\n系统（客户端）访问`MySQL`服务器前，做的第一件事就是建立`TCP`连接。\r\n\r\n经过三次握手建立连接成功后，`MySQL`服务器对`TCP`传输过来的账号密码做身份认证、权限获取。\r\n\r\n- **用户名或密码不对，会收到一个Access denied for user错误，客户端程序结束执行**\r\n- **用户名密码认证通过，会从权限表查出账号拥有的权限与连接关联，之后的权限判断逻辑，都将依赖于此时读到的权限**\r\n\r\n`TCP`连接收到请求后，必须要分配给一个线程专门与这个客户端的交互。所以还会有个线程池，去走后面的流程。每一个连接从线程池中获取线程，省去了创建和销毁线程的开销。\r\n\r\n##### **1.2** **第2层：服务层**\r\n\r\n- **SQL Interface: SQL接口**\r\n\r\n  - 接收用户的SQL命令，并且返回用户需要查询的结果。比如SELECT ... FROM就是调用SQL Interface \r\n  - MySQL支持DML（数据操作语言）、DDL（数据定义语言）、存储过程、视图、触发器、自定义函数等多种SQL语言接口\r\n\r\n- **Parser:** **解析器**\r\n\r\n  - 在解析器中对 SQL 语句进行语法分析、语义分析。将SQL语句分解成数据结构，并将这个结构传递到后续步骤，以后SQL语句的传递和处理就是基于这个结构的。如果在分解构成中遇到错误，那么就说明这个SQL语句是不合理的。\r\n  - 在SQL命令传递到解析器的时候会被解析器验证和解析，并为其创建`语法树`，并根据数据字典丰富查询语法树，会`验证该客户端是否具有执行该查询的权限`。创建好语法树后，MySQL还会对SQL查询进行语法上的优化，进行查询重写。\r\n\r\n- **Optimizer:** **查询优化器**\r\n\r\n  - SQL语句在语法解析之后、查询之前会使用查询优化器确定 SQL 语句的执行路径，生成一个`执行计划`。\r\n  - 这个执行计划表明应该`使用哪些索引`进行查询（全表检索还是使用索引检索），表之间的连接顺序如何，最后会按照执行计划中的步骤调用存储引擎提供的方法来真正的执行查询，并将查询结果返回给用户。\r\n  - 它使用“`选取-投影-连接`”策略进行查询。例如：\r\n\r\n  ```mysql\r\n  SELECT id,name FROM student WHERE gender = \'女\';\r\n  ```\r\n\r\n  这个SELECT查询先根据WHERE语句进行`选取`，而不是将表全部查询出来以后再进行gender过滤。 这个SELECT查询先根据id和name进行属性`投影`，而不是将属性全部取出以后再进行过滤，将这两个查询条件`连接`起来生成最终查询结果。\r\n\r\n- **Caches & Buffers： 查询缓存组件**\r\n\r\n  - MySQL内部维持着一些Cache和Buffer，比如Query Cache用来缓存一条SELECT语句的执行结果，如果能够在其中找到对应的查询结果，那么就不必再进行查询解析、优化和执行的整个过程了，直接将结果反馈给客户端。\r\n  - 这个缓存机制是由一系列小缓存组成的。比如表缓存，记录缓存，key缓存，权限缓存等 。\r\n  - 这个查询缓存可以在`不同客户端之间共享`。 \r\n  - 从MySQL 5.7.20开始，不推荐使用查询缓存，并在`MySQL 8.0中删除`。\r\n\r\n##### **1.3** **第3层：引擎层**\r\n\r\n插件式存储引擎层（ Storage Engines），**真正的负责了MySQL中数据的存储和提取，对物理服务器级别维护的底层数据执行操作**，服务层通过API与存储引擎进行通信。\r\n\r\n##### **1.4** **小结**\r\n\r\n![image-20220329113126234](https://cdn.jsdelivr.net/gh/aoshihuankong/cloudimg@master/img/202203291131321.png)\r\n\r\n简化为三层结构：\r\n\r\n1. 连接层：客户端和服务器端建立连接，客户端发送 SQL 至服务器端；\r\n\r\n2. SQL 层（服务层）：对 SQL 语句进行查询处理；与数据库文件的存储方式无关；\r\n\r\n3. 存储引擎层：与数据库文件打交道，负责数据的存储和读取。\r\n\r\n#### **2. SQL执行流程**\r\n\r\n##### **2.1 MySQL** **中的** **SQL执行流程**\r\n\r\n![image-20220329113337008](https://cdn.jsdelivr.net/gh/aoshihuankong/cloudimg@master/img/202203291133116.png)\r\n\r\n**MySQL的查询流程：**\r\n\r\n**1.** **查询缓存**：Server 如果在查询缓存中发现了这条 SQL 语句，就会直接将结果返回给客户端；如果没有，就进入到解析器阶段。需要说明的是，因为查询缓存往往效率不高，所以在 MySQL8.0 之后就抛弃了这个功能。\r\n\r\n查询缓存是提前把查询结果缓存起来，这样下次不需要执行就可以直接拿到结果。需要说明的是，在MySQL 中的查询缓存，不是缓存查询计划，而是查询对应的结果。这就意味着查询匹配的`鲁棒性大大降低`，只有`相同的查询操作才会命中查询缓存`。两个查询请求在任何字符上的不同（例如：空格、注释、大小写），都会导致缓存不会命中。因此 MySQL 的 查询缓存命中率不高 。\r\n\r\n同时，如果查询请求中包含某些系统函数、用户自定义变量和函数、一些系统表，如 mysql、 information_schema、 performance_schema 数据库中的表，那这个请求就不会被缓存。\r\n\r\n此外，既然是缓存，那就有它`缓存失效的时候`。MySQL的缓存系统会监测涉及到的每张表，只要该表的结构或者数据被修改，如对该表使用了`INSERT`、`UPDATE`、`DELETE`、`TRUNCATE TABLE`、`ALTER TABLE`、`DROP TABLE`或`DROP DATABASE`语句，那使用该表的所有高速缓存查询都将变为无效并从高速缓存中删除！对于`更新压力大的数据库`来说，查询缓存的命中率会非常低。\r\n\r\n**2.** **解析器**：在解析器中对 SQL 语句进行语法分析、语义分析。\r\n\r\n分析器先做“`词法分析`”。你输入的是由多个字符串和空格组成的一条 SQL 语句，MySQL 需要识别出里面的字符串分别是什么，代表什么。 MySQL 从你输入的\"select\"这个关键字识别出来，这是一个查询语句。它也要把字符串“T”识别成“表名 T”，把字符串“ID”识别成“列 ID”。\r\n\r\n接着，要做“`语法分析`”。根据词法分析的结果，语法分析器（比如：Bison）会根据语法规则，判断你输入的这个 SQL 语句是否`满足 MySQL 语法`。如果SQL语句正确，则会生成一个语法树。\r\n\r\n**3.** **优化器**：在优化器中会确定 SQL 语句的执行路径，比如是根据`全表检索`，还是根据`索引检索`等。在查询优化器中，可以分为`逻辑查询`优化阶段和`物理查询`优化阶段。\r\n\r\n**4.** **执行器**：在执行之前需要判断该用户是否`具备权限`。如果没有，就会返回权限错误。如果具备权限，就执行 SQL查询并返回结果。在 MySQL8.0 以下的版本，如果设置了查询缓存，这时会将查询结果进行缓存。\r\n\r\n![image-20220329114541991](https://cdn.jsdelivr.net/gh/aoshihuankong/cloudimg@master/img/202203291145074.png)\r\n\r\nSQL 语句在 MySQL 中的流程是： SQL语句→查询缓存→解析器→优化器→执行器 。\r\n\r\n#### **3.** **数据库缓冲池(buffer pool)**\r\n\r\n`InnoDB`存储引擎是以页为单位来管理存储空间的，我们进行的增删改查操作其实本质上都是在访问页面（包括读页面、写页面、创建新页面等操作）。而磁盘 I/O 需要消耗的时间很多，而在内存中进行操作，效率则会高很多，为了能让数据表或者索引中的数据随时被我们所用，DBMS 会申请`占用内存来作为数据缓冲池`，在真正访问页面之前，需要把在磁盘上的页缓存到内存中的`Buffer Pool`之后才可以访问。\r\n\r\n这样做的好处是可以让磁盘活动最小化，从而`减少与磁盘直接进行 I/O 的时间`。要知道，这种策略对提升 SQL 语句的查询性能来说至关重要。如果索引的数据在缓冲池里，那么访问的成本就会降低很多。\r\n\r\n##### **3.1** **缓冲池** **vs** **查询缓存**\r\n\r\n**1.** **缓冲池（Buffer Pool）**\r\n\r\n![image-20220329115517901](https://cdn.jsdelivr.net/gh/aoshihuankong/cloudimg@master/img/202203291155004.png)\r\n\r\n从图中，你能看到 InnoDB 缓冲池包括了数据页、索引页、插入缓冲、锁信息、自适应 Hash 和数据字典信息等。\r\n\r\n**缓存原则：**\r\n\r\n“`位置 * 频次`”这个原则，可以帮我们对 I/O 访问效率进行优化。\r\n\r\n首先，位置决定效率，提供缓冲池就是为了在内存中可以直接访问数据。\r\n\r\n其次，频次决定优先级顺序。因为缓冲池的大小是有限的，比如磁盘有 200G，但是内存只有 16G，缓冲池大小只有 1G，就无法将所有数据都加载到缓冲池里，这时就涉及到优先级顺序，会`优先对使用频次高的热数据进行加载`。\r\n\r\n**2.** **查询缓存**\r\n\r\n查询缓存是提前把`查询结果缓存`起来，这样下次不需要执行就可以直接拿到结果。需要说明的是，在MySQL 中的查询缓存，不是缓存查询计划，而是查询对应的结果。因为命中条件苛刻，而且只要数据表发生变化，查询缓存就会失效，因此命中率低。\r\n\r\n##### **3.2** **缓冲池如何读取数据**\r\n\r\n缓冲池管理器会尽量将经常使用的数据保存起来，在数据库进行页面读操作的时候，首先会判断该页面是否在缓冲池中，如果存在就直接读取，如果不存在，就会通过内存或磁盘将页面存放到缓冲池中再进行读取。\r\n\r\n![image-20220329115958009](https://cdn.jsdelivr.net/gh/aoshihuankong/cloudimg@master/img/202203291159111.png)\r\n\r\n##### **3.3** **查看/设置缓冲池的大小**\r\n\r\n查看缓冲池的大小\r\n\r\n```mysql\r\nshow variables like \'innodb_buffer_pool_size\';\r\n```\r\n\r\n设置缓冲池的大小\r\n\r\n```mysql\r\nset global innodb_buffer_pool_size = 268435456;\r\n```\r\n\r\n或者\r\n\r\n```ini\r\n[server] \r\ninnodb_buffer_pool_size = 268435456\r\n```\r\n\r\n##### **3.4** **多个Buffer Pool实例**\r\n\r\n```ini\r\n[server] \r\ninnodb_buffer_pool_instances = 2\r\n```\r\n\r\n何查看缓冲池的个数\r\n\r\n```mysql\r\nshow variables like \'innodb_buffer_pool_instances\';\r\n```\r\n\r\n每个`Buffer Pool`实例实际占内存空间\r\n\r\n```\r\ninnodb_buffer_pool_size/innodb_buffer_pool_instances\r\n```\r\n\r\n### ', 0, '缓冲池管理器会尽量将经常使用的数据保存起来，在数据库进行页面读操作的时候，首先会判断该页面是否在缓冲池中，如果存在就直接读取，如果不存在，就会通过内存或磁盘将页面存放到缓冲池中再进行读取。', '2023-05-14 21:10:58', '2023-05-30 07:52:16', 2, 0, 0, 0, 0, NULL, 1, 3, NULL);
INSERT INTO `forum_article` VALUES ('OlCSNpv6zq6i72O', 10030, 'mysql', 10029, '其他', '3058131375', 'niubi', '未知', 'mysql基础篇2', '202305/cpchkRkROH1rgaB.jpg', '<h4 data-v-md-heading=\"_3-mysql登录\" data-v-md-line=\"1\"><strong>3. MySQL登录</strong></h4>\r\n<h5 data-v-md-heading=\"_3-1-首次登录\" data-v-md-line=\"3\"><strong>3.1</strong> <strong>首次登录</strong></h5>\r\n<p data-v-md-line=\"5\">通过<code>mysql -hlocalhost -P3306 -uroot -p</code>进行登录，在Enter password：录入初始化密码</p>\r\n<h5 data-v-md-heading=\"_3-2-修改密码\" data-v-md-line=\"7\"><strong>3.2</strong> <strong>修改密码</strong></h5>\r\n<div data-v-md-line=\"9\"><div class=\"v-md-pre-wrapper v-md-pre-wrapper-mysql extra-class\"><pre class=\"v-md-hljs-mysql\"><code>ALTER USER \'root\'@\'localhost\' IDENTIFIED BY \'new_password\';\r\n</code></pre>\r\n</div></div><h5 data-v-md-heading=\"_3-3-设置远程登录\" data-v-md-line=\"13\"><strong>3.3</strong> <strong>设置远程登录</strong></h5>\r\n<p data-v-md-line=\"15\"><strong>1.</strong> <strong>确认网络</strong></p>\r\n<p data-v-md-line=\"17\">1.在远程机器上使用ping ip地址<code>保证网络畅通</code></p>\r\n<p data-v-md-line=\"19\">2.在远程机器上使用telnet命令<code>保证端口号开放</code>访问</p>\r\n<p data-v-md-line=\"21\"><strong>2.</strong> <strong>关闭防火墙或开放端口</strong></p>\r\n<p data-v-md-line=\"23\"><strong>方式一：关闭防火墙</strong></p>\r\n<ul data-v-md-line=\"25\">\r\n<li>CentOS6 ：</li>\r\n</ul>\r\n<div data-v-md-line=\"27\"><div class=\"v-md-pre-wrapper v-md-pre-wrapper-shell extra-class\"><pre class=\"v-md-hljs-shell\"><code>service iptables stop\r\n</code></pre>\r\n</div></div><ul data-v-md-line=\"31\">\r\n<li>CentOS7：</li>\r\n</ul>\r\n<div data-v-md-line=\"33\"><div class=\"v-md-pre-wrapper v-md-pre-wrapper-shell extra-class\"><pre class=\"v-md-hljs-shell\"><code><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">开启防火墙</span>\r\nsystemctl start firewalld.service\r\n<span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">查看防火墙状态</span>\r\nsystemctl status firewalld.service\r\n<span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">关闭防火墙</span>\r\nsystemctl stop firewalld.service\r\n<span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">设置开机启用防火墙</span> \r\nsystemctl enable firewalld.service \r\n<span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">设置开机禁用防火墙</span> \r\nsystemctl disable firewalld.service\r\n</code></pre>\r\n</div></div><p data-v-md-line=\"46\"><strong>方式二：开放端口</strong></p>\r\n<ul data-v-md-line=\"48\">\r\n<li>查看开放的端口号</li>\r\n</ul>\r\n<div data-v-md-line=\"50\"><div class=\"v-md-pre-wrapper v-md-pre-wrapper-shell extra-class\"><pre class=\"v-md-hljs-shell\"><code>firewall-cmd --list-all\r\n</code></pre>\r\n</div></div><ul data-v-md-line=\"54\">\r\n<li>设置开放的端口号</li>\r\n</ul>\r\n<div data-v-md-line=\"56\"><div class=\"v-md-pre-wrapper v-md-pre-wrapper-shell extra-class\"><pre class=\"v-md-hljs-shell\"><code>firewall-cmd --add-service=http --permanent\r\nfirewall-cmd --add-port=3306/tcp --permanent\r\n</code></pre>\r\n</div></div><ul data-v-md-line=\"61\">\r\n<li>重启防火墙</li>\r\n</ul>\r\n<div data-v-md-line=\"63\"><div class=\"v-md-pre-wrapper v-md-pre-wrapper-shell extra-class\"><pre class=\"v-md-hljs-shell\"><code>firewall-cmd --reload\r\n</code></pre>\r\n</div></div><h4 data-v-md-heading=\"_4-linux下修改配置\" data-v-md-line=\"67\"><strong>4. Linux下修改配置</strong></h4>\r\n<ul data-v-md-line=\"69\">\r\n<li>修改允许远程登陆</li>\r\n</ul>\r\n<div data-v-md-line=\"71\"><div class=\"v-md-pre-wrapper v-md-pre-wrapper-mysql extra-class\"><pre class=\"v-md-hljs-mysql\"><code>use mysql;\r\nselect Host,User from user;\r\nupdate user set host = \'%\' where user =\'root\';\r\nflush privileges;\r\n</code></pre>\r\n</div></div><blockquote data-v-md-line=\"78\">\r\n<p data-v-md-line=\"78\"><code>%</code>是个 通配符 ，如果Host=192.168.1.%，那么就表示只要是IP地址前缀为“192.168.1.”的客户端都可以连接。如果<code>Host=%</code>，表示所有IP都有连接权限。</p>\r\n<p data-v-md-line=\"80\">注意：在生产环境下不能为了省事将host设置为%，这样做会存在安全问题，具体的设置可以根据生产环境的IP进行设置。</p>\r\n</blockquote>\r\n<p data-v-md-line=\"82\">配置新连接报错：错误号码 2058，分析是 mysql 密码加密方法变了。</p>\r\n<p data-v-md-line=\"84\">**解决方法一：**升级远程连接工具版本</p>\r\n<p data-v-md-line=\"86\"><strong>解决方法二：</strong></p>\r\n<div data-v-md-line=\"88\"><div class=\"v-md-pre-wrapper v-md-pre-wrapper-mysql extra-class\"><pre class=\"v-md-hljs-mysql\"><code>ALTER USER \'root\'@\'%\' IDENTIFIED WITH mysql_native_password BY \'abc123\';\r\n</code></pre>\r\n</div></div><h4 data-v-md-heading=\"_5-字符集的相关操作\" data-v-md-line=\"92\"><strong>5.</strong> <strong>字符集的相关操作</strong></h4>\r\n<h5 data-v-md-heading=\"_5-1-各级别的字符集\" data-v-md-line=\"94\"><strong>5.1</strong> <strong>各级别的字符集</strong></h5>\r\n<div data-v-md-line=\"96\"><div class=\"v-md-pre-wrapper v-md-pre-wrapper-mysql extra-class\"><pre class=\"v-md-hljs-mysql\"><code>show variables like \'character%\';\r\n</code></pre>\r\n</div></div><ul data-v-md-line=\"100\">\r\n<li>character_set_server：服务器级别的字符集</li>\r\n<li>character_set_database：当前数据库的字符集</li>\r\n<li>character_set_client：服务器解码请求时使用的字符集</li>\r\n<li>character_set_connection：服务器处理请求时会把请求字符串从character_set_client转为character_set_connection</li>\r\n<li>character_set_results：服务器向客户端返回数据时使用的字符集</li>\r\n</ul>\r\n<p data-v-md-line=\"106\"><strong>小结</strong></p>\r\n<ul data-v-md-line=\"108\">\r\n<li>如果<code>创建或修改列</code>时没有显式的指定字符集和比较规则，则该列<code>默认用表的</code>字符集和比较规则</li>\r\n<li>如果<code>创建表时</code>没有显式的指定字符集和比较规则，则该表<code>默认用数据库的</code>字符集和比较规则</li>\r\n<li>如果<code>创建数据库时</code>没有显式的指定字符集和比较规则，则该数据库<code>默认用服务器的</code>字符集和比较规则</li>\r\n</ul>\r\n<h5 data-v-md-heading=\"_5-2-请求到响应过程中字符集的变化\" data-v-md-line=\"112\"><strong>5.2</strong> <strong>请求到响应过程中字符集的变化</strong></h5>\r\n<div data-v-md-line=\"114\"><div class=\"v-md-pre-wrapper v-md-pre-wrapper-mermaid extra-class\"><pre class=\"v-md-hljs-mermaid\"><code>graph TB\r\nA(客户端) --&gt; |&quot;使用操作系统的字符集编码请求字符串&quot;| B(从character_set_client转换为character_set_connection)\r\nB --&gt; C(从character_set_connection转换为具体的列使用的字符集)\r\nC --&gt; D(将查询结果从具体的列上使用的字符集转换为character_set_results)\r\nD --&gt; |&quot;使用操作系统的字符集解码响应的字符串&quot;| A\r\n\r\n</code></pre>\r\n</div></div><h3 data-v-md-heading=\"\" data-v-md-line=\"123\"></h3>\r\n', '#### **3. MySQL登录**\r\n\r\n##### **3.1** **首次登录**\r\n\r\n通过`mysql -hlocalhost -P3306 -uroot -p`进行登录，在Enter password：录入初始化密码\r\n\r\n##### **3.2** **修改密码**\r\n\r\n```mysql\r\nALTER USER \'root\'@\'localhost\' IDENTIFIED BY \'new_password\';\r\n```\r\n\r\n##### **3.3** **设置远程登录**\r\n\r\n**1.** **确认网络** \r\n\r\n1.在远程机器上使用ping ip地址`保证网络畅通`\r\n\r\n2.在远程机器上使用telnet命令`保证端口号开放`访问\r\n\r\n**2.** **关闭防火墙或开放端口**\r\n\r\n**方式一：关闭防火墙**\r\n\r\n- CentOS6 ：\r\n\r\n```shell\r\nservice iptables stop\r\n```\r\n\r\n- CentOS7：\r\n\r\n```shell\r\n#开启防火墙\r\nsystemctl start firewalld.service\r\n#查看防火墙状态\r\nsystemctl status firewalld.service\r\n#关闭防火墙\r\nsystemctl stop firewalld.service\r\n#设置开机启用防火墙 \r\nsystemctl enable firewalld.service \r\n#设置开机禁用防火墙 \r\nsystemctl disable firewalld.service\r\n```\r\n\r\n**方式二：开放端口**\r\n\r\n- 查看开放的端口号\r\n\r\n```shell\r\nfirewall-cmd --list-all\r\n```\r\n\r\n- 设置开放的端口号\r\n\r\n```shell\r\nfirewall-cmd --add-service=http --permanent\r\nfirewall-cmd --add-port=3306/tcp --permanent\r\n```\r\n\r\n- 重启防火墙\r\n\r\n```shell\r\nfirewall-cmd --reload\r\n```\r\n\r\n#### **4. Linux下修改配置**\r\n\r\n- 修改允许远程登陆\r\n\r\n```mysql\r\nuse mysql;\r\nselect Host,User from user;\r\nupdate user set host = \'%\' where user =\'root\';\r\nflush privileges;\r\n```\r\n\r\n> `%`是个 通配符 ，如果Host=192.168.1.%，那么就表示只要是IP地址前缀为“192.168.1.”的客户端都可以连接。如果`Host=%`，表示所有IP都有连接权限。\r\n>\r\n> 注意：在生产环境下不能为了省事将host设置为%，这样做会存在安全问题，具体的设置可以根据生产环境的IP进行设置。\r\n\r\n配置新连接报错：错误号码 2058，分析是 mysql 密码加密方法变了。\r\n\r\n**解决方法一：**升级远程连接工具版本\r\n\r\n**解决方法二：**\r\n\r\n```mysql\r\nALTER USER \'root\'@\'%\' IDENTIFIED WITH mysql_native_password BY \'abc123\';\r\n```\r\n\r\n#### **5.** **字符集的相关操作**\r\n\r\n##### **5.1** **各级别的字符集**\r\n\r\n```mysql\r\nshow variables like \'character%\';\r\n```\r\n\r\n- character_set_server：服务器级别的字符集\r\n- character_set_database：当前数据库的字符集\r\n- character_set_client：服务器解码请求时使用的字符集\r\n- character_set_connection：服务器处理请求时会把请求字符串从character_set_client转为character_set_connection \r\n- character_set_results：服务器向客户端返回数据时使用的字符集\r\n\r\n**小结**\r\n\r\n- 如果`创建或修改列`时没有显式的指定字符集和比较规则，则该列`默认用表的`字符集和比较规则\r\n- 如果`创建表时`没有显式的指定字符集和比较规则，则该表`默认用数据库的`字符集和比较规则\r\n- 如果`创建数据库时`没有显式的指定字符集和比较规则，则该数据库`默认用服务器的`字符集和比较规则\r\n\r\n##### **5.2** **请求到响应过程中字符集的变化**\r\n\r\n```mermaid\r\ngraph TB\r\nA(客户端) --> |\"使用操作系统的字符集编码请求字符串\"| B(从character_set_client转换为character_set_connection)\r\nB --> C(从character_set_connection转换为具体的列使用的字符集)\r\nC --> D(将查询结果从具体的列上使用的字符集转换为character_set_results)\r\nD --> |\"使用操作系统的字符集解码响应的字符串\"| A\r\n\r\n```\r\n\r\n### ', 0, '如果创建或修改列时没有显式的指定字符集和比较规则，则该列默认用表的字符集和比较规则\r\n如果创建表时没有显式的指定字符集和比较规则，则该表默认用数据库的字符集和比较规则\r\n如果创建数据库时没有显式的指定字符集和比较规则，则该数据库默认用服务', '2023-05-14 18:35:50', '2023-05-15 10:02:01', 0, 2, 2, 2, 0, 0, -1, 2, NULL);
INSERT INTO `forum_article` VALUES ('op9EpLTqcM3NjI6', 10030, 'mysql', 10029, '其他', '3058131375', 'niubi', '未知', 'mysql基础篇2', '202305/dlUUja6C8J6eEGq.jpg', '<h4 data-v-md-heading=\"_3-mysql登录\" data-v-md-line=\"1\"><strong>3. MySQL登录</strong></h4>\r\n<h5 data-v-md-heading=\"_3-1-首次登录\" data-v-md-line=\"3\"><strong>3.1</strong> <strong>首次登录</strong></h5>\r\n<p data-v-md-line=\"5\">通过<code>mysql -hlocalhost -P3306 -uroot -p</code>进行登录，在Enter password：录入初始化密码</p>\r\n<h5 data-v-md-heading=\"_3-2-修改密码\" data-v-md-line=\"7\"><strong>3.2</strong> <strong>修改密码</strong></h5>\r\n<div data-v-md-line=\"9\"><div class=\"v-md-pre-wrapper v-md-pre-wrapper-mysql extra-class\"><pre class=\"v-md-hljs-mysql\"><code>ALTER USER \'root\'@\'localhost\' IDENTIFIED BY \'new_password\';\r\n</code></pre>\r\n</div></div><h5 data-v-md-heading=\"_3-3-设置远程登录\" data-v-md-line=\"13\"><strong>3.3</strong> <strong>设置远程登录</strong></h5>\r\n<p data-v-md-line=\"15\"><strong>1.</strong> <strong>确认网络</strong></p>\r\n<p data-v-md-line=\"17\">1.在远程机器上使用ping ip地址<code>保证网络畅通</code></p>\r\n<p data-v-md-line=\"19\">2.在远程机器上使用telnet命令<code>保证端口号开放</code>访问</p>\r\n<p data-v-md-line=\"21\"><strong>2.</strong> <strong>关闭防火墙或开放端口</strong></p>\r\n<p data-v-md-line=\"23\"><strong>方式一：关闭防火墙</strong></p>\r\n<ul data-v-md-line=\"25\">\r\n<li>CentOS6 ：</li>\r\n</ul>\r\n<div data-v-md-line=\"27\"><div class=\"v-md-pre-wrapper v-md-pre-wrapper-shell extra-class\"><pre class=\"v-md-hljs-shell\"><code>service iptables stop\r\n</code></pre>\r\n</div></div><ul data-v-md-line=\"31\">\r\n<li>CentOS7：</li>\r\n</ul>\r\n<div data-v-md-line=\"33\"><div class=\"v-md-pre-wrapper v-md-pre-wrapper-shell extra-class\"><pre class=\"v-md-hljs-shell\"><code><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">开启防火墙</span>\r\nsystemctl start firewalld.service\r\n<span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">查看防火墙状态</span>\r\nsystemctl status firewalld.service\r\n<span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">关闭防火墙</span>\r\nsystemctl stop firewalld.service\r\n<span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">设置开机启用防火墙</span> \r\nsystemctl enable firewalld.service \r\n<span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">设置开机禁用防火墙</span> \r\nsystemctl disable firewalld.service\r\n</code></pre>\r\n</div></div><p data-v-md-line=\"46\"><strong>方式二：开放端口</strong></p>\r\n<ul data-v-md-line=\"48\">\r\n<li>查看开放的端口号</li>\r\n</ul>\r\n<div data-v-md-line=\"50\"><div class=\"v-md-pre-wrapper v-md-pre-wrapper-shell extra-class\"><pre class=\"v-md-hljs-shell\"><code>firewall-cmd --list-all\r\n</code></pre>\r\n</div></div><ul data-v-md-line=\"54\">\r\n<li>设置开放的端口号</li>\r\n</ul>\r\n<div data-v-md-line=\"56\"><div class=\"v-md-pre-wrapper v-md-pre-wrapper-shell extra-class\"><pre class=\"v-md-hljs-shell\"><code>firewall-cmd --add-service=http --permanent\r\nfirewall-cmd --add-port=3306/tcp --permanent\r\n</code></pre>\r\n</div></div><ul data-v-md-line=\"61\">\r\n<li>重启防火墙</li>\r\n</ul>\r\n<div data-v-md-line=\"63\"><div class=\"v-md-pre-wrapper v-md-pre-wrapper-shell extra-class\"><pre class=\"v-md-hljs-shell\"><code>firewall-cmd --reload\r\n</code></pre>\r\n</div></div><h4 data-v-md-heading=\"_4-linux下修改配置\" data-v-md-line=\"67\"><strong>4. Linux下修改配置</strong></h4>\r\n<ul data-v-md-line=\"69\">\r\n<li>修改允许远程登陆</li>\r\n</ul>\r\n<div data-v-md-line=\"71\"><div class=\"v-md-pre-wrapper v-md-pre-wrapper-mysql extra-class\"><pre class=\"v-md-hljs-mysql\"><code>use mysql;\r\nselect Host,User from user;\r\nupdate user set host = \'%\' where user =\'root\';\r\nflush privileges;\r\n</code></pre>\r\n</div></div><blockquote data-v-md-line=\"78\">\r\n<p data-v-md-line=\"78\"><code>%</code>是个 通配符 ，如果Host=192.168.1.%，那么就表示只要是IP地址前缀为“192.168.1.”的客户端都可以连接。如果<code>Host=%</code>，表示所有IP都有连接权限。</p>\r\n<p data-v-md-line=\"80\">注意：在生产环境下不能为了省事将host设置为%，这样做会存在安全问题，具体的设置可以根据生产环境的IP进行设置。</p>\r\n</blockquote>\r\n<p data-v-md-line=\"82\">配置新连接报错：错误号码 2058，分析是 mysql 密码加密方法变了。</p>\r\n<p data-v-md-line=\"84\">**解决方法一：**升级远程连接工具版本</p>\r\n<p data-v-md-line=\"86\"><strong>解决方法二：</strong></p>\r\n<div data-v-md-line=\"88\"><div class=\"v-md-pre-wrapper v-md-pre-wrapper-mysql extra-class\"><pre class=\"v-md-hljs-mysql\"><code>ALTER USER \'root\'@\'%\' IDENTIFIED WITH mysql_native_password BY \'abc123\';\r\n</code></pre>\r\n</div></div><h4 data-v-md-heading=\"_5-字符集的相关操作\" data-v-md-line=\"92\"><strong>5.</strong> <strong>字符集的相关操作</strong></h4>\r\n<h5 data-v-md-heading=\"_5-1-各级别的字符集\" data-v-md-line=\"94\"><strong>5.1</strong> <strong>各级别的字符集</strong></h5>\r\n<div data-v-md-line=\"96\"><div class=\"v-md-pre-wrapper v-md-pre-wrapper-mysql extra-class\"><pre class=\"v-md-hljs-mysql\"><code>show variables like \'character%\';\r\n</code></pre>\r\n</div></div><ul data-v-md-line=\"100\">\r\n<li>character_set_server：服务器级别的字符集</li>\r\n<li>character_set_database：当前数据库的字符集</li>\r\n<li>character_set_client：服务器解码请求时使用的字符集</li>\r\n<li>character_set_connection：服务器处理请求时会把请求字符串从character_set_client转为character_set_connection</li>\r\n<li>character_set_results：服务器向客户端返回数据时使用的字符集</li>\r\n</ul>\r\n<p data-v-md-line=\"106\"><strong>小结</strong></p>\r\n<ul data-v-md-line=\"108\">\r\n<li>如果<code>创建或修改列</code>时没有显式的指定字符集和比较规则，则该列<code>默认用表的</code>字符集和比较规则</li>\r\n<li>如果<code>创建表时</code>没有显式的指定字符集和比较规则，则该表<code>默认用数据库的</code>字符集和比较规则</li>\r\n<li>如果<code>创建数据库时</code>没有显式的指定字符集和比较规则，则该数据库<code>默认用服务器的</code>字符集和比较规则</li>\r\n</ul>\r\n<h5 data-v-md-heading=\"_5-2-请求到响应过程中字符集的变化\" data-v-md-line=\"112\"><strong>5.2</strong> <strong>请求到响应过程中字符集的变化</strong></h5>\r\n<div data-v-md-line=\"114\"><div class=\"v-md-pre-wrapper v-md-pre-wrapper-mermaid extra-class\"><pre class=\"v-md-hljs-mermaid\"><code>graph TB\r\nA(客户端) --&gt; |&quot;使用操作系统的字符集编码请求字符串&quot;| B(从character_set_client转换为character_set_connection)\r\nB --&gt; C(从character_set_connection转换为具体的列使用的字符集)\r\nC --&gt; D(将查询结果从具体的列上使用的字符集转换为character_set_results)\r\nD --&gt; |&quot;使用操作系统的字符集解码响应的字符串&quot;| A\r\n\r\n</code></pre>\r\n</div></div><h3 data-v-md-heading=\"\" data-v-md-line=\"123\"></h3>\r\n', '#### **3. MySQL登录**\r\n\r\n##### **3.1** **首次登录**\r\n\r\n通过`mysql -hlocalhost -P3306 -uroot -p`进行登录，在Enter password：录入初始化密码\r\n\r\n##### **3.2** **修改密码**\r\n\r\n```mysql\r\nALTER USER \'root\'@\'localhost\' IDENTIFIED BY \'new_password\';\r\n```\r\n\r\n##### **3.3** **设置远程登录**\r\n\r\n**1.** **确认网络** \r\n\r\n1.在远程机器上使用ping ip地址`保证网络畅通`\r\n\r\n2.在远程机器上使用telnet命令`保证端口号开放`访问\r\n\r\n**2.** **关闭防火墙或开放端口**\r\n\r\n**方式一：关闭防火墙**\r\n\r\n- CentOS6 ：\r\n\r\n```shell\r\nservice iptables stop\r\n```\r\n\r\n- CentOS7：\r\n\r\n```shell\r\n#开启防火墙\r\nsystemctl start firewalld.service\r\n#查看防火墙状态\r\nsystemctl status firewalld.service\r\n#关闭防火墙\r\nsystemctl stop firewalld.service\r\n#设置开机启用防火墙 \r\nsystemctl enable firewalld.service \r\n#设置开机禁用防火墙 \r\nsystemctl disable firewalld.service\r\n```\r\n\r\n**方式二：开放端口**\r\n\r\n- 查看开放的端口号\r\n\r\n```shell\r\nfirewall-cmd --list-all\r\n```\r\n\r\n- 设置开放的端口号\r\n\r\n```shell\r\nfirewall-cmd --add-service=http --permanent\r\nfirewall-cmd --add-port=3306/tcp --permanent\r\n```\r\n\r\n- 重启防火墙\r\n\r\n```shell\r\nfirewall-cmd --reload\r\n```\r\n\r\n#### **4. Linux下修改配置**\r\n\r\n- 修改允许远程登陆\r\n\r\n```mysql\r\nuse mysql;\r\nselect Host,User from user;\r\nupdate user set host = \'%\' where user =\'root\';\r\nflush privileges;\r\n```\r\n\r\n> `%`是个 通配符 ，如果Host=192.168.1.%，那么就表示只要是IP地址前缀为“192.168.1.”的客户端都可以连接。如果`Host=%`，表示所有IP都有连接权限。\r\n>\r\n> 注意：在生产环境下不能为了省事将host设置为%，这样做会存在安全问题，具体的设置可以根据生产环境的IP进行设置。\r\n\r\n配置新连接报错：错误号码 2058，分析是 mysql 密码加密方法变了。\r\n\r\n**解决方法一：**升级远程连接工具版本\r\n\r\n**解决方法二：**\r\n\r\n```mysql\r\nALTER USER \'root\'@\'%\' IDENTIFIED WITH mysql_native_password BY \'abc123\';\r\n```\r\n\r\n#### **5.** **字符集的相关操作**\r\n\r\n##### **5.1** **各级别的字符集**\r\n\r\n```mysql\r\nshow variables like \'character%\';\r\n```\r\n\r\n- character_set_server：服务器级别的字符集\r\n- character_set_database：当前数据库的字符集\r\n- character_set_client：服务器解码请求时使用的字符集\r\n- character_set_connection：服务器处理请求时会把请求字符串从character_set_client转为character_set_connection \r\n- character_set_results：服务器向客户端返回数据时使用的字符集\r\n\r\n**小结**\r\n\r\n- 如果`创建或修改列`时没有显式的指定字符集和比较规则，则该列`默认用表的`字符集和比较规则\r\n- 如果`创建表时`没有显式的指定字符集和比较规则，则该表`默认用数据库的`字符集和比较规则\r\n- 如果`创建数据库时`没有显式的指定字符集和比较规则，则该数据库`默认用服务器的`字符集和比较规则\r\n\r\n##### **5.2** **请求到响应过程中字符集的变化**\r\n\r\n```mermaid\r\ngraph TB\r\nA(客户端) --> |\"使用操作系统的字符集编码请求字符串\"| B(从character_set_client转换为character_set_connection)\r\nB --> C(从character_set_connection转换为具体的列使用的字符集)\r\nC --> D(将查询结果从具体的列上使用的字符集转换为character_set_results)\r\nD --> |\"使用操作系统的字符集解码响应的字符串\"| A\r\n\r\n```\r\n\r\n### ', 0, '如果创建或修改列时没有显式的指定字符集和比较规则，则该列默认用表的字符集和比较规则\r\n如果创建表时没有显式的指定字符集和比较规则，则该表默认用数据库的字符集和比较规则\r\n如果创建数据库时没有显式的指定字符集和比较规则，则该数据库默认用服务', '2023-05-14 18:36:04', '2023-05-14 11:12:35', 0, 0, 0, 0, 0, 0, -1, 2, NULL);
INSERT INTO `forum_article` VALUES ('PW7QQfQXILxF9Wy', 10024, 'Java', 10023, '后端', '8408747315', '猜猜我是谁', '未知', '常见设计模式', '202305/jvUHIAlgYryiq3n.jpeg', '<h1 data-v-md-heading=\"设计模式\" data-v-md-line=\"1\">设计模式</h1>\r\n<h2 data-v-md-heading=\"gof23\" data-v-md-line=\"3\">GoF23</h2>\r\n<ul data-v-md-line=\"5\">\r\n<li>\r\n<p data-v-md-line=\"5\">GoF23</p>\r\n<ul data-v-md-line=\"6\">\r\n<li>一种思维，一种态度，一种进步</li>\r\n</ul>\r\n</li>\r\n<li>\r\n<p data-v-md-line=\"10\">创建型模式：（描述怎么创建一个对象，让对象跟使用分离，简单的说就是省去了new的过程，更方便创建对象）</p>\r\n<ul data-v-md-line=\"11\">\r\n<li>单例模式、工厂模式、抽象工厂模式、建造者模式、原型模式</li>\r\n</ul>\r\n</li>\r\n<li>\r\n<p data-v-md-line=\"12\">结构模式：（让类跟对象按照某种布局组成更大的结构）</p>\r\n<ul data-v-md-line=\"13\">\r\n<li>适配器模式、桥接模式、装饰模式、组合模式、外观模式、享元模式、代理模式</li>\r\n</ul>\r\n</li>\r\n<li>\r\n<p data-v-md-line=\"14\">行为模式：（描述类跟对象直接怎么完成相互协作，共同完成单个对象无法完成的任务）</p>\r\n<ul data-v-md-line=\"15\">\r\n<li>模板方法模式、命令模式、迭代模式、观察者模式、中介者模式、备忘录模式、解释器模式、状态模式、策略模式、职责链模式、访问者模式</li>\r\n</ul>\r\n</li>\r\n</ul>\r\n<h2 data-v-md-heading=\"oop七大原则\" data-v-md-line=\"19\">OOP七大原则</h2>\r\n<ul data-v-md-line=\"21\">\r\n<li>开闭原则：对外扩展开发，对修改关闭</li>\r\n<li>里氏替换原则：继承必须保持超类所拥有的性质在子类中仍然成立</li>\r\n<li>依赖倒置原则：要面向接口编程，不要面向实现编程</li>\r\n<li>单一职责原则：控制类的粒度大小，将对象解耦，提供其内聚性</li>\r\n<li>接口隔离原则：要为各个类建立它们需要的专用接口</li>\r\n<li>迪米特法则：只与你的直接朋友交谈，不跟“陌生人”说话</li>\r\n<li>合成复用原则：尽量先使用组合或者聚合等关联关系来实现，其次才考虑使用继承关系来实现</li>\r\n</ul>\r\n<h2 data-v-md-heading=\"单例模式\" data-v-md-line=\"31\">单例模式</h2>\r\n<p data-v-md-line=\"33\">问：为什么枚举可以避免单例模式被破坏，枚举到底是一个什么样的东西。</p>\r\n<ul data-v-md-line=\"35\">\r\n<li>[ ] ​		搞懂单例模式</li>\r\n<li>[ ] ​		搞懂枚举</li>\r\n</ul>\r\n<h3 data-v-md-heading=\"饿汉式单例\" data-v-md-line=\"38\">饿汉式单例</h3>\r\n<div data-v-md-line=\"40\"><div class=\"v-md-pre-wrapper v-md-pre-wrapper-java extra-class\"><pre class=\"v-md-hljs-java\"><code><span class=\"hljs-keyword\">package</span> com.lihuanzhi.single;\r\n\r\n<span class=\"hljs-comment\">/**\r\n * 饿汉式单例\r\n * 顾名思义：就是很饿，一上来就加载\r\n */</span>\r\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Hungry</span> {\r\n\r\n    <span class=\"hljs-comment\">/**\r\n     * 饿汉式单例一上来就加载了，全部的对象都被加载进来了\r\n     * 如果这些对象耗内存，但是我们又没有使用它，就会很浪费空间资源\r\n     */</span>\r\n    <span class=\"hljs-comment\">//例如下面这段代码</span>\r\n<span class=\"hljs-comment\">//    private byte[] byte1 = new byte[1024*1024];</span>\r\n<span class=\"hljs-comment\">//    private byte[] byte2 = new byte[1024*1024];</span>\r\n<span class=\"hljs-comment\">//    private byte[] byte3 = new byte[1024*1024];</span>\r\n<span class=\"hljs-comment\">//    private byte[] byte4 = new byte[1024*1024];</span>\r\n\r\n\r\n    <span class=\"hljs-comment\">/**\r\n     * 构造器单例，让构造器私有\r\n     * 别人无法new这个对象，保证内存中只有一个对象\r\n     */</span>\r\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-title function_\">Hungry</span><span class=\"hljs-params\">()</span>{\r\n\r\n    }\r\n\r\n    <span class=\"hljs-comment\">//保证只有一个</span>\r\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">Hungry</span> <span class=\"hljs-variable\">HUNGRY</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Hungry</span>();\r\n\r\n    <span class=\"hljs-comment\">//抛出一个对外的方法</span>\r\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> Hungry <span class=\"hljs-title function_\">getInstance</span><span class=\"hljs-params\">()</span>{\r\n        <span class=\"hljs-keyword\">return</span> HUNGRY;\r\n    }\r\n}\r\n\r\n</code></pre>\r\n</div></div><p data-v-md-line=\"79\">饿汉式单例一上来就加载了，全部的对象都被加载进来了<br>\r\n如果这些对象耗内存，但是我们又没有使用它，就会很浪费空间资源</p>\r\n<h3 data-v-md-heading=\"懒汉式\" data-v-md-line=\"84\">懒汉式</h3>\r\n<div data-v-md-line=\"86\"><div class=\"v-md-pre-wrapper v-md-pre-wrapper-java extra-class\"><pre class=\"v-md-hljs-java\"><code><span class=\"hljs-keyword\">package</span> com.lihuanzhi.single;\r\n\r\n<span class=\"hljs-keyword\">import</span> java.lang.reflect.Constructor;\r\n\r\n<span class=\"hljs-comment\">/**\r\n * 懒汉式单例\r\n */</span>\r\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">LazyMan</span> {\r\n\r\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">boolean</span> <span class=\"hljs-variable\">lihuanzhi</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-literal\">false</span>;\r\n\r\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-title function_\">LazyMan</span><span class=\"hljs-params\">()</span>{\r\n        <span class=\"hljs-comment\">/**\r\n         * 步骤1：\r\n         *     添加一把锁，防止破坏单例\r\n         */</span>\r\n        <span class=\"hljs-keyword\">synchronized</span> (LazyMan.class){\r\n            <span class=\"hljs-keyword\">if</span>(lihuanzhi == <span class=\"hljs-literal\">false</span>){\r\n                lihuanzhi = <span class=\"hljs-literal\">true</span>;\r\n            }<span class=\"hljs-keyword\">else</span>{\r\n                <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">RuntimeException</span>(<span class=\"hljs-string\">&quot;不要试图使用反射破坏单例&quot;</span>);\r\n            }\r\n\r\n\r\n<span class=\"hljs-comment\">//            if (lazyMan!=null){</span>\r\n<span class=\"hljs-comment\">//                throw new RuntimeException(&quot;不要试图使用反射破坏单例&quot;);</span>\r\n<span class=\"hljs-comment\">//            }</span>\r\n        }\r\n        System.out.println(Thread.currentThread().getName()+<span class=\"hljs-string\">&quot;ok&quot;</span>);\r\n    }\r\n\r\n<span class=\"hljs-comment\">//    private static LazyMan lazyMan;   volatile解决指令重排问题</span>\r\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">volatile</span> <span class=\"hljs-keyword\">static</span> LazyMan lazyMan;\r\n\r\n    <span class=\"hljs-comment\">/**\r\n     * 这个方法只能在单线程模式下才能生效，如果多线程并发就会出现问题\r\n     * 为了解决这个问题，我们可以给LazyMan这个类添加一把锁\r\n     * <span class=\"hljs-doctag\">@return</span>\r\n     */</span>\r\n    <span class=\"hljs-comment\">//双重检测锁模式（两次判断一把锁）的懒汉式单例    DCL懒汉式</span>\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> LazyMan <span class=\"hljs-title function_\">getInstance</span><span class=\"hljs-params\">()</span>{\r\n        <span class=\"hljs-keyword\">if</span>(lazyMan==<span class=\"hljs-literal\">null</span>){\r\n            <span class=\"hljs-keyword\">synchronized</span> (LazyMan.class){\r\n                <span class=\"hljs-keyword\">if</span>(lazyMan==<span class=\"hljs-literal\">null</span>) {\r\n                    lazyMan = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">LazyMan</span>();    <span class=\"hljs-comment\">//问题：不是一个原子性操作</span>\r\n                    <span class=\"hljs-comment\">/**\r\n                     * 不是原子性操作就会有以下步骤\r\n                     * 1.分配内存空间\r\n                     * 2.执行构造方法，初始化对象\r\n                     * 3.把这个对象指向这个空间\r\n                     *\r\n                     * 我们看着这个一个一步的操作但是在底层要经历几个步骤\r\n                     * 这就有可能会发生指令重排的情况\r\n                     * 我们希望它执行123，但是它可能执行132\r\n                     *\r\n                     * 123\r\n                     * 132 A;\r\n                     *     B 此时lazyMan还没有完成构造，所有得给lazyMan添加一个volatile\r\n                     */</span>\r\n                }\r\n            }\r\n        }\r\n\r\n        <span class=\"hljs-keyword\">return</span> lazyMan;\r\n    }\r\n\r\n\r\n    <span class=\"hljs-comment\">//多线程并发</span>\r\n<span class=\"hljs-comment\">/*    public static void main(String[] args) {\r\n        for (int i=0; i&lt;10; i++){\r\n            new Thread(()-&gt;{\r\n                lazyMan.getInstance();\r\n            }\r\n            ).start();\r\n        }\r\n    }*/</span>\r\n\r\n    <span class=\"hljs-comment\">/**\r\n     * 虽然我们加了双重检测锁，但是还是不安全的，为什么呢？\r\n     * 因为Java里面有一个非常牛逼且霸道的反射\r\n     * 同反射即使是private的变量属性方法都能破坏然后进行调用、修改\r\n     *\r\n     */</span>\r\n\r\n    <span class=\"hljs-comment\">//反射</span>\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> <span class=\"hljs-keyword\">throws</span> Exception {\r\n        <span class=\"hljs-type\">LazyMan</span> <span class=\"hljs-variable\">instance</span> <span class=\"hljs-operator\">=</span> LazyMan.getInstance();\r\n\r\n        Constructor&lt;LazyMan&gt; declaredConstructor = LazyMan.class.getDeclaredConstructor(<span class=\"hljs-literal\">null</span>);\r\n        <span class=\"hljs-comment\">//无视私有的构造器</span>\r\n        declaredConstructor.setAccessible(<span class=\"hljs-literal\">true</span>);\r\n        <span class=\"hljs-comment\">//无视private之后可以通过反射来进行无参构造创建对象</span>\r\n        <span class=\"hljs-type\">LazyMan</span> <span class=\"hljs-variable\">instance2</span> <span class=\"hljs-operator\">=</span> declaredConstructor.newInstance();\r\n\r\n        <span class=\"hljs-comment\">//检测一下instance和instance2是不是一样的，不一样的话就破坏了我们的单例模式</span>\r\n        System.out.println(instance);\r\n        System.out.println(instance2);\r\n        <span class=\"hljs-comment\">/**\r\n         * 结果表示这个两个不是一个对象\r\n         * 结论：反射可以破坏单例\r\n         * 有解决办法：\r\n         *      因为是通过无参的构造方法创建的，所有可以给无参的构造方法添加一把锁\r\n         *      步骤1\r\n         *虽然这个反射破坏单例的问题解决了，但是还是会有问题，\r\n         * 假如我不使用LazyMan.getInstance()创建对象，而是两个对象都使用反射创建\r\n         * 就还是会出现破坏单例的情况\r\n         * 解决办法：\r\n         *       红绿灯，定义一个没有人知道的变量为flase,同步代码块里面创建对象之气判断后在执行\r\n         *       步骤2\r\n         *\r\n         * 即使这样也没有绝对的安全，因为这个红绿灯变量（通过反编译）也是可以通过反射来修改的\r\n         */</span>\r\n    }\r\n}\r\n\r\n</code></pre>\r\n</div></div><h3 data-v-md-heading=\"枚举\" data-v-md-line=\"206\">枚举</h3>\r\n<blockquote data-v-md-line=\"208\">\r\n<p data-v-md-line=\"208\">枚举类里面的无参构造方法其实有两个参数（String,int），使用反射构造器创建对象时记得添加参数，否则不会报出无法<em><strong>通过反射破坏枚举的单例模式（有待考证）</strong></em></p>\r\n</blockquote>\r\n<h2 data-v-md-heading=\"工厂模式\" data-v-md-line=\"214\">工厂模式</h2>\r\n<ul data-v-md-line=\"216\">\r\n<li>\r\n<p data-v-md-line=\"216\">作用</p>\r\n<ul data-v-md-line=\"217\">\r\n<li>实现了创建者和调用者的分离</li>\r\n<li>详细分类\r\n<ul data-v-md-line=\"219\">\r\n<li>简单工厂模式</li>\r\n<li>工厂方法模式</li>\r\n<li>抽象工厂模式</li>\r\n</ul>\r\n</li>\r\n</ul>\r\n</li>\r\n<li>\r\n<p data-v-md-line=\"225\">OOP七大原则：</p>\r\n<ul data-v-md-line=\"226\">\r\n<li>开闭原则：一个软件的实体应当对拓展开放，对修改关闭</li>\r\n<li>依赖倒置原则：要针对接口编程，不要针对实现编程</li>\r\n<li>迪米特法则：只与你直接的朋友通信，而避免和陌生人通信</li>\r\n</ul>\r\n</li>\r\n</ul>\r\n<p data-v-md-line=\"232\">我们创建对象的时候不需要再使用new来创建，我们只需要把其中的创建细节封装到一个工厂类里面，使用一个get()方法来获取工厂帮我们创建好的对象并接收就好了，不再关注其中的细节。</p>\r\n<div data-v-md-line=\"236\"><div class=\"v-md-pre-wrapper v-md-pre-wrapper-java extra-class\"><pre class=\"v-md-hljs-java\"><code>根据设计原则：工厂方法模式;\r\n根据实际业务：简单工厂模式;\r\n\r\n虽然工厂方法模式更符合设计原则，但是其结构、代码、编程、管理的复杂度都不如简单工厂模式\r\n</code></pre>\r\n</div></div><h2 data-v-md-heading=\"抽象工厂模式\" data-v-md-line=\"245\">抽象工厂模式</h2>\r\n<ul data-v-md-line=\"247\">\r\n<li>定义：抽象工厂模式提供了一个创建一系列相关或者相互依赖对象的接口，无需指定它们具体的类</li>\r\n<li>适用场景：\r\n<ul data-v-md-line=\"249\">\r\n<li>客户端（应用层）不依赖于产品类实例如何被创建、实现等细节</li>\r\n<li>强调一系列相关的产品对象（属于同一产品族）一起使用创建对象需要大量的重复的代码</li>\r\n<li>提供一个产品类的库，所有的产品以同样的接口出现，从而使得客户端不依赖于具体的实现</li>\r\n</ul>\r\n</li>\r\n<li>优点：\r\n<ul data-v-md-line=\"253\">\r\n<li>具体产品在应用层的代码隔离，无需关心创建的细节</li>\r\n<li>将一个系列的产品统一到一起创建</li>\r\n</ul>\r\n</li>\r\n<li>缺点：\r\n<ul data-v-md-line=\"256\">\r\n<li>规定了所有可能被创建的产品集合，产品族中拓展新的产品困难</li>\r\n<li>增加了系统的抽象性和理解难度</li>\r\n</ul>\r\n</li>\r\n</ul>\r\n<p data-v-md-line=\"261\">工厂小结：</p>\r\n<ul data-v-md-line=\"263\">\r\n<li>简单工厂：（静态工厂模式）\r\n<ul data-v-md-line=\"264\">\r\n<li>虽然某种程度上不符合设计原则，但实际使用最多</li>\r\n</ul>\r\n</li>\r\n<li>工厂方法模式：\r\n<ul data-v-md-line=\"266\">\r\n<li>不修改已有类的前提下，通过增加新的工程类实现扩展</li>\r\n</ul>\r\n</li>\r\n<li>抽象工厂模式\r\n<ul data-v-md-line=\"268\">\r\n<li>不可以增加产品，可以增加产品族</li>\r\n</ul>\r\n</li>\r\n</ul>\r\n<p data-v-md-line=\"272\">应用场景：</p>\r\n<ul data-v-md-line=\"274\">\r\n<li>JDK中的Galendar的getInstance()</li>\r\n<li>JDBC中的Connection对象获取</li>\r\n<li>Spring中的IOC容器创建管理bean对象</li>\r\n<li>反射中Class对象的newInstance方法</li>\r\n</ul>\r\n<h2 data-v-md-heading=\"建造者模式\" data-v-md-line=\"283\">建造者模式</h2>\r\n<ul data-v-md-line=\"285\">\r\n<li>\r\n<p data-v-md-line=\"285\">建造者模式也属于创建型模式，它提供了一种创建对象的最佳模式。</p>\r\n</li>\r\n<li>\r\n<p data-v-md-line=\"289\">定义：将一个复杂对象的<strong>构建与它的表示分离</strong>，使得同样的构建过程可以创建不同的表示</p>\r\n</li>\r\n<li>\r\n<p data-v-md-line=\"290\">主要作用：在用户不知道对象的建造过程和细节的情况下就可以创建<strong>复杂的对象</strong></p>\r\n</li>\r\n<li>\r\n<p data-v-md-line=\"294\">用户只需要给出指定复杂对象的类型和内容，建造者模式负责按顺序创建复杂对象（把内部的建造过程和细节隐藏起来）</p>\r\n</li>\r\n<li>\r\n<p data-v-md-line=\"298\">例子：</p>\r\n<ul data-v-md-line=\"299\">\r\n<li>工厂（建造者模式）：负责制造汽车（组装过程和细节在工厂内）</li>\r\n<li>汽车购买者（用户）：你只需要说出你需要的型号（对象的类型和内容），然后直接购买就可以使用了（不需要知道汽车是怎么组装的（车轮、车门、发动机、方向盘等等）</li>\r\n</ul>\r\n</li>\r\n</ul>\r\n<blockquote data-v-md-line=\"304\">\r\n<ol data-v-md-line=\"304\">\r\n<li>指挥者Director的builder方法传入Builider抽象类（因为工人类继承了了Builder可以接收）可以看作是builder直接管理抽象类，但是实际是传入的是具体类（工人类）-----（多态？）</li>\r\n<li>指挥者指挥Buider抽象类（工人类）的执行顺序最后在返回该类-----（也就是说工人类只管实现自己的功能而无需关系什么时候做什么事，做什么事都由指挥者来决定）</li>\r\n<li>构建跟表示分离</li>\r\n</ol>\r\n</blockquote>\r\n<h2 data-v-md-heading=\"适配器模式\" data-v-md-line=\"314\">适配器模式</h2>\r\n<p data-v-md-line=\"316\">compute类：</p>\r\n<div data-v-md-line=\"318\"><div class=\"v-md-pre-wrapper v-md-pre-wrapper-java extra-class\"><pre class=\"v-md-hljs-java\"><code><span class=\"hljs-keyword\">package</span> com.lihuanzhi.adapter;\r\n\r\n<span class=\"hljs-comment\">//客户端类，想上网，插不上网线</span>\r\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Computer</span> {\r\n\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">net</span><span class=\"hljs-params\">(Adapter adapter)</span>{\r\n        <span class=\"hljs-comment\">//上网的具体实现，找一个转接头</span>\r\n        adapter.handleRequest();\r\n    }\r\n\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> {\r\n        <span class=\"hljs-comment\">//电脑、适配器、网线</span>\r\n        <span class=\"hljs-type\">Computer</span> <span class=\"hljs-variable\">computer</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Computer</span>();\r\n        <span class=\"hljs-type\">Adaptee</span> <span class=\"hljs-variable\">adaptee</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Adaptee</span>();\r\n        <span class=\"hljs-type\">Adapter</span> <span class=\"hljs-variable\">adapter</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Adapter</span>(adaptee);\r\n\r\n        <span class=\"hljs-comment\">/**\r\n         * 电脑直接连接适配器，适配器连接了网线\r\n         * 这个net方法是直接调用了适配器里面的方法\r\n         * 适配器的方法再调用了网线的方法从而使得电脑和网线建立了连接\r\n         * 从而能上网\r\n         */</span>\r\n\r\n        computer.net(adapter);\r\n    }\r\n}\r\n\r\n</code></pre>\r\n</div></div><p data-v-md-line=\"348\">网线类（需要适配的对象）：</p>\r\n<div data-v-md-line=\"350\"><div class=\"v-md-pre-wrapper v-md-pre-wrapper-java extra-class\"><pre class=\"v-md-hljs-java\"><code><span class=\"hljs-keyword\">package</span> com.lihuanzhi.adapter;\r\n\r\n<span class=\"hljs-comment\">//要被适配的类：网线</span>\r\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Adaptee</span> {\r\n    <span class=\"hljs-keyword\">public</span>  <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">request</span><span class=\"hljs-params\">()</span>{\r\n        System.out.println(<span class=\"hljs-string\">&quot;链接网线上网&quot;</span>);\r\n    }\r\n}\r\n\r\n</code></pre>\r\n</div></div><p data-v-md-line=\"362\">适配器接口：</p>\r\n<div data-v-md-line=\"364\"><div class=\"v-md-pre-wrapper v-md-pre-wrapper-java extra-class\"><pre class=\"v-md-hljs-java\"><code><span class=\"hljs-keyword\">package</span> com.lihuanzhi.adapter;\r\n\r\n<span class=\"hljs-comment\">//接口转换器的抽象实现</span>\r\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title class_\">NetToUsb</span> {\r\n\r\n    <span class=\"hljs-comment\">//作用：处理请求，网线=&gt;usb</span>\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">handleRequest</span><span class=\"hljs-params\">()</span>;\r\n\r\n}\r\n\r\n</code></pre>\r\n</div></div><p data-v-md-line=\"377\">适配器具体实现：</p>\r\n<div data-v-md-line=\"379\"><div class=\"v-md-pre-wrapper v-md-pre-wrapper-java extra-class\"><pre class=\"v-md-hljs-java\"><code><span class=\"hljs-keyword\">package</span> com.lihuanzhi.adapter;\r\n\r\n<span class=\"hljs-comment\">//1.继承 （类适配器，单继承由局限性）</span>\r\n<span class=\"hljs-comment\">//2.组合 （对象适配器，常用）</span>\r\n\r\n<span class=\"hljs-comment\">//适配器，需要链接usb，连接网线</span>\r\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Adapter</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">NetToUsb</span>{\r\n\r\n    <span class=\"hljs-comment\">//组合模式实现电脑和网线的连接，而且更灵活</span>\r\n    <span class=\"hljs-keyword\">private</span> Adaptee adaptee;\r\n\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">Adapter</span><span class=\"hljs-params\">(Adaptee adaptee)</span> {\r\n        <span class=\"hljs-built_in\">this</span>.adaptee = adaptee;\r\n    }\r\n\r\n    <span class=\"hljs-meta\">@Override</span>\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">handleRequest</span><span class=\"hljs-params\">()</span> {\r\n        adaptee.request();\r\n    }\r\n}\r\n\r\n</code></pre>\r\n</div></div><h2 data-v-md-heading=\"装饰者模式\" data-v-md-line=\"407\">装饰者模式</h2>\r\n<p data-v-md-line=\"409\">来自B站UP主<a href=\"https://space.bilibili.com/327697548\" target=\"_blank\">林斯基JI</a>的装饰者模式视频,，<a href=\"https://www.bilibili.com/video/BV1Vp4y187dK?spm_id_from=333.337.search-card.all.click&amp;vd_source=f4a650c29f13871920bf2118af71c522\" target=\"_blank\">链接</a></p>\r\n<p data-v-md-line=\"411\"><img src alt=\"image-20220716225726038\"></p>\r\n<p data-v-md-line=\"413\">假设有一个奶茶店，它有一个奶茶类的分类Beverge，有几个继承这个父类的类，它们都重写了cost()方法，可以计算出各自的价格，现在有一个需求要我们增加一个功能，我们不仅可以买奶茶还能自己添加一下配料，如珍珠、布丁、椰果等等。下面是实现的几种方法。</p>\r\n<ul data-v-md-line=\"415\">\r\n<li>\r\n<p data-v-md-line=\"415\">第一种：</p>\r\n<p data-v-md-line=\"417\">我们可以为每一种搭配都创建一个实现类，例如（奶茶+布丁）、（奶茶+椰果）、（奶茶+珍珠）…</p>\r\n<p data-v-md-line=\"419\"><img src alt=\"image-20220716230509133\"></p>\r\n</li>\r\n</ul>\r\n<p data-v-md-line=\"421\">​		很显然这样做是非常不现实的，因为这样就局限了搭配，只能奶茶+配料这种搭配，如果我们想搭配奶茶+两		份珍珠就根本无法实现，而且如果后期添加配料或者新品种奶茶还需要添加新的搭配，这完全不现实。</p>\r\n<ul data-v-md-line=\"423\">\r\n<li>\r\n<p data-v-md-line=\"423\">第二种：</p>\r\n<p data-v-md-line=\"425\">我们可以从父类下手，可以给父类添加这些配料的属性表示是否添加配料</p>\r\n<p data-v-md-line=\"427\"><img src alt=\"image-20220716231034491\"></p>\r\n</li>\r\n</ul>\r\n<p data-v-md-line=\"429\">​		可以重写cost()这个方法，让价格+本类价格+父类的价格，因为父类的价格就是所有配料的价格。</p>\r\n<p data-v-md-line=\"431\">​		虽然这个方法能大大减少我们需要写的代码，但是根据<strong>策略模式</strong>，我们需要把不变的代码跟变化的代码分		开，而这里配料的代码就是可能变化的代码，因为我们随时可能添加新的配料，而这个父类基本是不可能变		化的代码，因为他有很多的子类，变化会影响非常多的子类，这样把不变的代码跟变化的代码放在一起很可		能就会要问题。</p>\r\n<p data-v-md-line=\"433\">​		假设我们需要修改布丁的价格，此时我们就得需要修改cost()方法，但是一旦这个设置出现了问题，会导致所有的饮料价格都不对了。同样的我们添加一个新的配料，也需要修改cost()方法。而且我们如果准备添加新的饮料咖啡，让咖啡也拥有珍珠、布丁、椰果这是非常不合理的。</p>\r\n<p data-v-md-line=\"435\">​		我们现在最大的问题就是使用了继承，而继承是静态的，也就是说我们无法再运行时动态的修一个类的行为，如果我们想再运行时改变类的行为我们必须改代码。</p>\r\n<p data-v-md-line=\"437\">​	不用继承的话，我们可以使用组合不同的类来改变行为。</p>\r\n<p data-v-md-line=\"439\">​	加入用户想点一份奶茶+一份珍珠+一份珍珠+布丁，然后结账。</p>\r\n<p data-v-md-line=\"441\">​	<img src alt=\"image-20220716232432586\"></p>\r\n<p data-v-md-line=\"443\">用珍珠类将奶茶类包起来，用布丁类将奶茶类跟珍珠类包起来，而珍珠类跟布丁类都继承了饮料类，每个cost()方法都等于它包起来的饮料的cost()加本身配料的cost()</p>\r\n<p data-v-md-line=\"445\">最后我们算钱的时候只需要调用最外层的cost()就好了</p>\r\n<p data-v-md-line=\"447\"><img src alt=\"image-20220716232923887\"></p>\r\n<p data-v-md-line=\"449\">每个奶茶类都继承父类Beverage类，而配料继承ToppingDecorator类，而这个类直接继承Beverage类，并且里面有一个Beverage属性。</p>\r\n<p data-v-md-line=\"451\">第三种：</p>\r\n<p data-v-md-line=\"453\">饮料抽象父类：</p>\r\n<div data-v-md-line=\"455\"><div class=\"v-md-pre-wrapper v-md-pre-wrapper-java extra-class\"><pre class=\"v-md-hljs-java\"><code><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">abstract</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Beverage</span> {\r\n\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">abstract</span> <span class=\"hljs-type\">double</span> <span class=\"hljs-title function_\">cost</span><span class=\"hljs-params\">()</span>;\r\n}\r\n</code></pre>\r\n</div></div><p data-v-md-line=\"462\">奶茶、水果茶类：</p>\r\n<div data-v-md-line=\"464\"><div class=\"v-md-pre-wrapper v-md-pre-wrapper-java extra-class\"><pre class=\"v-md-hljs-java\"><code><span class=\"hljs-comment\">//水果茶</span>\r\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">FruitTea</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_\">Beverage</span> {\r\n    <span class=\"hljs-meta\">@Override</span>\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">double</span> <span class=\"hljs-title function_\">cost</span><span class=\"hljs-params\">()</span> {\r\n        System.out.println(<span class=\"hljs-string\">&quot;添加水果茶：&quot;</span>+<span class=\"hljs-number\">5.6</span>);\r\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">5.6</span>;\r\n    }\r\n}\r\n\r\n<span class=\"hljs-comment\">//奶茶</span>\r\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">MilkTea</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_\">Beverage</span> {\r\n    <span class=\"hljs-meta\">@Override</span>\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">double</span> <span class=\"hljs-title function_\">cost</span><span class=\"hljs-params\">()</span> {\r\n        System.out.println(<span class=\"hljs-string\">&quot;添加奶茶：&quot;</span>+<span class=\"hljs-number\">5.5</span>);\r\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">5.5</span>;\r\n    }\r\n}\r\n</code></pre>\r\n</div></div><p data-v-md-line=\"484\">配料抽象父类：</p>\r\n<div data-v-md-line=\"486\"><div class=\"v-md-pre-wrapper v-md-pre-wrapper-java extra-class\"><pre class=\"v-md-hljs-java\"><code><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">abstract</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">ToppingDecorator</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_\">Beverage</span> {\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">abstract</span> <span class=\"hljs-type\">double</span> <span class=\"hljs-title function_\">cost</span><span class=\"hljs-params\">()</span>;\r\n}\r\n</code></pre>\r\n</div></div><p data-v-md-line=\"492\">配料类：</p>\r\n<div data-v-md-line=\"494\"><div class=\"v-md-pre-wrapper v-md-pre-wrapper-java extra-class\"><pre class=\"v-md-hljs-java\"><code><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Boba</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_\">ToppingDecorator</span>{\r\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">COST</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">2</span>;\r\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">final</span> Beverage beverage;\r\n\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">Boba</span><span class=\"hljs-params\">(Beverage beverage)</span>{\r\n        <span class=\"hljs-built_in\">this</span>.beverage = beverage;\r\n    }\r\n\r\n    <span class=\"hljs-meta\">@Override</span>\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">double</span> <span class=\"hljs-title function_\">cost</span><span class=\"hljs-params\">()</span> {\r\n        System.out.println(<span class=\"hljs-string\">&quot;添加珍珠：&quot;</span>+<span class=\"hljs-number\">2</span>);\r\n        <span class=\"hljs-keyword\">return</span> COST + beverage.cost();\r\n    }\r\n}\r\n\r\n\r\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Pudding</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_\">ToppingDecorator</span>{\r\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">COST</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">5</span>;\r\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">final</span> Beverage beverage;\r\n\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">Pudding</span><span class=\"hljs-params\">(Beverage beverage)</span>{\r\n        <span class=\"hljs-built_in\">this</span>.beverage = beverage;\r\n    }\r\n\r\n    <span class=\"hljs-meta\">@Override</span>\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">double</span> <span class=\"hljs-title function_\">cost</span><span class=\"hljs-params\">()</span> {\r\n        System.out.println(<span class=\"hljs-string\">&quot;添加布丁：&quot;</span>+<span class=\"hljs-number\">5</span>);\r\n        <span class=\"hljs-keyword\">return</span> COST + beverage.cost();\r\n    }\r\n}\r\n</code></pre>\r\n</div></div><p data-v-md-line=\"527\">测试类：</p>\r\n<div data-v-md-line=\"529\"><div class=\"v-md-pre-wrapper v-md-pre-wrapper-java extra-class\"><pre class=\"v-md-hljs-java\"><code><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Main</span> {\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> {\r\n        <span class=\"hljs-type\">Beverage</span> <span class=\"hljs-variable\">milkTea</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">MilkTea</span>();\r\n        milkTea = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Boba</span>(milkTea);\r\n        milkTea = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Boba</span>(milkTea);\r\n        milkTea = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Pudding</span>(milkTea);\r\n\r\n        <span class=\"hljs-type\">double</span> <span class=\"hljs-variable\">totaCost</span> <span class=\"hljs-operator\">=</span> milkTea.cost();\r\n        System.out.println(totaCost);\r\n\r\n    }\r\n}\r\n</code></pre>\r\n</div></div><p data-v-md-line=\"544\">测试结果：</p>\r\n<p data-v-md-line=\"546\"><img src alt=\"image-20220716235500680\"></p>\r\n<p data-v-md-line=\"550\">整个目录结构：</p>\r\n<p data-v-md-line=\"552\"><img src alt=\"image-20220716235606658\"></p>\r\n<p data-v-md-line=\"554\">真个目录都非常整洁，如果想添加一个配料，只需要再decorator中添加就行了，整个代码只需要修改Main里面就行，如果我们添加的这个配料类出现的问题也不会影响其他配料类或者饮料类。</p>\r\n<h3 data-v-md-heading=\"总结\" data-v-md-line=\"556\">总结：</h3>\r\n<p data-v-md-line=\"558\">装饰者的本质就是一个套娃，我们通过将一个对象套上一个一个对象的方式（在本类中就是配料类套上其父类的父类Beverage，这个类同时也是奶茶类的父类，用它来接收奶茶类），我们想动态的修改类的**行为（类中的成员方法）**只需要在给这个类套上一个类就可以实现了，而不需要修改现有类的代码。</p>\r\n<p data-v-md-line=\"560\">Java中的InputStream就是很好的例子</p>\r\n<p data-v-md-line=\"562\"><img src alt=\"image-20220717142604454\"></p>\r\n<h2 data-v-md-heading=\"代理模式\" data-v-md-line=\"568\">代理模式</h2>\r\n<p data-v-md-line=\"570\">为什么学习代理模式？因为这就是SpringAOP的底层！【面试常问SpringAOP和SpringMVC】</p>\r\n<p data-v-md-line=\"572\">代理模式的分类：</p>\r\n<ul data-v-md-line=\"574\">\r\n<li>静态代理</li>\r\n<li>动态代理</li>\r\n</ul>\r\n<p data-v-md-line=\"577\"><img src alt=\"image-20220717153312182\"></p>\r\n<h3 data-v-md-heading=\"静态代理\" data-v-md-line=\"579\">静态代理</h3>\r\n<p data-v-md-line=\"581\">角色分析：</p>\r\n<ul data-v-md-line=\"583\">\r\n<li>\r\n<p data-v-md-line=\"583\">抽象角色（就是共同完成的事情，如上的租房）：一般使用接口或者抽象类来解决。</p>\r\n<div data-v-md-line=\"585\"><div class=\"v-md-pre-wrapper v-md-pre-wrapper-java extra-class\"><pre class=\"v-md-hljs-java\"><code><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title class_\">Rent</span> {\r\n\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">rent</span><span class=\"hljs-params\">()</span>;\r\n}\r\n</code></pre>\r\n</div></div></li>\r\n<li>\r\n<p data-v-md-line=\"594\">真实角色：被代理的角色</p>\r\n<div data-v-md-line=\"596\"><div class=\"v-md-pre-wrapper v-md-pre-wrapper-java extra-class\"><pre class=\"v-md-hljs-java\"><code><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Host</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">Rent</span>{\r\n    <span class=\"hljs-meta\">@Override</span>\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">rent</span><span class=\"hljs-params\">()</span> {\r\n        System.out.println(<span class=\"hljs-string\">&quot;房东出租房子&quot;</span>);\r\n    }\r\n}\r\n</code></pre>\r\n</div></div></li>\r\n<li>\r\n<p data-v-md-line=\"607\">代理角色：代理真是角色，代理真实角色后，我们一般会做一些附属操作</p>\r\n<div data-v-md-line=\"609\"><div class=\"v-md-pre-wrapper v-md-pre-wrapper-java extra-class\"><pre class=\"v-md-hljs-java\"><code><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Proxy</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">Rent</span>{\r\n\r\n    <span class=\"hljs-comment\">//多用组合少用继承</span>\r\n    <span class=\"hljs-keyword\">private</span> Host host;\r\n\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">Proxy</span><span class=\"hljs-params\">()</span> {\r\n    }\r\n\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">Proxy</span><span class=\"hljs-params\">(Host host)</span> {\r\n        <span class=\"hljs-built_in\">this</span>.host = host;\r\n    }\r\n\r\n    <span class=\"hljs-meta\">@Override</span>\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">rent</span><span class=\"hljs-params\">()</span> {\r\n        seeHouse();\r\n        host.rent();\r\n        qianHT();\r\n        Money();\r\n    }\r\n\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">seeHouse</span><span class=\"hljs-params\">()</span>{\r\n        System.out.println(<span class=\"hljs-string\">&quot;看房子&quot;</span>);\r\n    }\r\n\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">qianHT</span><span class=\"hljs-params\">()</span>{\r\n        System.out.println(<span class=\"hljs-string\">&quot;签合同&quot;</span>);\r\n    }\r\n\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">Money</span><span class=\"hljs-params\">()</span>{\r\n        System.out.println(<span class=\"hljs-string\">&quot;中介收取中介费&quot;</span>);\r\n    }\r\n}\r\n</code></pre>\r\n</div></div></li>\r\n<li>\r\n<p data-v-md-line=\"646\">客户：访问代理对象的人</p>\r\n<div data-v-md-line=\"648\"><div class=\"v-md-pre-wrapper v-md-pre-wrapper-java extra-class\"><pre class=\"v-md-hljs-java\"><code><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Client</span> {\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> {\r\n        <span class=\"hljs-comment\">//房东要出租房子</span>\r\n        <span class=\"hljs-type\">Host</span> <span class=\"hljs-variable\">host</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Host</span>();\r\n<span class=\"hljs-comment\">//        host.rent();</span>\r\n        <span class=\"hljs-comment\">//代理，中介帮房东出租房子，但是会有一些附属操作</span>\r\n        <span class=\"hljs-type\">Proxy</span> <span class=\"hljs-variable\">proxy</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Proxy</span>(host);\r\n        <span class=\"hljs-comment\">//你不用面对房东，直接找中介租房即可</span>\r\n        proxy.rent();\r\n    }\r\n}\r\n</code></pre>\r\n</div></div><p data-v-md-line=\"662\">真实角色中的代码不需要修改，只需要给中介添加特定方法就可以了。</p>\r\n</li>\r\n</ul>\r\n<p data-v-md-line=\"666\">代理模式的好处：</p>\r\n<ul data-v-md-line=\"668\">\r\n<li>可以使真实角色的操作更加纯粹！不用去关注一些公共的业务</li>\r\n<li>公共也就给代理角色！实现业务的分工</li>\r\n<li>公共业务发生拓展的时候，方便集中管理</li>\r\n</ul>\r\n<p data-v-md-line=\"672\">缺点：</p>\r\n<ul data-v-md-line=\"674\">\r\n<li>一个真实角色就会产生一个代理角色，代码会翻倍-开发效率低~</li>\r\n</ul>\r\n', '# 设计模式\r\n\r\n## GoF23\r\n\r\n- GoF23\r\n  - 一种思维，一种态度，一种进步\r\n\r\n\r\n\r\n- 创建型模式：（描述怎么创建一个对象，让对象跟使用分离，简单的说就是省去了new的过程，更方便创建对象）\r\n  - 单例模式、工厂模式、抽象工厂模式、建造者模式、原型模式\r\n- 结构模式：（让类跟对象按照某种布局组成更大的结构）\r\n  - 适配器模式、桥接模式、装饰模式、组合模式、外观模式、享元模式、代理模式\r\n- 行为模式：（描述类跟对象直接怎么完成相互协作，共同完成单个对象无法完成的任务）\r\n  - 模板方法模式、命令模式、迭代模式、观察者模式、中介者模式、备忘录模式、解释器模式、状态模式、策略模式、职责链模式、访问者模式\r\n\r\n\r\n\r\n## OOP七大原则\r\n\r\n- 开闭原则：对外扩展开发，对修改关闭\r\n- 里氏替换原则：继承必须保持超类所拥有的性质在子类中仍然成立\r\n- 依赖倒置原则：要面向接口编程，不要面向实现编程\r\n- 单一职责原则：控制类的粒度大小，将对象解耦，提供其内聚性\r\n- 接口隔离原则：要为各个类建立它们需要的专用接口\r\n- 迪米特法则：只与你的直接朋友交谈，不跟“陌生人”说话\r\n- 合成复用原则：尽量先使用组合或者聚合等关联关系来实现，其次才考虑使用继承关系来实现\r\n\r\n\r\n\r\n## 单例模式\r\n\r\n问：为什么枚举可以避免单例模式被破坏，枚举到底是一个什么样的东西。\r\n\r\n- [ ] ​		搞懂单例模式\r\n- [ ] ​		搞懂枚举\r\n\r\n### 饿汉式单例\r\n\r\n```java\r\npackage com.lihuanzhi.single;\r\n\r\n/**\r\n * 饿汉式单例\r\n * 顾名思义：就是很饿，一上来就加载\r\n */\r\npublic class Hungry {\r\n\r\n    /**\r\n     * 饿汉式单例一上来就加载了，全部的对象都被加载进来了\r\n     * 如果这些对象耗内存，但是我们又没有使用它，就会很浪费空间资源\r\n     */\r\n    //例如下面这段代码\r\n//    private byte[] byte1 = new byte[1024*1024];\r\n//    private byte[] byte2 = new byte[1024*1024];\r\n//    private byte[] byte3 = new byte[1024*1024];\r\n//    private byte[] byte4 = new byte[1024*1024];\r\n\r\n\r\n    /**\r\n     * 构造器单例，让构造器私有\r\n     * 别人无法new这个对象，保证内存中只有一个对象\r\n     */\r\n    private Hungry(){\r\n\r\n    }\r\n\r\n    //保证只有一个\r\n    private final static Hungry HUNGRY = new Hungry();\r\n\r\n    //抛出一个对外的方法\r\n    private static Hungry getInstance(){\r\n        return HUNGRY;\r\n    }\r\n}\r\n\r\n```\r\n\r\n饿汉式单例一上来就加载了，全部的对象都被加载进来了\r\n如果这些对象耗内存，但是我们又没有使用它，就会很浪费空间资源\r\n\r\n\r\n\r\n### 懒汉式\r\n\r\n```java\r\npackage com.lihuanzhi.single;\r\n\r\nimport java.lang.reflect.Constructor;\r\n\r\n/**\r\n * 懒汉式单例\r\n */\r\npublic class LazyMan {\r\n\r\n    private static boolean lihuanzhi = false;\r\n\r\n    private LazyMan(){\r\n        /**\r\n         * 步骤1：\r\n         *     添加一把锁，防止破坏单例\r\n         */\r\n        synchronized (LazyMan.class){\r\n            if(lihuanzhi == false){\r\n                lihuanzhi = true;\r\n            }else{\r\n                throw new RuntimeException(\"不要试图使用反射破坏单例\");\r\n            }\r\n\r\n\r\n//            if (lazyMan!=null){\r\n//                throw new RuntimeException(\"不要试图使用反射破坏单例\");\r\n//            }\r\n        }\r\n        System.out.println(Thread.currentThread().getName()+\"ok\");\r\n    }\r\n\r\n//    private static LazyMan lazyMan;   volatile解决指令重排问题\r\n    private volatile static LazyMan lazyMan;\r\n\r\n    /**\r\n     * 这个方法只能在单线程模式下才能生效，如果多线程并发就会出现问题\r\n     * 为了解决这个问题，我们可以给LazyMan这个类添加一把锁\r\n     * @return\r\n     */\r\n    //双重检测锁模式（两次判断一把锁）的懒汉式单例    DCL懒汉式\r\n    public static LazyMan getInstance(){\r\n        if(lazyMan==null){\r\n            synchronized (LazyMan.class){\r\n                if(lazyMan==null) {\r\n                    lazyMan = new LazyMan();    //问题：不是一个原子性操作\r\n                    /**\r\n                     * 不是原子性操作就会有以下步骤\r\n                     * 1.分配内存空间\r\n                     * 2.执行构造方法，初始化对象\r\n                     * 3.把这个对象指向这个空间\r\n                     *\r\n                     * 我们看着这个一个一步的操作但是在底层要经历几个步骤\r\n                     * 这就有可能会发生指令重排的情况\r\n                     * 我们希望它执行123，但是它可能执行132\r\n                     *\r\n                     * 123\r\n                     * 132 A;\r\n                     *     B 此时lazyMan还没有完成构造，所有得给lazyMan添加一个volatile\r\n                     */\r\n                }\r\n            }\r\n        }\r\n\r\n        return lazyMan;\r\n    }\r\n\r\n\r\n    //多线程并发\r\n/*    public static void main(String[] args) {\r\n        for (int i=0; i<10; i++){\r\n            new Thread(()->{\r\n                lazyMan.getInstance();\r\n            }\r\n            ).start();\r\n        }\r\n    }*/\r\n\r\n    /**\r\n     * 虽然我们加了双重检测锁，但是还是不安全的，为什么呢？\r\n     * 因为Java里面有一个非常牛逼且霸道的反射\r\n     * 同反射即使是private的变量属性方法都能破坏然后进行调用、修改\r\n     *\r\n     */\r\n\r\n    //反射\r\n    public static void main(String[] args) throws Exception {\r\n        LazyMan instance = LazyMan.getInstance();\r\n\r\n        Constructor<LazyMan> declaredConstructor = LazyMan.class.getDeclaredConstructor(null);\r\n        //无视私有的构造器\r\n        declaredConstructor.setAccessible(true);\r\n        //无视private之后可以通过反射来进行无参构造创建对象\r\n        LazyMan instance2 = declaredConstructor.newInstance();\r\n\r\n        //检测一下instance和instance2是不是一样的，不一样的话就破坏了我们的单例模式\r\n        System.out.println(instance);\r\n        System.out.println(instance2);\r\n        /**\r\n         * 结果表示这个两个不是一个对象\r\n         * 结论：反射可以破坏单例\r\n         * 有解决办法：\r\n         *      因为是通过无参的构造方法创建的，所有可以给无参的构造方法添加一把锁\r\n         *      步骤1\r\n         *虽然这个反射破坏单例的问题解决了，但是还是会有问题，\r\n         * 假如我不使用LazyMan.getInstance()创建对象，而是两个对象都使用反射创建\r\n         * 就还是会出现破坏单例的情况\r\n         * 解决办法：\r\n         *       红绿灯，定义一个没有人知道的变量为flase,同步代码块里面创建对象之气判断后在执行\r\n         *       步骤2\r\n         *\r\n         * 即使这样也没有绝对的安全，因为这个红绿灯变量（通过反编译）也是可以通过反射来修改的\r\n         */\r\n    }\r\n}\r\n\r\n```\r\n\r\n\r\n\r\n### 枚举\r\n\r\n> 枚举类里面的无参构造方法其实有两个参数（String,int），使用反射构造器创建对象时记得添加参数，否则不会报出无法***通过反射破坏枚举的单例模式（有待考证）***\r\n\r\n\r\n\r\n\r\n\r\n## 工厂模式\r\n\r\n- 作用\r\n  - 实现了创建者和调用者的分离\r\n  - 详细分类\r\n    - 简单工厂模式\r\n    - 工厂方法模式\r\n    - 抽象工厂模式\r\n\r\n\r\n\r\n- OOP七大原则：\r\n  - 开闭原则：一个软件的实体应当对拓展开放，对修改关闭\r\n  - 依赖倒置原则：要针对接口编程，不要针对实现编程\r\n  - 迪米特法则：只与你直接的朋友通信，而避免和陌生人通信\r\n\r\n\r\n\r\n我们创建对象的时候不需要再使用new来创建，我们只需要把其中的创建细节封装到一个工厂类里面，使用一个get()方法来获取工厂帮我们创建好的对象并接收就好了，不再关注其中的细节。\r\n\r\n\r\n\r\n```java\r\n根据设计原则：工厂方法模式;\r\n根据实际业务：简单工厂模式;\r\n\r\n虽然工厂方法模式更符合设计原则，但是其结构、代码、编程、管理的复杂度都不如简单工厂模式\r\n```\r\n\r\n\r\n\r\n## 抽象工厂模式\r\n\r\n- 定义：抽象工厂模式提供了一个创建一系列相关或者相互依赖对象的接口，无需指定它们具体的类\r\n- 适用场景：\r\n  - 客户端（应用层）不依赖于产品类实例如何被创建、实现等细节\r\n  - 强调一系列相关的产品对象（属于同一产品族）一起使用创建对象需要大量的重复的代码\r\n  - 提供一个产品类的库，所有的产品以同样的接口出现，从而使得客户端不依赖于具体的实现\r\n- 优点：\r\n  - 具体产品在应用层的代码隔离，无需关心创建的细节\r\n  - 将一个系列的产品统一到一起创建\r\n- 缺点：\r\n  - 规定了所有可能被创建的产品集合，产品族中拓展新的产品困难\r\n  - 增加了系统的抽象性和理解难度\r\n\r\n\r\n\r\n工厂小结：\r\n\r\n- 简单工厂：（静态工厂模式）\r\n  - 虽然某种程度上不符合设计原则，但实际使用最多\r\n- 工厂方法模式：\r\n  - 不修改已有类的前提下，通过增加新的工程类实现扩展\r\n- 抽象工厂模式\r\n  - 不可以增加产品，可以增加产品族\r\n\r\n\r\n\r\n应用场景：\r\n\r\n- JDK中的Galendar的getInstance()\r\n- JDBC中的Connection对象获取\r\n- Spring中的IOC容器创建管理bean对象\r\n- 反射中Class对象的newInstance方法\r\n\r\n\r\n\r\n\r\n\r\n## 建造者模式\r\n\r\n- 建造者模式也属于创建型模式，它提供了一种创建对象的最佳模式。\r\n\r\n\r\n\r\n- 定义：将一个复杂对象的**构建与它的表示分离**，使得同样的构建过程可以创建不同的表示\r\n- 主要作用：在用户不知道对象的建造过程和细节的情况下就可以创建**复杂的对象**\r\n\r\n\r\n\r\n- 用户只需要给出指定复杂对象的类型和内容，建造者模式负责按顺序创建复杂对象（把内部的建造过程和细节隐藏起来）\r\n\r\n\r\n\r\n- 例子：\r\n  - 工厂（建造者模式）：负责制造汽车（组装过程和细节在工厂内）\r\n  - 汽车购买者（用户）：你只需要说出你需要的型号（对象的类型和内容），然后直接购买就可以使用了（不需要知道汽车是怎么组装的（车轮、车门、发动机、方向盘等等）\r\n\r\n\r\n\r\n> 1. 指挥者Director的builder方法传入Builider抽象类（因为工人类继承了了Builder可以接收）可以看作是builder直接管理抽象类，但是实际是传入的是具体类（工人类）-----（多态？）\r\n> 2. 指挥者指挥Buider抽象类（工人类）的执行顺序最后在返回该类-----（也就是说工人类只管实现自己的功能而无需关系什么时候做什么事，做什么事都由指挥者来决定）\r\n> 3. 构建跟表示分离\r\n>\r\n> \r\n\r\n\r\n\r\n\r\n\r\n## 适配器模式\r\n\r\ncompute类：\r\n\r\n```java\r\npackage com.lihuanzhi.adapter;\r\n\r\n//客户端类，想上网，插不上网线\r\npublic class Computer {\r\n\r\n    public void net(Adapter adapter){\r\n        //上网的具体实现，找一个转接头\r\n        adapter.handleRequest();\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        //电脑、适配器、网线\r\n        Computer computer = new Computer();\r\n        Adaptee adaptee = new Adaptee();\r\n        Adapter adapter = new Adapter(adaptee);\r\n\r\n        /**\r\n         * 电脑直接连接适配器，适配器连接了网线\r\n         * 这个net方法是直接调用了适配器里面的方法\r\n         * 适配器的方法再调用了网线的方法从而使得电脑和网线建立了连接\r\n         * 从而能上网\r\n         */\r\n\r\n        computer.net(adapter);\r\n    }\r\n}\r\n\r\n```\r\n\r\n网线类（需要适配的对象）：\r\n\r\n```java\r\npackage com.lihuanzhi.adapter;\r\n\r\n//要被适配的类：网线\r\npublic class Adaptee {\r\n    public  void request(){\r\n        System.out.println(\"链接网线上网\");\r\n    }\r\n}\r\n\r\n```\r\n\r\n适配器接口：\r\n\r\n```java\r\npackage com.lihuanzhi.adapter;\r\n\r\n//接口转换器的抽象实现\r\npublic interface NetToUsb {\r\n\r\n    //作用：处理请求，网线=>usb\r\n    public void handleRequest();\r\n\r\n}\r\n\r\n```\r\n\r\n适配器具体实现：\r\n\r\n```java\r\npackage com.lihuanzhi.adapter;\r\n\r\n//1.继承 （类适配器，单继承由局限性）\r\n//2.组合 （对象适配器，常用）\r\n\r\n//适配器，需要链接usb，连接网线\r\npublic class Adapter implements NetToUsb{\r\n\r\n    //组合模式实现电脑和网线的连接，而且更灵活\r\n    private Adaptee adaptee;\r\n\r\n    public Adapter(Adaptee adaptee) {\r\n        this.adaptee = adaptee;\r\n    }\r\n\r\n    @Override\r\n    public void handleRequest() {\r\n        adaptee.request();\r\n    }\r\n}\r\n\r\n```\r\n\r\n\r\n\r\n\r\n\r\n## 装饰者模式\r\n\r\n来自B站UP主[林斯基JI](https://space.bilibili.com/327697548)的装饰者模式视频,，[链接](https://www.bilibili.com/video/BV1Vp4y187dK?spm_id_from=333.337.search-card.all.click&vd_source=f4a650c29f13871920bf2118af71c522)\r\n\r\n![image-20220716225726038](C:\\Users\\LiHuanzhi\\AppData\\Roaming\\Typora\\typora-user-images\\image-20220716225726038.png)\r\n\r\n假设有一个奶茶店，它有一个奶茶类的分类Beverge，有几个继承这个父类的类，它们都重写了cost()方法，可以计算出各自的价格，现在有一个需求要我们增加一个功能，我们不仅可以买奶茶还能自己添加一下配料，如珍珠、布丁、椰果等等。下面是实现的几种方法。\r\n\r\n- 第一种：\r\n\r\n  我们可以为每一种搭配都创建一个实现类，例如（奶茶+布丁）、（奶茶+椰果）、（奶茶+珍珠）...\r\n\r\n  ![image-20220716230509133](C:\\Users\\LiHuanzhi\\AppData\\Roaming\\Typora\\typora-user-images\\image-20220716230509133.png)\r\n\r\n​		很显然这样做是非常不现实的，因为这样就局限了搭配，只能奶茶+配料这种搭配，如果我们想搭配奶茶+两		份珍珠就根本无法实现，而且如果后期添加配料或者新品种奶茶还需要添加新的搭配，这完全不现实。\r\n\r\n- 第二种：\r\n\r\n  我们可以从父类下手，可以给父类添加这些配料的属性表示是否添加配料\r\n\r\n  ![image-20220716231034491](C:\\Users\\LiHuanzhi\\AppData\\Roaming\\Typora\\typora-user-images\\image-20220716231034491.png)\r\n\r\n​		可以重写cost()这个方法，让价格+本类价格+父类的价格，因为父类的价格就是所有配料的价格。\r\n\r\n​		虽然这个方法能大大减少我们需要写的代码，但是根据**策略模式**，我们需要把不变的代码跟变化的代码分		开，而这里配料的代码就是可能变化的代码，因为我们随时可能添加新的配料，而这个父类基本是不可能变		化的代码，因为他有很多的子类，变化会影响非常多的子类，这样把不变的代码跟变化的代码放在一起很可		能就会要问题。\r\n\r\n​		假设我们需要修改布丁的价格，此时我们就得需要修改cost()方法，但是一旦这个设置出现了问题，会导致所有的饮料价格都不对了。同样的我们添加一个新的配料，也需要修改cost()方法。而且我们如果准备添加新的饮料咖啡，让咖啡也拥有珍珠、布丁、椰果这是非常不合理的。\r\n\r\n​		我们现在最大的问题就是使用了继承，而继承是静态的，也就是说我们无法再运行时动态的修一个类的行为，如果我们想再运行时改变类的行为我们必须改代码。\r\n\r\n​	不用继承的话，我们可以使用组合不同的类来改变行为。\r\n\r\n​	加入用户想点一份奶茶+一份珍珠+一份珍珠+布丁，然后结账。\r\n\r\n​	![image-20220716232432586](C:\\Users\\LiHuanzhi\\AppData\\Roaming\\Typora\\typora-user-images\\image-20220716232432586.png)\r\n\r\n用珍珠类将奶茶类包起来，用布丁类将奶茶类跟珍珠类包起来，而珍珠类跟布丁类都继承了饮料类，每个cost()方法都等于它包起来的饮料的cost()加本身配料的cost()\r\n\r\n最后我们算钱的时候只需要调用最外层的cost()就好了\r\n\r\n![image-20220716232923887](C:\\Users\\LiHuanzhi\\AppData\\Roaming\\Typora\\typora-user-images\\image-20220716232923887.png)\r\n\r\n每个奶茶类都继承父类Beverage类，而配料继承ToppingDecorator类，而这个类直接继承Beverage类，并且里面有一个Beverage属性。\r\n\r\n第三种：\r\n\r\n饮料抽象父类：\r\n\r\n```java\r\npublic abstract class Beverage {\r\n\r\n    public abstract double cost();\r\n}\r\n```\r\n\r\n奶茶、水果茶类：\r\n\r\n```java\r\n//水果茶\r\npublic class FruitTea extends Beverage {\r\n    @Override\r\n    public double cost() {\r\n        System.out.println(\"添加水果茶：\"+5.6);\r\n        return 5.6;\r\n    }\r\n}\r\n\r\n//奶茶\r\npublic class MilkTea extends Beverage {\r\n    @Override\r\n    public double cost() {\r\n        System.out.println(\"添加奶茶：\"+5.5);\r\n        return 5.5;\r\n    }\r\n}\r\n```\r\n\r\n配料抽象父类：\r\n\r\n```java\r\npublic abstract class ToppingDecorator extends Beverage {\r\n    public abstract double cost();\r\n}\r\n```\r\n\r\n配料类：\r\n\r\n```java\r\npublic class Boba extends ToppingDecorator{\r\n    private static final int COST = 2;\r\n    private final Beverage beverage;\r\n\r\n    public Boba(Beverage beverage){\r\n        this.beverage = beverage;\r\n    }\r\n\r\n    @Override\r\n    public double cost() {\r\n        System.out.println(\"添加珍珠：\"+2);\r\n        return COST + beverage.cost();\r\n    }\r\n}\r\n\r\n\r\npublic class Pudding extends ToppingDecorator{\r\n    private static final int COST = 5;\r\n    private final Beverage beverage;\r\n\r\n    public Pudding(Beverage beverage){\r\n        this.beverage = beverage;\r\n    }\r\n\r\n    @Override\r\n    public double cost() {\r\n        System.out.println(\"添加布丁：\"+5);\r\n        return COST + beverage.cost();\r\n    }\r\n}\r\n```\r\n\r\n测试类：\r\n\r\n```java\r\npublic class Main {\r\n    public static void main(String[] args) {\r\n        Beverage milkTea = new MilkTea();\r\n        milkTea = new Boba(milkTea);\r\n        milkTea = new Boba(milkTea);\r\n        milkTea = new Pudding(milkTea);\r\n\r\n        double totaCost = milkTea.cost();\r\n        System.out.println(totaCost);\r\n\r\n    }\r\n}\r\n```\r\n\r\n测试结果：\r\n\r\n![image-20220716235500680](C:\\Users\\LiHuanzhi\\AppData\\Roaming\\Typora\\typora-user-images\\image-20220716235500680.png)\r\n\r\n\r\n\r\n整个目录结构：\r\n\r\n![image-20220716235606658](C:\\Users\\LiHuanzhi\\AppData\\Roaming\\Typora\\typora-user-images\\image-20220716235606658.png)\r\n\r\n真个目录都非常整洁，如果想添加一个配料，只需要再decorator中添加就行了，整个代码只需要修改Main里面就行，如果我们添加的这个配料类出现的问题也不会影响其他配料类或者饮料类。\r\n\r\n### 总结：\r\n\r\n装饰者的本质就是一个套娃，我们通过将一个对象套上一个一个对象的方式（在本类中就是配料类套上其父类的父类Beverage，这个类同时也是奶茶类的父类，用它来接收奶茶类），我们想动态的修改类的**行为（类中的成员方法）**只需要在给这个类套上一个类就可以实现了，而不需要修改现有类的代码。\r\n\r\nJava中的InputStream就是很好的例子\r\n\r\n![image-20220717142604454](C:\\Users\\LiHuanzhi\\AppData\\Roaming\\Typora\\typora-user-images\\image-20220717142604454.png)\r\n\r\n\r\n\r\n\r\n\r\n## 代理模式\r\n\r\n为什么学习代理模式？因为这就是SpringAOP的底层！【面试常问SpringAOP和SpringMVC】\r\n\r\n代理模式的分类：\r\n\r\n- 静态代理\r\n- 动态代理\r\n\r\n![image-20220717153312182](C:\\Users\\LiHuanzhi\\AppData\\Roaming\\Typora\\typora-user-images\\image-20220717153312182.png)\r\n\r\n### 静态代理\r\n\r\n角色分析：\r\n\r\n- 抽象角色（就是共同完成的事情，如上的租房）：一般使用接口或者抽象类来解决。\r\n\r\n  ```java\r\n  public interface Rent {\r\n  \r\n      public void rent();\r\n  }\r\n  ```\r\n\r\n  \r\n\r\n- 真实角色：被代理的角色\r\n\r\n  ```java\r\n  public class Host implements Rent{\r\n      @Override\r\n      public void rent() {\r\n          System.out.println(\"房东出租房子\");\r\n      }\r\n  }\r\n  ```\r\n\r\n  \r\n\r\n- 代理角色：代理真是角色，代理真实角色后，我们一般会做一些附属操作\r\n\r\n  ```java\r\n  public class Proxy implements Rent{\r\n  \r\n      //多用组合少用继承\r\n      private Host host;\r\n  \r\n      public Proxy() {\r\n      }\r\n  \r\n      public Proxy(Host host) {\r\n          this.host = host;\r\n      }\r\n  \r\n      @Override\r\n      public void rent() {\r\n          seeHouse();\r\n          host.rent();\r\n          qianHT();\r\n          Money();\r\n      }\r\n  \r\n      public void seeHouse(){\r\n          System.out.println(\"看房子\");\r\n      }\r\n  \r\n      public void qianHT(){\r\n          System.out.println(\"签合同\");\r\n      }\r\n  \r\n      public void Money(){\r\n          System.out.println(\"中介收取中介费\");\r\n      }\r\n  }\r\n  ```\r\n\r\n  \r\n\r\n- 客户：访问代理对象的人\r\n\r\n  ```java\r\n  public class Client {\r\n      public static void main(String[] args) {\r\n          //房东要出租房子\r\n          Host host = new Host();\r\n  //        host.rent();\r\n          //代理，中介帮房东出租房子，但是会有一些附属操作\r\n          Proxy proxy = new Proxy(host);\r\n          //你不用面对房东，直接找中介租房即可\r\n          proxy.rent();\r\n      }\r\n  }\r\n  ```\r\n\r\n  真实角色中的代码不需要修改，只需要给中介添加特定方法就可以了。\r\n\r\n\r\n\r\n代理模式的好处：\r\n\r\n- 可以使真实角色的操作更加纯粹！不用去关注一些公共的业务\r\n- 公共也就给代理角色！实现业务的分工\r\n- 公共业务发生拓展的时候，方便集中管理\r\n\r\n缺点：\r\n\r\n- 一个真实角色就会产生一个代理角色，代码会翻倍-开发效率低~', 0, '- 创建型模式：（描述怎么创建一个对象，让对象跟使用分离，简单的说就是省去了new的过程，更方便创建对象）\r\n  - 单例模式、工厂模式、抽象工厂模式、建造者模式、原型模式\r\n- 结构模式：（让类跟对象按照某种布局组成更大的结构）\r\n  - 适配器模式、桥接模式、装饰模式、组合模式、外观模式、享元模式、代理模式', '2023-05-14 13:37:07', '2023-05-30 07:49:30', 40, 2, 1, 3, 0, 0, 1, 3, NULL);
INSERT INTO `forum_article` VALUES ('Wr9VnNWP8CTji5v', 10017, 'vue', 10014, '前端', '8408747315', '猜猜我是谁', '未知', 'MySQL的数据目录', '202305/qICDT79CXvqzIYf.jpg', '<h3 data-v-md-heading=\"第02章-mysql的数据目录\" data-v-md-line=\"1\">第02章 MySQL的数据目录</h3>\r\n<h4 data-v-md-heading=\"_1-mysql8的主要目录结构\" data-v-md-line=\"3\"><strong>1. MySQL8的主要目录结构</strong></h4>\r\n<div data-v-md-line=\"5\"><div class=\"v-md-pre-wrapper v-md-pre-wrapper-shell extra-class\"><pre class=\"v-md-hljs-shell\"><code>find / -name mysql\r\n</code></pre>\r\n</div></div><h5 data-v-md-heading=\"_1-1-数据库文件的存放路径\" data-v-md-line=\"9\"><strong>1.1</strong> <strong>数据库文件的存放路径</strong></h5>\r\n<div data-v-md-line=\"11\"><div class=\"v-md-pre-wrapper v-md-pre-wrapper-mysql extra-class\"><pre class=\"v-md-hljs-mysql\"><code>show variables like \'datadir\'; # /var/lib/mysql/\r\n</code></pre>\r\n</div></div><h5 data-v-md-heading=\"_1-2-相关命令目录\" data-v-md-line=\"15\"><strong>1.2</strong> <strong>相关命令目录</strong></h5>\r\n<p data-v-md-line=\"17\"><strong>相关命令目录：/usr/bin 和/usr/sbin。</strong></p>\r\n<h5 data-v-md-heading=\"_1-3-配置文件目录\" data-v-md-line=\"19\"><strong>1.3</strong> <strong>配置文件目录</strong></h5>\r\n<p data-v-md-line=\"21\"><strong>配置文件目录：/usr/share/mysql-8.0（命令及配置文件），/etc/mysql（如my.cnf）</strong></p>\r\n<h4 data-v-md-heading=\"_2-数据库和文件系统的关系\" data-v-md-line=\"23\"><strong>2.</strong> <strong>数据库和文件系统的关系</strong></h4>\r\n<h5 data-v-md-heading=\"_2-1-表在文件系统中的表示\" data-v-md-line=\"25\"><strong>2.1</strong> <strong>表在文件系统中的表示</strong></h5>\r\n<h6 data-v-md-heading=\"_2-3-1-innodb存储引擎模式\" data-v-md-line=\"27\"><strong>2.3.1 InnoDB存储引擎模式</strong></h6>\r\n<p data-v-md-line=\"29\"><strong>1.</strong> <strong>表结构</strong></p>\r\n<p data-v-md-line=\"31\">为了保存表结构，<code>InnoDB</code>在<code>数据目录</code>下对应的数据库子目录下创建了一个专门用于<code>描述表结构的文件</code></p>\r\n<div data-v-md-line=\"33\"><div class=\"v-md-pre-wrapper v-md-pre-wrapper- extra-class\"><pre class=\"v-md-hljs-\"><code>表名.frm\r\n</code></pre>\r\n</div></div><p data-v-md-line=\"37\"><strong>2.</strong> <strong>表中数据和索引</strong></p>\r\n<p data-v-md-line=\"39\"><strong>① 系统表空间（system tablespace）</strong></p>\r\n<p data-v-md-line=\"41\">默认情况下，InnoDB会在数据目录下创建一个名为<code>ibdata1</code>、大小为<code>12M</code>的<code>自拓展</code>文件，这个文件就是对应的<code>系统表空间</code>在文件系统上的表示。</p>\r\n<p data-v-md-line=\"43\"><strong>② 独立表空间(file-per-table tablespace)</strong></p>\r\n<p data-v-md-line=\"45\">在MySQL5.6.6以及之后的版本中，InnoDB并不会默认的把各个表的数据存储到系统表空间中，而是为<code>每一个表建立一个独立表空间</code>，也就是说我们创建了多少个表，就有多少个独立表空间。使用<code>独立表空间</code>来存储表数据的话，会在该表所属数据库对应的子目录下创建一个表示该独立表空间的文件，文件名和表名相同。</p>\r\n<div data-v-md-line=\"47\"><div class=\"v-md-pre-wrapper v-md-pre-wrapper- extra-class\"><pre class=\"v-md-hljs-\"><code>表名.ibd\r\n</code></pre>\r\n</div></div><blockquote data-v-md-line=\"51\">\r\n<p data-v-md-line=\"51\">MySQL8.0中不再单独提供<code>表名.frm</code>，而是合并在<code>表名.ibd</code>文件中。</p>\r\n</blockquote>\r\n<p data-v-md-line=\"53\"><strong>③ 系统表空间与独立表空间的设置</strong></p>\r\n<p data-v-md-line=\"55\">我们可以自己指定使用<code>系统表空间</code>还是<code>独立表空间</code>来存储数据，这个功能由启动参数<code>innodb_file_per_table</code>控制</p>\r\n<div data-v-md-line=\"57\"><div class=\"v-md-pre-wrapper v-md-pre-wrapper-ini extra-class\"><pre class=\"v-md-hljs-ini\"><code><span class=\"hljs-section\">[server]</span> \r\n<span class=\"hljs-attr\">innodb_file_per_table</span>=<span class=\"hljs-number\">0</span> <span class=\"hljs-comment\"># 0：代表使用系统表空间； 1：代表使用独立表空间</span>\r\n</code></pre>\r\n</div></div><p data-v-md-line=\"62\"><strong>④ 其他类型的表空间</strong></p>\r\n<p data-v-md-line=\"64\">随着MySQL的发展，除了上述两种老牌表空间之外，现在还新提出了一些不同类型的表空间，比如通用表空间（general tablespace）、临时表空间（temporary tablespace）等。</p>\r\n<h6 data-v-md-heading=\"_2-3-2-myisam存储引擎模式\" data-v-md-line=\"66\"><strong>2.3.2 MyISAM存储引擎模式</strong></h6>\r\n<p data-v-md-line=\"68\"><strong>1.</strong> <strong>表结构</strong></p>\r\n<p data-v-md-line=\"70\">在存储表结构方面， MyISAM 和 InnoDB 一样，也是在<code>数据目录</code>下对应的数据库子目录下创建了一个专门用于描述表结构的文件</p>\r\n<div data-v-md-line=\"72\"><div class=\"v-md-pre-wrapper v-md-pre-wrapper- extra-class\"><pre class=\"v-md-hljs-\"><code>表名.frm\r\n</code></pre>\r\n</div></div><p data-v-md-line=\"76\"><strong>2.</strong> <strong>表中数据和索引</strong></p>\r\n<p data-v-md-line=\"78\">在MyISAM中的索引全部都是<code>二级索引</code>，该存储引擎的<code>数据和索引是分开存放</code>的。所以在文件系统中也是使用不同的文件来存储数据文件和索引文件，同时表数据都存放在对应的数据库子目录下。</p>\r\n<div data-v-md-line=\"80\"><div class=\"v-md-pre-wrapper v-md-pre-wrapper- extra-class\"><pre class=\"v-md-hljs-\"><code>test.frm 存储表结构 #MySQL8.0 改为了 b.xxx.sdi\r\ntest.MYD 存储数据 (MYData) \r\ntest.MYI 存储索引 (MYIndex\r\n</code></pre>\r\n</div></div><h3 data-v-md-heading=\"\" data-v-md-line=\"86\"></h3>\r\n', '### 第02章 MySQL的数据目录\r\n\r\n#### **1. MySQL8的主要目录结构**\r\n\r\n```shell\r\nfind / -name mysql\r\n```\r\n\r\n##### **1.1** **数据库文件的存放路径** \r\n\r\n```mysql\r\nshow variables like \'datadir\'; # /var/lib/mysql/\r\n```\r\n\r\n##### **1.2** **相关命令目录**\r\n\r\n**相关命令目录：/usr/bin 和/usr/sbin。**\r\n\r\n##### **1.3** **配置文件目录**\r\n\r\n**配置文件目录：/usr/share/mysql-8.0（命令及配置文件），/etc/mysql（如my.cnf）**\r\n\r\n#### **2.** **数据库和文件系统的关系**\r\n\r\n##### **2.1** **表在文件系统中的表示** \r\n\r\n###### **2.3.1 InnoDB存储引擎模式** \r\n\r\n**1.** **表结构**\r\n\r\n为了保存表结构，`InnoDB`在`数据目录`下对应的数据库子目录下创建了一个专门用于`描述表结构的文件`\r\n\r\n```\r\n表名.frm\r\n```\r\n\r\n**2.** **表中数据和索引**\r\n\r\n**① 系统表空间（system tablespace）**\r\n\r\n默认情况下，InnoDB会在数据目录下创建一个名为`ibdata1`、大小为`12M`的`自拓展`文件，这个文件就是对应的`系统表空间`在文件系统上的表示。\r\n\r\n**② 独立表空间(file-per-table tablespace)** \r\n\r\n在MySQL5.6.6以及之后的版本中，InnoDB并不会默认的把各个表的数据存储到系统表空间中，而是为`每一个表建立一个独立表空间`，也就是说我们创建了多少个表，就有多少个独立表空间。使用`独立表空间`来存储表数据的话，会在该表所属数据库对应的子目录下创建一个表示该独立表空间的文件，文件名和表名相同。\r\n\r\n```\r\n表名.ibd\r\n```\r\n\r\n> MySQL8.0中不再单独提供`表名.frm`，而是合并在`表名.ibd`文件中。\r\n\r\n**③ 系统表空间与独立表空间的设置**\r\n\r\n我们可以自己指定使用`系统表空间`还是`独立表空间`来存储数据，这个功能由启动参数`innodb_file_per_table`控制\r\n\r\n```ini\r\n[server] \r\ninnodb_file_per_table=0 # 0：代表使用系统表空间； 1：代表使用独立表空间\r\n```\r\n\r\n**④ 其他类型的表空间**\r\n\r\n随着MySQL的发展，除了上述两种老牌表空间之外，现在还新提出了一些不同类型的表空间，比如通用表空间（general tablespace）、临时表空间（temporary tablespace）等。\r\n\r\n###### **2.3.2 MyISAM存储引擎模式** \r\n\r\n**1.** **表结构**\r\n\r\n在存储表结构方面， MyISAM 和 InnoDB 一样，也是在`数据目录`下对应的数据库子目录下创建了一个专门用于描述表结构的文件\r\n\r\n```\r\n表名.frm\r\n```\r\n\r\n**2.** **表中数据和索引**\r\n\r\n在MyISAM中的索引全部都是`二级索引`，该存储引擎的`数据和索引是分开存放`的。所以在文件系统中也是使用不同的文件来存储数据文件和索引文件，同时表数据都存放在对应的数据库子目录下。\r\n\r\n```\r\ntest.frm 存储表结构 #MySQL8.0 改为了 b.xxx.sdi\r\ntest.MYD 存储数据 (MYData) \r\ntest.MYI 存储索引 (MYIndex\r\n```\r\n\r\n### ', 0, '1.3 配置文件目录\r\n配置文件目录：/usr/share/mysql-8.0（命令及配置文件），/etc/mysql（如my.cnf）\r\n\r\n2. 数据库和文件系统的关系\r\n2.1 表在文件系统中的表示\r\n2.3.1 InnoDB存储引擎模式', '2023-05-14 21:08:16', '2023-05-15 10:03:52', 2, 0, 0, 0, 0, NULL, 1, 3, NULL);
INSERT INTO `forum_article` VALUES ('XZxppgmZ9yBH0Hu', 10024, 'Java', 10023, '后端', '3058131375', 'niubi', '未知', 'Java的反射机制', '202305/8TnTGQLowl52Kbs.jpg', '<p data-v-md-line=\"1\">反射内容我是全程参考B站UP主韩顺平，视频链接请<a href=\"https://www.bilibili.com/video/BV1g84y1F7df?p=1&amp;vd_source=f4a650c29f13871920bf2118af71c522\" target=\"_blank\">点击跳转</a></p>\r\n<div data-v-md-line=\"3\"><div class=\"v-md-pre-wrapper v-md-pre-wrapper-java extra-class\"><pre class=\"v-md-hljs-java\"><code><span class=\"hljs-type\">Class</span> <span class=\"hljs-variable\">cls</span> <span class=\"hljs-operator\">=</span> Class.forName(类的全限定名);\r\n\r\n<span class=\"hljs-type\">Object</span> <span class=\"hljs-variable\">o</span> <span class=\"hljs-operator\">=</span> cls.newInstance();\r\n\r\n<span class=\"hljs-type\">Method</span> <span class=\"hljs-variable\">methodName</span> <span class=\"hljs-operator\">=</span> cls.getMethod(方法名);\r\n\r\nmethodName.invoke(o);\r\n</code></pre>\r\n</div></div><p data-v-md-line=\"13\">先创建Class类，在创建实例对象Object，Class创建方法对象，最后使用方法.invoke(实例对象)来执行方法。</p>\r\n<h3 data-v-md-heading=\"拓展\" data-v-md-line=\"17\">拓展：</h3>\r\n<h4 data-v-md-heading=\"jvm的内存对象存在的形式\" data-v-md-line=\"19\">JVM的内存对象存在的形式：</h4>\r\n<p data-v-md-line=\"21\"><img src=\"/api/file/getImage/202305/IN0JGBUl6h6dB7kxWa3jusSFdGVxRq.png\" alt=\"图片\"></p>\r\n<h4 data-v-md-heading=\"java程序在计算机有三个阶段\" data-v-md-line=\"22\">Java程序在计算机有三个阶段：</h4>\r\n<p data-v-md-line=\"24\"><img src=\"/api/file/getImage/202305/cGwGHRJrfhiCLDcTsUehOq7APUlvjG.png\" alt=\"图片\"><img src=\"/api/file/getImage/202305/A09otFx0N3iucM6NOmkxsMiIjFqWyT.png\" alt=\"图片\"></p>\r\n', '反射内容我是全程参考B站UP主韩顺平，视频链接请[点击跳转](https://www.bilibili.com/video/BV1g84y1F7df?p=1&vd_source=f4a650c29f13871920bf2118af71c522)\r\n\r\n```java\r\nClass cls = Class.forName(类的全限定名);\r\n\r\nObject o = cls.newInstance();\r\n\r\nMethod methodName = cls.getMethod(方法名);\r\n\r\nmethodName.invoke(o);\r\n```\r\n\r\n先创建Class类，在创建实例对象Object，Class创建方法对象，最后使用方法.invoke(实例对象)来执行方法。\r\n\r\n\r\n\r\n### 拓展：\r\n\r\n#### JVM的内存对象存在的形式：\r\n\r\n![图片](/api/file/getImage/202305/IN0JGBUl6h6dB7kxWa3jusSFdGVxRq.png)\r\n#### Java程序在计算机有三个阶段：\r\n\r\n![图片](/api/file/getImage/202305/cGwGHRJrfhiCLDcTsUehOq7APUlvjG.png)![图片](/api/file/getImage/202305/A09otFx0N3iucM6NOmkxsMiIjFqWyT.png)\r\n\r\n\r\n\r\n\r\n', 0, '先创建Class类，在创建实例对象Object，Class创建方法对象，最后使用方法.invoke(实例对象)来执行方法', '2023-05-14 13:53:34', '2023-05-15 10:01:57', 1, 0, 0, 0, 0, 0, -1, 2, NULL);
INSERT INTO `forum_article` VALUES ('ZNHvjccthK4ulY1', 10027, 'c++', 10023, '后端', '8408747315', '猜猜我是谁', '未知', 'mysql存储引擎', '202305/UiKBUOt0sYjLalR.jpg', '<h3 data-v-md-heading=\"第05章-存储引擎\" data-v-md-line=\"1\">第05章 存储引擎</h3>\r\n<h4 data-v-md-heading=\"_1-查看存储引擎\" data-v-md-line=\"3\"><strong>1.</strong> <strong>查看存储引擎</strong></h4>\r\n<div data-v-md-line=\"5\"><div class=\"v-md-pre-wrapper v-md-pre-wrapper-mysql extra-class\"><pre class=\"v-md-hljs-mysql\"><code>show engines;\r\n# 或\r\nshow engines\\G\r\n</code></pre>\r\n</div></div><h4 data-v-md-heading=\"_2-设置系统默认的存储引擎\" data-v-md-line=\"11\"><strong>2.</strong> <strong>设置系统默认的存储引擎</strong></h4>\r\n<ul data-v-md-line=\"13\">\r\n<li>查看默认的存储引擎：</li>\r\n</ul>\r\n<div data-v-md-line=\"15\"><div class=\"v-md-pre-wrapper v-md-pre-wrapper-mysql extra-class\"><pre class=\"v-md-hljs-mysql\"><code>show variables like \'%storage_engine%\'; \r\n#或\r\nSELECT @@default_storage_engine;\r\n</code></pre>\r\n</div></div><ul data-v-md-line=\"21\">\r\n<li>修改默认的存储引擎</li>\r\n</ul>\r\n<p data-v-md-line=\"23\">如果在创建表的语句中没有显式指定表的存储引擎的话，那就会默认使用<code>InnoDB</code>作为表的存储引擎。</p>\r\n<div data-v-md-line=\"25\"><div class=\"v-md-pre-wrapper v-md-pre-wrapper-mysql extra-class\"><pre class=\"v-md-hljs-mysql\"><code>SET DEFAULT_STORAGE_ENGINE=MyISAM;\r\n</code></pre>\r\n</div></div><p data-v-md-line=\"29\">或者修改<code>my.cnf</code>文件：</p>\r\n<div data-v-md-line=\"31\"><div class=\"v-md-pre-wrapper v-md-pre-wrapper-ini extra-class\"><pre class=\"v-md-hljs-ini\"><code><span class=\"hljs-attr\">default-storage-engine</span>=MyISAM \r\n</code></pre>\r\n</div></div><div data-v-md-line=\"35\"><div class=\"v-md-pre-wrapper v-md-pre-wrapper-shell extra-class\"><pre class=\"v-md-hljs-shell\"><code><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">重启服务</span> \r\nsystemctl restart mysqld.service\r\n</code></pre>\r\n</div></div><h4 data-v-md-heading=\"_3-设置表的存储引擎\" data-v-md-line=\"40\"><strong>3.</strong> <strong>设置表的存储引擎</strong></h4>\r\n<p data-v-md-line=\"42\">存储引擎是负责对表中的数据进行提取和写入工作的，我们可以为<code>不同的表设置不同的存储引擎</code>，也就是说不同的表可以有不同的物理存储结构，不同的提取和写入方式。</p>\r\n<h5 data-v-md-heading=\"_3-1-创建表时指定存储引擎\" data-v-md-line=\"44\"><strong>3.1</strong> <strong>创建表时指定存储引擎</strong></h5>\r\n<div data-v-md-line=\"46\"><div class=\"v-md-pre-wrapper v-md-pre-wrapper-mysql extra-class\"><pre class=\"v-md-hljs-mysql\"><code>CREATE TABLE 表名(\r\n    建表语句; \r\n) ENGINE = 存储引擎名称;\r\n</code></pre>\r\n</div></div><h5 data-v-md-heading=\"_3-2-修改表的存储引擎\" data-v-md-line=\"52\"><strong>3.2</strong> <strong>修改表的存储引擎</strong></h5>\r\n<div data-v-md-line=\"54\"><div class=\"v-md-pre-wrapper v-md-pre-wrapper-mysql extra-class\"><pre class=\"v-md-hljs-mysql\"><code>ALTER TABLE 表名 ENGINE = 存储引擎名称;\r\n</code></pre>\r\n</div></div><h4 data-v-md-heading=\"_4-引擎介绍\" data-v-md-line=\"58\"><strong>4.</strong> <strong>引擎介绍</strong></h4>\r\n<h5 data-v-md-heading=\"_4-1-innodb-引擎-具备外键支持功能的事务存储引擎\" data-v-md-line=\"60\"><strong>4.1 InnoDB</strong> <strong>引擎：具备外键支持功能的事务存储引擎</strong></h5>\r\n<ul data-v-md-line=\"62\">\r\n<li>MySQL从3.23.34a开始就包含InnoDB存储引擎。<code>大于等于5.5之后，默认采用InnoDB引擎</code>。</li>\r\n<li>InnoDB是MySQL的<code>默认事务型引擎</code>，它被设计用来处理大量的短期(short-lived)事务。可以确保事务的完整提交(Commit)和回滚(Rollback)。</li>\r\n<li>除了增加和查询外，还需要更新、删除操作，那么，应优先选择InnoDB存储引擎。</li>\r\n<li><strong>除非有非常特别的原因需要使用其他的存储引擎，否则应该优先考虑InnoDB引擎。</strong></li>\r\n<li>数据文件结构：\r\n<ul data-v-md-line=\"67\">\r\n<li>表名.frm 存储表结构（MySQL8.0时，合并在表名.ibd中）</li>\r\n<li>表名.ibd 存储数据和索引</li>\r\n</ul>\r\n</li>\r\n<li>InnoDB是<code>为处理巨大数据量的最大性能设计</code>。\r\n<ul data-v-md-line=\"70\">\r\n<li>在以前的版本中，字典数据以元数据文件、非事务表等来存储。现在这些元数据文件被删除了。比如：<code>.frm</code>，<code>.par</code>，<code>.trn</code>，<code>.isl</code>，<code>.db.opt</code>等都在MySQL8.0中不存在了。</li>\r\n</ul>\r\n</li>\r\n<li>对比MyISAM的存储引擎，<code>InnoDB写的处理效率差一些</code>，并且会占用更多的磁盘空间以保存数据和索引。</li>\r\n<li>MyISAM只缓存索引，不缓存真实数据；InnoDB不仅缓存索引还要缓存真实数据，<code>对内存要求较高</code>，而且内存大小对性能有决定性的影响。</li>\r\n</ul>\r\n<h5 data-v-md-heading=\"_4-2-myisam-引擎-主要的非事务处理存储引擎\" data-v-md-line=\"74\"><strong>4.2 MyISAM</strong> <strong>引擎：主要的非事务处理存储引擎</strong></h5>\r\n<ul data-v-md-line=\"76\">\r\n<li>MyISAM提供了大量的特性，包括全文索引、压缩、空间函数(GIS)等，但MyISAM<code>不支持事务、行级锁、外键</code>，有一个毫无疑问的缺陷就是<code>崩溃后无法安全恢复</code>。</li>\r\n<li><code>5.5之前默认的存储引擎</code></li>\r\n<li>优势是访问的<code>速度快</code>，对事务完整性没有要求或者以SELECT、INSERT为主的应用</li>\r\n<li>针对数据统计有额外的常数存储。故而 count(*) 的查询效率很高</li>\r\n<li>数据文件结构：\r\n<ul data-v-md-line=\"81\">\r\n<li>表名.frm 存储表结构</li>\r\n<li>表名.MYD 存储数据 (MYData)</li>\r\n<li>表名.MYI 存储索引 (MYIndex)</li>\r\n</ul>\r\n</li>\r\n<li>应用场景：只读应用或者以读为主的业务</li>\r\n</ul>\r\n<h5 data-v-md-heading=\"_4-3-archive-引擎-用于数据存档\" data-v-md-line=\"86\"><strong>4.3 Archive</strong> <strong>引擎：用于数据存档</strong></h5>\r\n<h5 data-v-md-heading=\"_4-4-blackhole-引擎-丢弃写操作-读操作会返回空内容\" data-v-md-line=\"88\"><strong>4.4 Blackhole</strong> <strong>引擎：丢弃写操作，读操作会返回空内容</strong></h5>\r\n<h5 data-v-md-heading=\"_4-5-csv-引擎-存储数据时-以逗号分隔各个数据项\" data-v-md-line=\"90\"><strong>4.5 CSV</strong> <strong>引擎：存储数据时，以逗号分隔各个数据项</strong></h5>\r\n<h5 data-v-md-heading=\"_4-6-memory-引擎-置于内存的表\" data-v-md-line=\"92\"><strong>4.6 Memory</strong> <strong>引擎：置于内存的表</strong></h5>\r\n<h5 data-v-md-heading=\"_4-7-federated-引擎-访问远程表\" data-v-md-line=\"94\"><strong>4.7 Federated</strong> <strong>引擎：访问远程表</strong></h5>\r\n<h5 data-v-md-heading=\"_4-8-merge引擎-管理多个myisam表构成的表集合\" data-v-md-line=\"96\"><strong>4.8 Merge引擎：管理多个MyISAM表构成的表集合</strong></h5>\r\n<h5 data-v-md-heading=\"_4-9-ndb引擎-mysql集群专用存储引擎\" data-v-md-line=\"98\"><strong>4.9 NDB引擎：MySQL集群专用存储引擎</strong></h5>\r\n<h4 data-v-md-heading=\"_5-myisam和innodb\" data-v-md-line=\"100\"><strong>5. MyISAM和InnoDB</strong></h4>\r\n<table data-v-md-line=\"102\">\r\n<thead>\r\n<tr>\r\n<th>对比项</th>\r\n<th><strong>MyISAM</strong></th>\r\n<th><strong>InnoDB</strong></th>\r\n</tr>\r\n</thead>\r\n<tbody>\r\n<tr>\r\n<td>外键</td>\r\n<td>不支持</td>\r\n<td>支持</td>\r\n</tr>\r\n<tr>\r\n<td>事务</td>\r\n<td>不支持</td>\r\n<td>支持</td>\r\n</tr>\r\n<tr>\r\n<td>行表锁</td>\r\n<td>表锁，即使操作一条记录也会锁住整个表，不适合高并发的操作</td>\r\n<td>行锁，操作时只锁某一行，不对其它行有影响，适合高并发的操作</td>\r\n</tr>\r\n<tr>\r\n<td>缓存</td>\r\n<td>只缓存索引，不缓存真实数据</td>\r\n<td>不仅缓存索引还要缓存真实数据，对内存要求较高，而且内存大小对性能有决定性的影响</td>\r\n</tr>\r\n<tr>\r\n<td>自带系统表使用</td>\r\n<td>Y</td>\r\n<td>N</td>\r\n</tr>\r\n<tr>\r\n<td>关注点</td>\r\n<td>性能：节省资源、消耗少、简单业务</td>\r\n<td>事务：并发写、事务、更大资源</td>\r\n</tr>\r\n<tr>\r\n<td>默认安装</td>\r\n<td>Y</td>\r\n<td>Y</td>\r\n</tr>\r\n<tr>\r\n<td>默认使用</td>\r\n<td>N</td>\r\n<td>Y</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n<h3 data-v-md-heading=\"\" data-v-md-line=\"113\"></h3>\r\n', '### 第05章 存储引擎\r\n\r\n#### **1.** **查看存储引擎**\r\n\r\n```mysql\r\nshow engines;\r\n# 或\r\nshow engines\\G\r\n```\r\n\r\n#### **2.** **设置系统默认的存储引擎**\r\n\r\n- 查看默认的存储引擎：\r\n\r\n```mysql\r\nshow variables like \'%storage_engine%\'; \r\n#或\r\nSELECT @@default_storage_engine;\r\n```\r\n\r\n- 修改默认的存储引擎\r\n\r\n如果在创建表的语句中没有显式指定表的存储引擎的话，那就会默认使用`InnoDB`作为表的存储引擎。\r\n\r\n```mysql\r\nSET DEFAULT_STORAGE_ENGINE=MyISAM;\r\n```\r\n\r\n或者修改`my.cnf`文件：\r\n\r\n```ini\r\ndefault-storage-engine=MyISAM \r\n```\r\n\r\n```shell\r\n# 重启服务 \r\nsystemctl restart mysqld.service\r\n```\r\n\r\n#### **3.** **设置表的存储引擎**\r\n\r\n存储引擎是负责对表中的数据进行提取和写入工作的，我们可以为`不同的表设置不同的存储引擎`，也就是说不同的表可以有不同的物理存储结构，不同的提取和写入方式。\r\n\r\n##### **3.1** **创建表时指定存储引擎**\r\n\r\n```mysql\r\nCREATE TABLE 表名(\r\n    建表语句; \r\n) ENGINE = 存储引擎名称;\r\n```\r\n\r\n##### **3.2** **修改表的存储引擎**\r\n\r\n```mysql\r\nALTER TABLE 表名 ENGINE = 存储引擎名称;\r\n```\r\n\r\n#### **4.** **引擎介绍**\r\n\r\n##### **4.1 InnoDB** **引擎：具备外键支持功能的事务存储引擎**\r\n\r\n- MySQL从3.23.34a开始就包含InnoDB存储引擎。`大于等于5.5之后，默认采用InnoDB引擎`。 \r\n- InnoDB是MySQL的`默认事务型引擎`，它被设计用来处理大量的短期(short-lived)事务。可以确保事务的完整提交(Commit)和回滚(Rollback)。\r\n- 除了增加和查询外，还需要更新、删除操作，那么，应优先选择InnoDB存储引擎。\r\n- **除非有非常特别的原因需要使用其他的存储引擎，否则应该优先考虑InnoDB引擎。**\r\n- 数据文件结构：\r\n  - 表名.frm 存储表结构（MySQL8.0时，合并在表名.ibd中）\r\n  - 表名.ibd 存储数据和索引\r\n- InnoDB是`为处理巨大数据量的最大性能设计`。\r\n  - 在以前的版本中，字典数据以元数据文件、非事务表等来存储。现在这些元数据文件被删除了。比如：`.frm`，`.par`，`.trn`，`.isl`，`.db.opt`等都在MySQL8.0中不存在了。\r\n- 对比MyISAM的存储引擎，`InnoDB写的处理效率差一些`，并且会占用更多的磁盘空间以保存数据和索引。\r\n- MyISAM只缓存索引，不缓存真实数据；InnoDB不仅缓存索引还要缓存真实数据，`对内存要求较高`，而且内存大小对性能有决定性的影响。\r\n\r\n##### **4.2 MyISAM** **引擎：主要的非事务处理存储引擎**\r\n\r\n- MyISAM提供了大量的特性，包括全文索引、压缩、空间函数(GIS)等，但MyISAM`不支持事务、行级锁、外键`，有一个毫无疑问的缺陷就是`崩溃后无法安全恢复`。 \r\n- `5.5之前默认的存储引擎`\r\n- 优势是访问的`速度快`，对事务完整性没有要求或者以SELECT、INSERT为主的应用\r\n- 针对数据统计有额外的常数存储。故而 count(*) 的查询效率很高\r\n- 数据文件结构：\r\n  - 表名.frm 存储表结构\r\n  - 表名.MYD 存储数据 (MYData)\r\n  - 表名.MYI 存储索引 (MYIndex)\r\n- 应用场景：只读应用或者以读为主的业务\r\n\r\n##### **4.3 Archive** **引擎：用于数据存档**\r\n\r\n##### **4.4 Blackhole** **引擎：丢弃写操作，读操作会返回空内容** \r\n\r\n##### **4.5 CSV** **引擎：存储数据时，以逗号分隔各个数据项**\r\n\r\n##### **4.6 Memory** **引擎：置于内存的表**\r\n\r\n##### **4.7 Federated** **引擎：访问远程表** \r\n\r\n##### **4.8 Merge引擎：管理多个MyISAM表构成的表集合** \r\n\r\n##### **4.9 NDB引擎：MySQL集群专用存储引擎**\r\n\r\n#### **5. MyISAM和InnoDB**\r\n\r\n| 对比项         | **MyISAM**                                               | **InnoDB**                                                   |\r\n| -------------- | -------------------------------------------------------- | ------------------------------------------------------------ |\r\n| 外键           | 不支持                                                   | 支持                                                         |\r\n| 事务           | 不支持                                                   | 支持                                                         |\r\n| 行表锁         | 表锁，即使操作一条记录也会锁住整个表，不适合高并发的操作 | 行锁，操作时只锁某一行，不对其它行有影响，适合高并发的操作   |\r\n| 缓存           | 只缓存索引，不缓存真实数据                               | 不仅缓存索引还要缓存真实数据，对内存要求较高，而且内存大小对性能有决定性的影响 |\r\n| 自带系统表使用 | Y                                                        | N                                                            |\r\n| 关注点         | 性能：节省资源、消耗少、简单业务                         | 事务：并发写、事务、更大资源                                 |\r\n| 默认安装       | Y                                                        | Y                                                            |\r\n| 默认使用       | N                                                        | Y                                                            |\r\n\r\n### ', 0, 'MySQL从3.23.34a开始就包含InnoDB存储引擎。大于等于5.5之后，默认采用InnoDB引擎。\r\nInnoDB是MySQL的默认事务型引擎，它被设计用来处理大量的短期(short-lived)事务。可以确保事务的完整提交(Commit)和回滚(Rollback)。\r\n除了增加和查询外，还需要更新、删除操作，那么，应优先选择InnoDB存储引擎。\r\n', '2023-05-14 21:12:03', '2023-05-29 14:24:07', 14, 0, 0, 0, 0, NULL, 1, 3, NULL);

-- ----------------------------
-- Table structure for forum_article_attachment
-- ----------------------------
DROP TABLE IF EXISTS `forum_article_attachment`;
CREATE TABLE `forum_article_attachment`  (
  `file_id` varchar(15) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL COMMENT '文件ID',
  `article_id` varchar(15) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL COMMENT '文章ID',
  `user_id` varchar(15) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '用户id',
  `file_size` bigint(20) NULL DEFAULT NULL COMMENT '文件大小',
  `file_name` varchar(200) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '文件名称',
  `download_count` int(11) NULL DEFAULT NULL COMMENT '下载次数',
  `file_path` varchar(100) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '文件路径',
  `file_type` tinyint(4) NULL DEFAULT NULL COMMENT '文件类型',
  `integral` int(11) NULL DEFAULT NULL COMMENT '下载所需积分',
  PRIMARY KEY (`file_id`) USING BTREE,
  INDEX `idx_article_id`(`article_id`) USING BTREE,
  INDEX `idx_user_id`(`user_id`) USING BTREE
) ENGINE = InnoDB CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci COMMENT = '文件信息' ROW_FORMAT = DYNAMIC;

-- ----------------------------
-- Records of forum_article_attachment
-- ----------------------------

-- ----------------------------
-- Table structure for forum_article_attachment_download
-- ----------------------------
DROP TABLE IF EXISTS `forum_article_attachment_download`;
CREATE TABLE `forum_article_attachment_download`  (
  `file_id` varchar(15) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL COMMENT '文件ID',
  `user_id` varchar(15) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL COMMENT '用户id',
  `article_id` varchar(15) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL COMMENT '文章ID',
  `download_count` int(11) NULL DEFAULT 1 COMMENT '文件下载次数',
  PRIMARY KEY (`file_id`, `user_id`) USING BTREE
) ENGINE = InnoDB CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci COMMENT = '用户附件下载' ROW_FORMAT = DYNAMIC;

-- ----------------------------
-- Records of forum_article_attachment_download
-- ----------------------------

-- ----------------------------
-- Table structure for forum_board
-- ----------------------------
DROP TABLE IF EXISTS `forum_board`;
CREATE TABLE `forum_board`  (
  `board_id` int(11) NOT NULL AUTO_INCREMENT COMMENT '板块ID',
  `p_board_id` int(11) NULL DEFAULT NULL COMMENT '父级板块ID',
  `board_name` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '板块名',
  `cover` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '封面',
  `board_desc` varchar(150) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '描述',
  `sort` int(11) NULL DEFAULT NULL COMMENT '排序',
  `post_type` tinyint(1) NULL DEFAULT 1 COMMENT '0:只允许管理员发帖 1:任何人可以发帖',
  PRIMARY KEY (`board_id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 10032 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci COMMENT = '文章板块信息' ROW_FORMAT = DYNAMIC;

-- ----------------------------
-- Records of forum_board
-- ----------------------------
INSERT INTO `forum_board` VALUES (10014, 0, '前端', NULL, '前端板块', 1, 1);
INSERT INTO `forum_board` VALUES (10017, 10014, 'vue', NULL, 'vue板块内容', 1, 1);
INSERT INTO `forum_board` VALUES (10018, 10014, 'JavaScript', NULL, 'javascript板块内容', 2, 1);
INSERT INTO `forum_board` VALUES (10019, 10014, 'css', NULL, 'css', 3, 1);
INSERT INTO `forum_board` VALUES (10020, 10014, 'html', NULL, 'html', 4, 1);
INSERT INTO `forum_board` VALUES (10023, 0, '后端', NULL, '后端板块', 2, 1);
INSERT INTO `forum_board` VALUES (10024, 10023, 'Java', NULL, '后端', 1, 1);
INSERT INTO `forum_board` VALUES (10025, 10023, 'Go', NULL, 'go', 2, 1);
INSERT INTO `forum_board` VALUES (10026, 10023, 'c#', NULL, 'c#', 3, 1);
INSERT INTO `forum_board` VALUES (10027, 10023, 'c++', NULL, 'c++', 4, 1);
INSERT INTO `forum_board` VALUES (10029, 0, '其他', NULL, '其他内容板块', 3, 1);
INSERT INTO `forum_board` VALUES (10030, 10029, 'mysql', NULL, 'mysql', 1, 1);
INSERT INTO `forum_board` VALUES (10031, 10029, 'linux', NULL, 'linux', 2, 1);

-- ----------------------------
-- Table structure for forum_comment
-- ----------------------------
DROP TABLE IF EXISTS `forum_comment`;
CREATE TABLE `forum_comment`  (
  `comment_id` int(11) NOT NULL AUTO_INCREMENT COMMENT '评论ID',
  `p_comment_id` int(11) NULL DEFAULT NULL COMMENT '父级评论ID',
  `article_id` varchar(15) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL COMMENT '文章ID',
  `original_content` varchar(800) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '原来的评论（未屏蔽）',
  `content` varchar(800) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '评论内容(屏蔽词过滤后)',
  `img_path` varchar(150) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '图片',
  `user_id` varchar(15) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL COMMENT '用户ID',
  `nick_name` varchar(20) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '昵称',
  `user_ip_address` varchar(100) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '用户ip地址',
  `reply_user_id` varchar(15) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '回复人ID',
  `reply_nick_name` varchar(20) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '回复人昵称',
  `top_type` tinyint(4) NULL DEFAULT 0 COMMENT '0:未置顶  1:置顶',
  `post_time` datetime NULL DEFAULT NULL COMMENT '发布时间',
  `good_count` int(11) NULL DEFAULT 0 COMMENT 'good数量',
  `status` tinyint(4) NULL DEFAULT NULL COMMENT '0:待审核  1:已审核',
  PRIMARY KEY (`comment_id`) USING BTREE,
  INDEX `idx_article_id`(`article_id`) USING BTREE,
  INDEX `idx_post_time`(`post_time`) USING BTREE,
  INDEX `idx_top`(`top_type`) USING BTREE,
  INDEX `idx_p_id`(`p_comment_id`) USING BTREE,
  INDEX `idx_status`(`status`) USING BTREE,
  INDEX `idx_user_id`(`user_id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 10031 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci COMMENT = '评论' ROW_FORMAT = DYNAMIC;

-- ----------------------------
-- Records of forum_comment
-- ----------------------------
INSERT INTO `forum_comment` VALUES (10022, 0, 'OlCSNpv6zq6i72O', '测试评论功能中', '测试评论功能中', NULL, '3058131375', 'niubi', '未知', '', NULL, 0, '2023-05-14 21:01:56', 0, -1);
INSERT INTO `forum_comment` VALUES (10023, 10022, 'OlCSNpv6zq6i72O', '测试评论功能22222', '测试评论功能22222', NULL, '3058131375', 'niubi', '未知', '3058131375', 'niubi', 0, '2023-05-14 21:02:06', 0, -1);
INSERT INTO `forum_comment` VALUES (10024, 10022, 'OlCSNpv6zq6i72O', '牛的牛的的顶顶顶顶顶', '牛的牛的的顶顶顶顶顶', NULL, '8408747315', '猜猜我是谁', '未知', '3058131375', 'niubi', 0, '2023-05-14 21:03:06', 0, 1);
INSERT INTO `forum_comment` VALUES (10025, 0, 'OlCSNpv6zq6i72O', '2222222222222222', '2222222222222222', NULL, '8408747315', '猜猜我是谁', '未知', '', NULL, 0, '2023-05-14 21:05:58', 0, 1);
INSERT INTO `forum_comment` VALUES (10026, 0, 'OlCSNpv6zq6i72O', '你就是一个sb', '你就是一个**', NULL, '8423597423', 'niuniuiu', '未知', '', NULL, 0, '2023-05-15 10:22:24', 0, -1);
INSERT INTO `forum_comment` VALUES (10027, 0, 'PW7QQfQXILxF9Wy', '可以是·，good', '可以是·，good', NULL, '8423597423', 'niuniuiu', '未知', '', NULL, 0, '2023-05-15 11:07:55', 0, 1);
INSERT INTO `forum_comment` VALUES (10028, 0, 'PW7QQfQXILxF9Wy', '你的文章就是一坨，sb', '你的文章就是一坨，**', NULL, '8423597423', 'niuniuiu', '未知', '', NULL, 0, '2023-05-15 18:28:07', 0, 1);
INSERT INTO `forum_comment` VALUES (10029, 0, 'PW7QQfQXILxF9Wy', 'ddddd', 'ddddd', NULL, '8423597423', 'niuniuiu', '未知', '', NULL, 0, '2023-05-30 15:49:30', 0, 1);
INSERT INTO `forum_comment` VALUES (10030, 10029, 'PW7QQfQXILxF9Wy', 'dddddssss', 'dddddssss', NULL, '8423597423', 'niuniuiu', '未知', '8423597423', 'niuniuiu', 0, '2023-05-30 15:49:35', 0, 1);

-- ----------------------------
-- Table structure for friendly_links
-- ----------------------------
DROP TABLE IF EXISTS `friendly_links`;
CREATE TABLE `friendly_links`  (
  `id` int(15) NOT NULL AUTO_INCREMENT COMMENT '主键自增',
  `icon` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '图标icon',
  `title` varchar(100) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '标题',
  `desc` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '描述信息',
  `address` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '跳转地址',
  `order` int(25) NULL DEFAULT NULL COMMENT '排序',
  `status` tinyint(4) NULL DEFAULT NULL COMMENT '0 - 启用, 1 - 停用',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 8 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci ROW_FORMAT = DYNAMIC;

-- ----------------------------
-- Records of friendly_links
-- ----------------------------
INSERT INTO `friendly_links` VALUES (4, '202305/DzkfLgmJaIYiuIB.jpg', 'bilibili弹幕网', 'b站，一个学习的地方', 'www.bilibili.com', 1, 1);
INSERT INTO `friendly_links` VALUES (5, '202305/FPwWDzFf7Inv2lB.png', '百度一下', '有什么不懂就问一下度娘吧', 'www.baidu.com', 2, 1);
INSERT INTO `friendly_links` VALUES (6, '202305/YPBZPCFP4nfBTAj.jpeg', '百度地址2', '有问题问百度', 'www.baidu.com', 3, 1);
INSERT INTO `friendly_links` VALUES (7, '202305/8p98zXa6E2DtW99.jpg', '淘宝', '淘宝，买东西', 'www.taobao.com', 4, 1);

-- ----------------------------
-- Table structure for img_category
-- ----------------------------
DROP TABLE IF EXISTS `img_category`;
CREATE TABLE `img_category`  (
  `id` int(15) NOT NULL AUTO_INCREMENT COMMENT '自增id',
  `name` varchar(20) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '分类名',
  `order` int(10) NULL DEFAULT NULL COMMENT '排序字段',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 15 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci ROW_FORMAT = DYNAMIC;

-- ----------------------------
-- Records of img_category
-- ----------------------------
INSERT INTO `img_category` VALUES (7, '生活', 1);
INSERT INTO `img_category` VALUES (8, '风景', 2);
INSERT INTO `img_category` VALUES (9, '美食', 3);
INSERT INTO `img_category` VALUES (10, '游戏', 4);
INSERT INTO `img_category` VALUES (11, '城市', 5);
INSERT INTO `img_category` VALUES (12, '乡村', 6);
INSERT INTO `img_category` VALUES (13, '工作', 7);
INSERT INTO `img_category` VALUES (14, '其他', 8);

-- ----------------------------
-- Table structure for img_gallery
-- ----------------------------
DROP TABLE IF EXISTS `img_gallery`;
CREATE TABLE `img_gallery`  (
  `id` int(15) NOT NULL AUTO_INCREMENT COMMENT '主键自增id',
  `img` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '图片地址',
  `category_id` int(15) NULL DEFAULT NULL COMMENT '分类id',
  `category_name` varchar(15) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '分类名称',
  `user_id` varchar(15) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL COMMENT '用户id',
  `nickname` varchar(20) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '用户昵称',
  `create_time` datetime NULL DEFAULT NULL COMMENT '创建时间',
  `update_time` datetime NULL DEFAULT NULL COMMENT '更新时间',
  `status` tinyint(4) NOT NULL COMMENT '状态(0-未审核, 1-已审核, 2-审核未通过)',
  `status2` tinyint(4) NOT NULL COMMENT '信息状态(0-隐藏, 1-展示)',
  `status3` tinyint(4) NULL DEFAULT NULL COMMENT '冻结状态(0 - 未冻结, 1 - 已冻结)',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 23 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci ROW_FORMAT = DYNAMIC;

-- ----------------------------
-- Records of img_gallery
-- ----------------------------
INSERT INTO `img_gallery` VALUES (20, '202305/sQkuVvhXCaZbxvE.jpg', 7, '生活', '8423597423', 'niuniuiu', '2023-05-15 19:03:21', '2023-05-15 19:03:21', 1, 1, 0);
INSERT INTO `img_gallery` VALUES (21, '202305/8qMGsIN8GamiM4Y.jpeg', 8, '风景', '9008483061', 'niucha', '2023-05-20 08:59:01', '2023-05-20 08:59:01', 1, 1, 0);
INSERT INTO `img_gallery` VALUES (22, '202305/6zHcyunCiOoH6Cy.jpg', 11, '城市', '9008483061', 'niucha', '2023-05-20 08:59:43', '2023-05-20 08:59:43', 0, 1, 0);

-- ----------------------------
-- Table structure for like_record
-- ----------------------------
DROP TABLE IF EXISTS `like_record`;
CREATE TABLE `like_record`  (
  `op_id` int(11) NOT NULL AUTO_INCREMENT COMMENT '自增ID',
  `op_type` tinyint(4) NULL DEFAULT NULL COMMENT '操作类型0:文章点赞 1:评论点赞',
  `object_id` varchar(15) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL COMMENT '主体ID',
  `user_id` varchar(15) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL COMMENT '用户ID',
  `create_time` datetime NULL DEFAULT NULL COMMENT '发布时间',
  `author_user_id` varchar(15) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '主体作者ID',
  PRIMARY KEY (`op_id`) USING BTREE,
  UNIQUE INDEX `idx_key`(`object_id`, `user_id`, `op_type`) USING BTREE,
  INDEX `idx_user_id`(`user_id`, `op_type`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 10021 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci COMMENT = '点赞记录' ROW_FORMAT = DYNAMIC;

-- ----------------------------
-- Records of like_record
-- ----------------------------
INSERT INTO `like_record` VALUES (10017, 0, 'OlCSNpv6zq6i72O', '9008483061', '2023-05-14 21:53:38', '3058131375');
INSERT INTO `like_record` VALUES (10018, 0, 'OlCSNpv6zq6i72O', '8423597423', '2023-05-15 10:22:02', '3058131375');
INSERT INTO `like_record` VALUES (10019, 0, 'PW7QQfQXILxF9Wy', '8423597423', '2023-05-15 18:27:47', '8408747315');
INSERT INTO `like_record` VALUES (10020, 0, 'PW7QQfQXILxF9Wy', '9008483061', '2023-05-30 15:05:17', '8408747315');

-- ----------------------------
-- Table structure for notice
-- ----------------------------
DROP TABLE IF EXISTS `notice`;
CREATE TABLE `notice`  (
  `id` int(11) NOT NULL AUTO_INCREMENT COMMENT '主键 自增id',
  `title` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL COMMENT '公告标题',
  `content` text CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL COMMENT '公告内容',
  `status` tinyint(1) NOT NULL DEFAULT 0 COMMENT '公告状态：0-未发布，1-已发布',
  `create_time` datetime NULL DEFAULT NULL COMMENT '创建时间',
  `update_time` datetime NOT NULL COMMENT '更新时间',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 12 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci ROW_FORMAT = DYNAMIC;

-- ----------------------------
-- Records of notice
-- ----------------------------
INSERT INTO `notice` VALUES (9, '好用的WordPress公告/通知栏插件', '<p style=\"text-align: start; line-height: 1.5;\">当您希望在WordPress网站上促进转化时，弹窗和通知会有所帮助。但是，重要的是要确保这些元素不会通过阻塞它们的视图而损害用户体验（UX）。</p><p style=\"text-align: start; line-height: 1.5;\">这就是通知栏的所在。它们提供了一种非侵入性的方式来推广新产品，将流量吸引到特定页面或捕获电子邮件。此外，还有很多WordPress通知栏插件可供选择。</p><p style=\"text-align: start; line-height: 1.5;\">在本文中，我们将讨论向WordPress网站添加通知栏的好处以及一些流行的使用方式。然后，我们将为您推荐一些比较好用的WordPress通知栏插件。</p><p style=\"text-align: start; line-height: 1.5;\">让我们开始吧！</p><p style=\"text-align: start; line-height: 1.5;\"><img src=\"/api/file/getImage/temp/cRNcsGZXvasETqnXQLv5RkhTqE9AgS.jpg\" alt=\"\" data-href=\"\" style=\"\"></p><p style=\"text-align: start; line-height: 1.5;\">WordPress通知栏提供了一种强大的方式来在您的网站上显示重要的公告，消息和号召性用语（CTA）。它们通常出现在屏幕的顶部或底部，以吸引访问者的注意力并将他们定向到您网站上的某个页面。</p><p style=\"text-align: start; line-height: 1.5;\">通知栏是一种非侵入性的方法，可以使您的站点上的重要内容对观众更可见。与全屏弹窗和滑出窗口不同，它们不会遮挡查看区域，从而使它们不那么烦恼或可能妨碍UX。</p><p style=\"text-align: start; line-height: 1.5;\">您可以使用通知栏来：</p><ul><li style=\"text-align: start;\">显示重要的更新、新闻和公告</li><li style=\"text-align: start;\">捕获电子邮件以建立您的订阅列表并产生潜在客户</li><li style=\"text-align: start;\">促进特价和销售</li></ul><p style=\"text-align: start; line-height: 1.5;\">另外，当您使用WordPress通知栏插件时，将它们添加到您的网站是快速简便的。许多工具都提供了各种样式和自定义选项，以及可以最大化其影响的功能和集成。</p><p style=\"text-align: start; line-height: 1.5;\">例如，根据您使用的插件，您可以添加动态和交互式元素，包括CTA按钮、动画和倒数计时器。某些WordPress通知栏插件甚至允许您创建通知栏活动、执行拆分测试、目标消息等。</p>', 1, '2023-05-15 09:35:23', '2023-05-15 09:35:23');
INSERT INTO `notice` VALUES (10, '公告测试功能', '<p>测试</p><p><img src=\"/api/file/getImage/temp/LgbzWhE3hlaQjfG6c7LcnDzdOxUeJW.jpg\" alt=\"\" data-href=\"\" style=\"\"/></p>', 0, '2023-05-15 10:11:29', '2023-05-15 10:11:29');
INSERT INTO `notice` VALUES (11, '测试', '<p>少时诵诗书所</p>', 0, '2023-05-15 18:56:06', '2023-05-15 18:56:06');

-- ----------------------------
-- Table structure for sensitive_word
-- ----------------------------
DROP TABLE IF EXISTS `sensitive_word`;
CREATE TABLE `sensitive_word`  (
  `id` int(11) NOT NULL AUTO_INCREMENT COMMENT '自增主键',
  `word` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '敏感词',
  `status` tinyint(4) NULL DEFAULT 0 COMMENT '状态(0:未使用 1:使用)',
  `create_time` datetime NULL DEFAULT NULL COMMENT '创建时间',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 16 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci ROW_FORMAT = DYNAMIC;

-- ----------------------------
-- Records of sensitive_word
-- ----------------------------
INSERT INTO `sensitive_word` VALUES (8, 'sb', 1, '2023-05-15 09:37:06');
INSERT INTO `sensitive_word` VALUES (9, '牛逼', 1, '2023-05-15 09:37:13');
INSERT INTO `sensitive_word` VALUES (10, '你他妈的', 1, '2023-05-15 09:37:20');
INSERT INTO `sensitive_word` VALUES (11, 'tmd', 1, '2023-05-15 09:37:25');
INSERT INTO `sensitive_word` VALUES (12, 'cnm', 1, '2023-05-15 09:37:40');
INSERT INTO `sensitive_word` VALUES (13, '你tmd', 1, '2023-05-15 09:39:11');
INSERT INTO `sensitive_word` VALUES (14, '牛的', 1, '2023-05-15 10:12:12');
INSERT INTO `sensitive_word` VALUES (15, '不可以', 1, '2023-05-15 17:48:42');

-- ----------------------------
-- Table structure for sys_setting
-- ----------------------------
DROP TABLE IF EXISTS `sys_setting`;
CREATE TABLE `sys_setting`  (
  `code` varchar(10) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL COMMENT '编号',
  `json_content` varchar(500) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '设置信息',
  PRIMARY KEY (`code`) USING BTREE
) ENGINE = InnoDB CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci COMMENT = '系统设置信息' ROW_FORMAT = DYNAMIC;

-- ----------------------------
-- Records of sys_setting
-- ----------------------------
INSERT INTO `sys_setting` VALUES ('audit', '{\"commentAudit\":false,\"imgAudit\":false,\"postAudit\":false}');
INSERT INTO `sys_setting` VALUES ('comment', '{\"commentDayCountThreshold\":5000,\"commentIntegral\":0,\"commentOpen\":true}');
INSERT INTO `sys_setting` VALUES ('email', '{\"emailContent\":\"您好：\\r\\n这是您的邮件码，请勿泄露给其他人\\r\\n否则会有盗号风险！！！\\r\\n邮箱验证码是：%s，15分钟有效\",\"emailTitle\":\"【bbsBlog】邮箱验证码\",\"mailHost\":\"smtp.163.com\",\"mailPassword\":\"XYFOZVBEWZMFQIRF\",\"mailPort\":465,\"mailUsername\":\"m19169640517@163.com\"}');
INSERT INTO `sys_setting` VALUES ('like', '{\"likeDayCountThreshold\":5000}');
INSERT INTO `sys_setting` VALUES ('post', '{\"attachmentSize\":1,\"dayImageUploadCount\":5000,\"postDayCountThreshold\":5000,\"postIntegral\":0}');
INSERT INTO `sys_setting` VALUES ('register', '{\"registerWelcomInfo\":\"社区欢迎你，以后的日子里，有老罗陪伴你一起学编程\"}');

-- ----------------------------
-- Table structure for user_info
-- ----------------------------
DROP TABLE IF EXISTS `user_info`;
CREATE TABLE `user_info`  (
  `user_id` varchar(15) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL COMMENT '用户ID',
  `nick_name` varchar(20) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '昵称',
  `username` varchar(20) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL COMMENT '用户名',
  `email` varchar(150) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '邮箱',
  `password` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL COMMENT '密码',
  `sex` tinyint(1) NULL DEFAULT NULL COMMENT '0:女 1:男',
  `person_description` varchar(200) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '个人描述',
  `join_time` datetime NULL DEFAULT NULL COMMENT '加入时间',
  `last_login_time` datetime NULL DEFAULT NULL COMMENT '最后登录时间',
  `last_login_ip` varchar(15) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '最后登录IP',
  `last_login_ip_address` varchar(100) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '最后登录ip地址',
  `total_integral` int(11) NULL DEFAULT NULL COMMENT '积分',
  `current_integral` int(11) NULL DEFAULT NULL COMMENT '当前积分',
  `status` tinyint(4) NOT NULL COMMENT '0:禁用 1:正常',
  PRIMARY KEY (`user_id`) USING BTREE,
  UNIQUE INDEX `key_nick_name`(`nick_name`) USING BTREE
) ENGINE = InnoDB CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci COMMENT = '用户信息' ROW_FORMAT = DYNAMIC;

-- ----------------------------
-- Records of user_info
-- ----------------------------
INSERT INTO `user_info` VALUES ('3058131375', 'niubi', '16091609', NULL, 'ef209c9343ca8c715265781876657b18', 1, '', '2023-05-14 13:49:32', '2023-05-15 18:03:12', '127.0.0.1', '未知', 5, 5, 1);
INSERT INTO `user_info` VALUES ('8408747315', '猜猜我是谁', 'admin2001', NULL, '4669bd39abe8fe856c5ef3833a9e0b6c', NULL, '', '2023-05-14 11:59:20', '2023-05-16 18:54:51', '127.0.0.1', '未知', 5, 5, -1);
INSERT INTO `user_info` VALUES ('8423597423', 'niuniuiu', '19011901', '2532172196@qq.com', 'ef209c9343ca8c715265781876657b18', 1, '测试账号', '2023-05-15 10:16:47', '2023-05-30 15:39:16', '127.0.0.1', '未知', 5, 5, 1);
INSERT INTO `user_info` VALUES ('9008483061', 'niucha', '13121312', NULL, 'ef209c9343ca8c715265781876657b18', NULL, '', '2023-05-14 21:14:23', '2023-05-30 15:38:27', '127.0.0.1', '未知', 5, 5, 1);

-- ----------------------------
-- Table structure for user_integral_record
-- ----------------------------
DROP TABLE IF EXISTS `user_integral_record`;
CREATE TABLE `user_integral_record`  (
  `record_id` int(11) NOT NULL AUTO_INCREMENT COMMENT '记录ID',
  `user_id` varchar(15) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '用户ID',
  `oper_type` tinyint(4) NULL DEFAULT NULL COMMENT '操作类型',
  `integral` int(11) NULL DEFAULT NULL COMMENT '积分',
  `create_time` datetime NULL DEFAULT NULL COMMENT '创建时间',
  PRIMARY KEY (`record_id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 10091 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci COMMENT = '用户积分记录表' ROW_FORMAT = DYNAMIC;

-- ----------------------------
-- Records of user_integral_record
-- ----------------------------
INSERT INTO `user_integral_record` VALUES (10087, '8408747315', 1, 5, '2023-05-14 11:59:20');
INSERT INTO `user_integral_record` VALUES (10088, '3058131375', 1, 5, '2023-05-14 13:49:32');
INSERT INTO `user_integral_record` VALUES (10089, '9008483061', 1, 5, '2023-05-14 21:14:23');
INSERT INTO `user_integral_record` VALUES (10090, '8423597423', 1, 5, '2023-05-15 10:16:47');

-- ----------------------------
-- Table structure for user_message
-- ----------------------------
DROP TABLE IF EXISTS `user_message`;
CREATE TABLE `user_message`  (
  `message_id` int(11) NOT NULL AUTO_INCREMENT COMMENT '自增ID',
  `received_user_id` varchar(15) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '接收人用户ID',
  `article_id` varchar(15) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '文章ID',
  `article_title` varchar(150) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '文章标题',
  `comment_id` int(11) NULL DEFAULT NULL COMMENT '评论ID',
  `send_user_id` varchar(15) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '发送人用户ID',
  `send_nick_name` varchar(20) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '发送人昵称',
  `message_type` tinyint(4) NULL DEFAULT NULL COMMENT '0:系统消息 1:评论 2:文章点赞  3:评论点赞 4:附件下载',
  `message_content` varchar(1000) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '消息内容',
  `status` tinyint(4) NULL DEFAULT NULL COMMENT '1:未读 2:已读',
  `create_time` datetime NULL DEFAULT NULL COMMENT '创建时间',
  PRIMARY KEY (`message_id`) USING BTREE,
  UNIQUE INDEX `idx_key`(`article_id`, `comment_id`, `send_user_id`, `message_type`) USING BTREE,
  INDEX `idx_received_user_id`(`received_user_id`) USING BTREE,
  INDEX `idx_status`(`status`) USING BTREE,
  INDEX `idx_type`(`message_type`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 10090 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci COMMENT = '用户消息' ROW_FORMAT = DYNAMIC;

-- ----------------------------
-- Records of user_message
-- ----------------------------
INSERT INTO `user_message` VALUES (10065, '8408747315', NULL, NULL, NULL, NULL, NULL, 0, '社区欢迎你，以后的日子里，有老罗陪伴你一起学编程', 1, '2023-05-14 11:59:20');
INSERT INTO `user_message` VALUES (10066, '3058131375', NULL, NULL, NULL, NULL, NULL, 0, '社区欢迎你，以后的日子里，有老罗陪伴你一起学编程', 1, '2023-05-14 13:49:32');
INSERT INTO `user_message` VALUES (10067, '3058131375', NULL, NULL, NULL, NULL, NULL, 0, '文章【MySQL基础篇2】被管理员删除', 1, '2023-05-14 19:12:35');
INSERT INTO `user_message` VALUES (10068, '3058131375', NULL, NULL, NULL, NULL, NULL, 0, '文章【MySQL基础篇】被管理员删除', 1, '2023-05-14 19:12:35');
INSERT INTO `user_message` VALUES (10069, '3058131375', NULL, NULL, NULL, NULL, NULL, 0, '文章【mysql基础篇2】被管理员删除', 1, '2023-05-14 19:12:35');
INSERT INTO `user_message` VALUES (10070, '3058131375', NULL, NULL, NULL, NULL, NULL, 0, '文章【mysql基础篇2】被管理员删除', 1, '2023-05-14 19:12:35');
INSERT INTO `user_message` VALUES (10071, '3058131375', NULL, NULL, NULL, NULL, NULL, 0, '文章【mysql基础篇2】被管理员删除', 1, '2023-05-14 19:12:35');
INSERT INTO `user_message` VALUES (10072, '3058131375', 'OlCSNpv6zq6i72O', 'mysql基础篇2', 10024, '8408747315', '猜猜我是谁', 1, '牛的牛的的顶顶顶顶顶', 1, '2023-05-14 21:03:06');
INSERT INTO `user_message` VALUES (10073, '3058131375', 'OlCSNpv6zq6i72O', 'mysql基础篇2', 10025, '8408747315', '猜猜我是谁', 1, '2222222222222222', 1, '2023-05-14 21:05:59');
INSERT INTO `user_message` VALUES (10074, '3058131375', 'OlCSNpv6zq6i72O', 'mysql基础篇2', 10023, '8408747315', '猜猜我是谁', 3, '测试评论功能22222', 1, '2023-05-14 21:06:29');
INSERT INTO `user_message` VALUES (10075, '3058131375', 'OlCSNpv6zq6i72O', 'mysql基础篇2', 10022, '8408747315', '猜猜我是谁', 3, '测试评论功能中', 1, '2023-05-14 21:06:31');
INSERT INTO `user_message` VALUES (10076, '9008483061', NULL, NULL, NULL, NULL, NULL, 0, '社区欢迎你，以后的日子里，有老罗陪伴你一起学编程', 1, '2023-05-14 21:14:23');
INSERT INTO `user_message` VALUES (10077, '3058131375', 'OlCSNpv6zq6i72O', 'mysql基础篇2', 0, '9008483061', 'niucha', 2, NULL, 1, '2023-05-14 21:53:37');
INSERT INTO `user_message` VALUES (10078, '3058131375', 'OlCSNpv6zq6i72O', 'mysql基础篇2', 0, '9008483061', 'niucha', 5, NULL, 1, '2023-05-14 21:53:38');
INSERT INTO `user_message` VALUES (10079, '8423597423', NULL, NULL, NULL, NULL, NULL, 0, '社区欢迎你，以后的日子里，有老罗陪伴你一起学编程', 1, '2023-05-15 10:16:47');
INSERT INTO `user_message` VALUES (10080, '3058131375', 'OlCSNpv6zq6i72O', 'mysql基础篇2', 0, '8423597423', 'niuniuiu', 2, NULL, 1, '2023-05-15 10:22:02');
INSERT INTO `user_message` VALUES (10081, '3058131375', 'OlCSNpv6zq6i72O', 'mysql基础篇2', 0, '8423597423', 'niuniuiu', 5, NULL, 1, '2023-05-15 10:22:03');
INSERT INTO `user_message` VALUES (10082, '3058131375', 'OlCSNpv6zq6i72O', 'mysql基础篇2', 10026, '8423597423', 'niuniuiu', 1, '你就是一个**', 1, '2023-05-15 10:22:24');
INSERT INTO `user_message` VALUES (10083, '8408747315', 'PW7QQfQXILxF9Wy', '常见设计模式', 10027, '8423597423', 'niuniuiu', 1, '可以是·，good', 1, '2023-05-15 11:07:55');
INSERT INTO `user_message` VALUES (10084, '8423597423', NULL, NULL, NULL, NULL, NULL, 0, '评论【你就是一个**】被管理员删除', 1, '2023-05-15 17:44:52');
INSERT INTO `user_message` VALUES (10085, '8408747315', 'PW7QQfQXILxF9Wy', '常见设计模式', 0, '8423597423', 'niuniuiu', 2, NULL, 1, '2023-05-15 18:27:47');
INSERT INTO `user_message` VALUES (10086, '8408747315', 'PW7QQfQXILxF9Wy', '常见设计模式', 0, '8423597423', 'niuniuiu', 5, NULL, 1, '2023-05-15 18:27:48');
INSERT INTO `user_message` VALUES (10087, '8408747315', 'PW7QQfQXILxF9Wy', '常见设计模式', 10028, '8423597423', 'niuniuiu', 1, '你的文章就是一坨，**', 1, '2023-05-15 18:28:07');
INSERT INTO `user_message` VALUES (10088, '8408747315', 'PW7QQfQXILxF9Wy', '常见设计模式', 0, '9008483061', 'niucha', 2, NULL, 1, '2023-05-30 15:05:17');
INSERT INTO `user_message` VALUES (10089, '8408747315', 'PW7QQfQXILxF9Wy', '常见设计模式', 10029, '8423597423', 'niuniuiu', 1, 'ddddd', 1, '2023-05-30 15:49:30');

-- ----------------------------
-- Table structure for user_permission
-- ----------------------------
DROP TABLE IF EXISTS `user_permission`;
CREATE TABLE `user_permission`  (
  `user_id` varchar(15) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL COMMENT '用户id，主键',
  `json_permission` varchar(500) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '用户隐私设置json串',
  PRIMARY KEY (`user_id`) USING BTREE
) ENGINE = InnoDB CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci ROW_FORMAT = DYNAMIC;

-- ----------------------------
-- Records of user_permission
-- ----------------------------
INSERT INTO `user_permission` VALUES ('3058131375', '[\"postArticle\",\"postComment\",\"postImg\",\"unFreezeImg\"]');
INSERT INTO `user_permission` VALUES ('8408747315', '[\"postArticle\",\"postComment\",\"postImg\",\"unFreezeImg\"]');
INSERT INTO `user_permission` VALUES ('8423597423', '[\"postArticle\",\"postComment\",\"postImg\",\"unFreezeImg\"]');
INSERT INTO `user_permission` VALUES ('9008483061', '[\"postArticle\",\"postComment\",\"postImg\",\"unFreezeImg\"]');

-- ----------------------------
-- Table structure for user_privacy
-- ----------------------------
DROP TABLE IF EXISTS `user_privacy`;
CREATE TABLE `user_privacy`  (
  `user_id` varchar(15) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL COMMENT '用户id，主键',
  `json_privacy` varchar(500) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '用户隐私设置json串',
  PRIMARY KEY (`user_id`) USING BTREE
) ENGINE = InnoDB CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci ROW_FORMAT = DYNAMIC;

-- ----------------------------
-- Records of user_privacy
-- ----------------------------
INSERT INTO `user_privacy` VALUES ('3058131375', '{\"articleView\":0,\"collectView\":0,\"commentView\":0,\"fansView\":0,\"followView\":0,\"likeView\":0}');
INSERT INTO `user_privacy` VALUES ('8408747315', '{\"articleView\":0,\"collectView\":0,\"commentView\":0,\"fansView\":0,\"followView\":0,\"likeView\":0}');
INSERT INTO `user_privacy` VALUES ('8423597423', '{\"articleView\":0,\"collectView\":1,\"commentView\":1,\"fansView\":2,\"followView\":1,\"likeView\":1}');
INSERT INTO `user_privacy` VALUES ('9008483061', '{\"articleView\":0,\"collectView\":0,\"commentView\":0,\"fansView\":0,\"followView\":0,\"likeView\":0}');

SET FOREIGN_KEY_CHECKS = 1;
